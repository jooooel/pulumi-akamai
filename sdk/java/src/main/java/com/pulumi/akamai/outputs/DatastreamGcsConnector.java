// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamGcsConnector {
    /**
     * @return The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     * 
     */
    private final String bucket;
    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    private final @Nullable Boolean compressLogs;
    private final @Nullable Integer connectorId;
    /**
     * @return The name of the connector.
     * 
     */
    private final String connectorName;
    /**
     * @return The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     * 
     */
    private final @Nullable String path;
    /**
     * @return - (Required) **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
     * 
     */
    private final String privateKey;
    /**
     * @return - (Required) The unique ID of your Google Cloud project.
     * 
     */
    private final String projectId;
    /**
     * @return - (Required)	The name of the service account with the storage.object.create permission or Storage Object Creator role.
     * 
     */
    private final String serviceAccountName;

    @CustomType.Constructor
    private DatastreamGcsConnector(
        @CustomType.Parameter("bucket") String bucket,
        @CustomType.Parameter("compressLogs") @Nullable Boolean compressLogs,
        @CustomType.Parameter("connectorId") @Nullable Integer connectorId,
        @CustomType.Parameter("connectorName") String connectorName,
        @CustomType.Parameter("path") @Nullable String path,
        @CustomType.Parameter("privateKey") String privateKey,
        @CustomType.Parameter("projectId") String projectId,
        @CustomType.Parameter("serviceAccountName") String serviceAccountName) {
        this.bucket = bucket;
        this.compressLogs = compressLogs;
        this.connectorId = connectorId;
        this.connectorName = connectorName;
        this.path = path;
        this.privateKey = privateKey;
        this.projectId = projectId;
        this.serviceAccountName = serviceAccountName;
    }

    /**
     * @return The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    public Optional<Boolean> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }
    public Optional<Integer> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }
    /**
     * @return The name of the connector.
     * 
     */
    public String connectorName() {
        return this.connectorName;
    }
    /**
     * @return The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return - (Required) **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return - (Required) The unique ID of your Google Cloud project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return - (Required)	The name of the service account with the storage.object.create permission or Storage Object Creator role.
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamGcsConnector defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bucket;
        private @Nullable Boolean compressLogs;
        private @Nullable Integer connectorId;
        private String connectorName;
        private @Nullable String path;
        private String privateKey;
        private String projectId;
        private String serviceAccountName;

        public Builder() {
    	      // Empty
        }

        public Builder(DatastreamGcsConnector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.compressLogs = defaults.compressLogs;
    	      this.connectorId = defaults.connectorId;
    	      this.connectorName = defaults.connectorName;
    	      this.path = defaults.path;
    	      this.privateKey = defaults.privateKey;
    	      this.projectId = defaults.projectId;
    	      this.serviceAccountName = defaults.serviceAccountName;
        }

        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder compressLogs(@Nullable Boolean compressLogs) {
            this.compressLogs = compressLogs;
            return this;
        }
        public Builder connectorId(@Nullable Integer connectorId) {
            this.connectorId = connectorId;
            return this;
        }
        public Builder connectorName(String connectorName) {
            this.connectorName = Objects.requireNonNull(connectorName);
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        public Builder privateKey(String privateKey) {
            this.privateKey = Objects.requireNonNull(privateKey);
            return this;
        }
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public Builder serviceAccountName(String serviceAccountName) {
            this.serviceAccountName = Objects.requireNonNull(serviceAccountName);
            return this;
        }        public DatastreamGcsConnector build() {
            return new DatastreamGcsConnector(bucket, compressLogs, connectorId, connectorName, path, privateKey, projectId, serviceAccountName);
        }
    }
}
