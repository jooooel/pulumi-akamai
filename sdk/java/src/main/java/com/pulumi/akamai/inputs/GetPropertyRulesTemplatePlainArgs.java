// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetPropertyRulesTemplateTemplate;
import com.pulumi.akamai.inputs.GetPropertyRulesTemplateVariable;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesTemplatePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesTemplatePlainArgs Empty = new GetPropertyRulesTemplatePlainArgs();

    /**
     * The absolute path to your top-level JSON template file. The top-level template combines smaller, nested JSON templates to form your property rule tree. This argument conflicts with the `template` argument.
     * 
     */
    @Import(name="templateFile")
    private @Nullable String templateFile;

    /**
     * @return The absolute path to your top-level JSON template file. The top-level template combines smaller, nested JSON templates to form your property rule tree. This argument conflicts with the `template` argument.
     * 
     */
    public Optional<String> templateFile() {
        return Optional.ofNullable(this.templateFile);
    }

    /**
     * The template you use in your configuration. This argument conflicts with the `template_file` argument.
     * 
     */
    @Import(name="templates")
    private @Nullable List<GetPropertyRulesTemplateTemplate> templates;

    /**
     * @return The template you use in your configuration. This argument conflicts with the `template_file` argument.
     * 
     */
    public Optional<List<GetPropertyRulesTemplateTemplate>> templates() {
        return Optional.ofNullable(this.templates);
    }

    /**
     * Required when using `var_values_file`. The absolute path to the file containing variable definitions and defaults. This argument conflicts with the `variables` argument.
     * 
     */
    @Import(name="varDefinitionFile")
    private @Nullable String varDefinitionFile;

    /**
     * @return Required when using `var_values_file`. The absolute path to the file containing variable definitions and defaults. This argument conflicts with the `variables` argument.
     * 
     */
    public Optional<String> varDefinitionFile() {
        return Optional.ofNullable(this.varDefinitionFile);
    }

    /**
     * Required when using `var_definition_file`. The absolute path to the file containing variable values. This argument conflicts with the `variables` argument.
     * 
     */
    @Import(name="varValuesFile")
    private @Nullable String varValuesFile;

    /**
     * @return Required when using `var_definition_file`. The absolute path to the file containing variable values. This argument conflicts with the `variables` argument.
     * 
     */
    public Optional<String> varValuesFile() {
        return Optional.ofNullable(this.varValuesFile);
    }

    /**
     * The definition of one or more variables. This argument conflicts with the `var_definition_file` and `var_values_file` arguments. A `variables` block includes:
     * 
     */
    @Import(name="variables")
    private @Nullable List<GetPropertyRulesTemplateVariable> variables;

    /**
     * @return The definition of one or more variables. This argument conflicts with the `var_definition_file` and `var_values_file` arguments. A `variables` block includes:
     * 
     */
    public Optional<List<GetPropertyRulesTemplateVariable>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private GetPropertyRulesTemplatePlainArgs() {}

    private GetPropertyRulesTemplatePlainArgs(GetPropertyRulesTemplatePlainArgs $) {
        this.templateFile = $.templateFile;
        this.templates = $.templates;
        this.varDefinitionFile = $.varDefinitionFile;
        this.varValuesFile = $.varValuesFile;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesTemplatePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesTemplatePlainArgs $;

        public Builder() {
            $ = new GetPropertyRulesTemplatePlainArgs();
        }

        public Builder(GetPropertyRulesTemplatePlainArgs defaults) {
            $ = new GetPropertyRulesTemplatePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param templateFile The absolute path to your top-level JSON template file. The top-level template combines smaller, nested JSON templates to form your property rule tree. This argument conflicts with the `template` argument.
         * 
         * @return builder
         * 
         */
        public Builder templateFile(@Nullable String templateFile) {
            $.templateFile = templateFile;
            return this;
        }

        /**
         * @param templates The template you use in your configuration. This argument conflicts with the `template_file` argument.
         * 
         * @return builder
         * 
         */
        public Builder templates(@Nullable List<GetPropertyRulesTemplateTemplate> templates) {
            $.templates = templates;
            return this;
        }

        /**
         * @param templates The template you use in your configuration. This argument conflicts with the `template_file` argument.
         * 
         * @return builder
         * 
         */
        public Builder templates(GetPropertyRulesTemplateTemplate... templates) {
            return templates(List.of(templates));
        }

        /**
         * @param varDefinitionFile Required when using `var_values_file`. The absolute path to the file containing variable definitions and defaults. This argument conflicts with the `variables` argument.
         * 
         * @return builder
         * 
         */
        public Builder varDefinitionFile(@Nullable String varDefinitionFile) {
            $.varDefinitionFile = varDefinitionFile;
            return this;
        }

        /**
         * @param varValuesFile Required when using `var_definition_file`. The absolute path to the file containing variable values. This argument conflicts with the `variables` argument.
         * 
         * @return builder
         * 
         */
        public Builder varValuesFile(@Nullable String varValuesFile) {
            $.varValuesFile = varValuesFile;
            return this;
        }

        /**
         * @param variables The definition of one or more variables. This argument conflicts with the `var_definition_file` and `var_values_file` arguments. A `variables` block includes:
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable List<GetPropertyRulesTemplateVariable> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables The definition of one or more variables. This argument conflicts with the `var_definition_file` and `var_values_file` arguments. A `variables` block includes:
         * 
         * @return builder
         * 
         */
        public Builder variables(GetPropertyRulesTemplateVariable... variables) {
            return variables(List.of(variables));
        }

        public GetPropertyRulesTemplatePlainArgs build() {
            return $;
        }
    }

}
