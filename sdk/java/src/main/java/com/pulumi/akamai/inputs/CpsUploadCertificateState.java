// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsUploadCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CpsUploadCertificateState Empty = new CpsUploadCertificateState();

    /**
     * Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     * 
     */
    @Import(name="acknowledgeChangeManagement")
    private @Nullable Output<Boolean> acknowledgeChangeManagement;

    /**
     * @return Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     * 
     */
    public Optional<Output<Boolean>> acknowledgeChangeManagement() {
        return Optional.ofNullable(this.acknowledgeChangeManagement);
    }

    /**
     * Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
     * 
     */
    @Import(name="acknowledgePostVerificationWarnings")
    private @Nullable Output<Boolean> acknowledgePostVerificationWarnings;

    /**
     * @return Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
     * 
     */
    public Optional<Output<Boolean>> acknowledgePostVerificationWarnings() {
        return Optional.ofNullable(this.acknowledgePostVerificationWarnings);
    }

    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     * 
     */
    @Import(name="autoApproveWarnings")
    private @Nullable Output<List<String>> autoApproveWarnings;

    /**
     * @return The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     * 
     */
    public Optional<Output<List<String>>> autoApproveWarnings() {
        return Optional.ofNullable(this.autoApproveWarnings);
    }

    /**
     * The ECDSA certificate in PEM format you want to upload.
     * 
     */
    @Import(name="certificateEcdsaPem")
    private @Nullable Output<String> certificateEcdsaPem;

    /**
     * @return The ECDSA certificate in PEM format you want to upload.
     * 
     */
    public Optional<Output<String>> certificateEcdsaPem() {
        return Optional.ofNullable(this.certificateEcdsaPem);
    }

    /**
     * The RSA certificate in PEM format you want to upload.
     * 
     */
    @Import(name="certificateRsaPem")
    private @Nullable Output<String> certificateRsaPem;

    /**
     * @return The RSA certificate in PEM format you want to upload.
     * 
     */
    public Optional<Output<String>> certificateRsaPem() {
        return Optional.ofNullable(this.certificateRsaPem);
    }

    /**
     * Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     * 
     */
    @Import(name="enrollmentId")
    private @Nullable Output<Integer> enrollmentId;

    /**
     * @return Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     * 
     */
    public Optional<Output<Integer>> enrollmentId() {
        return Optional.ofNullable(this.enrollmentId);
    }

    /**
     * The trust chain in PEM format for the ECDSA certificate you want to upload.
     * 
     */
    @Import(name="trustChainEcdsaPem")
    private @Nullable Output<String> trustChainEcdsaPem;

    /**
     * @return The trust chain in PEM format for the ECDSA certificate you want to upload.
     * 
     */
    public Optional<Output<String>> trustChainEcdsaPem() {
        return Optional.ofNullable(this.trustChainEcdsaPem);
    }

    /**
     * The trust chain in PEM format for the RSA certificate you want to upload.
     * 
     */
    @Import(name="trustChainRsaPem")
    private @Nullable Output<String> trustChainRsaPem;

    /**
     * @return The trust chain in PEM format for the RSA certificate you want to upload.
     * 
     */
    public Optional<Output<String>> trustChainRsaPem() {
        return Optional.ofNullable(this.trustChainRsaPem);
    }

    /**
     * Used to distinguish whether there are unacknowledged warnings for a certificate
     * 
     */
    @Import(name="unacknowledgedWarnings")
    private @Nullable Output<Boolean> unacknowledgedWarnings;

    /**
     * @return Used to distinguish whether there are unacknowledged warnings for a certificate
     * 
     */
    public Optional<Output<Boolean>> unacknowledgedWarnings() {
        return Optional.ofNullable(this.unacknowledgedWarnings);
    }

    /**
     * Boolean. Enter `true` to wait for certificate to be deployed.
     * 
     */
    @Import(name="waitForDeployment")
    private @Nullable Output<Boolean> waitForDeployment;

    /**
     * @return Boolean. Enter `true` to wait for certificate to be deployed.
     * 
     */
    public Optional<Output<Boolean>> waitForDeployment() {
        return Optional.ofNullable(this.waitForDeployment);
    }

    private CpsUploadCertificateState() {}

    private CpsUploadCertificateState(CpsUploadCertificateState $) {
        this.acknowledgeChangeManagement = $.acknowledgeChangeManagement;
        this.acknowledgePostVerificationWarnings = $.acknowledgePostVerificationWarnings;
        this.autoApproveWarnings = $.autoApproveWarnings;
        this.certificateEcdsaPem = $.certificateEcdsaPem;
        this.certificateRsaPem = $.certificateRsaPem;
        this.enrollmentId = $.enrollmentId;
        this.trustChainEcdsaPem = $.trustChainEcdsaPem;
        this.trustChainRsaPem = $.trustChainRsaPem;
        this.unacknowledgedWarnings = $.unacknowledgedWarnings;
        this.waitForDeployment = $.waitForDeployment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsUploadCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsUploadCertificateState $;

        public Builder() {
            $ = new CpsUploadCertificateState();
        }

        public Builder(CpsUploadCertificateState defaults) {
            $ = new CpsUploadCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgeChangeManagement Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgeChangeManagement(@Nullable Output<Boolean> acknowledgeChangeManagement) {
            $.acknowledgeChangeManagement = acknowledgeChangeManagement;
            return this;
        }

        /**
         * @param acknowledgeChangeManagement Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgeChangeManagement(Boolean acknowledgeChangeManagement) {
            return acknowledgeChangeManagement(Output.of(acknowledgeChangeManagement));
        }

        /**
         * @param acknowledgePostVerificationWarnings Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePostVerificationWarnings(@Nullable Output<Boolean> acknowledgePostVerificationWarnings) {
            $.acknowledgePostVerificationWarnings = acknowledgePostVerificationWarnings;
            return this;
        }

        /**
         * @param acknowledgePostVerificationWarnings Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePostVerificationWarnings(Boolean acknowledgePostVerificationWarnings) {
            return acknowledgePostVerificationWarnings(Output.of(acknowledgePostVerificationWarnings));
        }

        /**
         * @param autoApproveWarnings The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(@Nullable Output<List<String>> autoApproveWarnings) {
            $.autoApproveWarnings = autoApproveWarnings;
            return this;
        }

        /**
         * @param autoApproveWarnings The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(List<String> autoApproveWarnings) {
            return autoApproveWarnings(Output.of(autoApproveWarnings));
        }

        /**
         * @param autoApproveWarnings The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(String... autoApproveWarnings) {
            return autoApproveWarnings(List.of(autoApproveWarnings));
        }

        /**
         * @param certificateEcdsaPem The ECDSA certificate in PEM format you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder certificateEcdsaPem(@Nullable Output<String> certificateEcdsaPem) {
            $.certificateEcdsaPem = certificateEcdsaPem;
            return this;
        }

        /**
         * @param certificateEcdsaPem The ECDSA certificate in PEM format you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder certificateEcdsaPem(String certificateEcdsaPem) {
            return certificateEcdsaPem(Output.of(certificateEcdsaPem));
        }

        /**
         * @param certificateRsaPem The RSA certificate in PEM format you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder certificateRsaPem(@Nullable Output<String> certificateRsaPem) {
            $.certificateRsaPem = certificateRsaPem;
            return this;
        }

        /**
         * @param certificateRsaPem The RSA certificate in PEM format you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder certificateRsaPem(String certificateRsaPem) {
            return certificateRsaPem(Output.of(certificateRsaPem));
        }

        /**
         * @param enrollmentId Unique identifier for the certificate enrollment.
         * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
         * 
         * @return builder
         * 
         */
        public Builder enrollmentId(@Nullable Output<Integer> enrollmentId) {
            $.enrollmentId = enrollmentId;
            return this;
        }

        /**
         * @param enrollmentId Unique identifier for the certificate enrollment.
         * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
         * 
         * @return builder
         * 
         */
        public Builder enrollmentId(Integer enrollmentId) {
            return enrollmentId(Output.of(enrollmentId));
        }

        /**
         * @param trustChainEcdsaPem The trust chain in PEM format for the ECDSA certificate you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder trustChainEcdsaPem(@Nullable Output<String> trustChainEcdsaPem) {
            $.trustChainEcdsaPem = trustChainEcdsaPem;
            return this;
        }

        /**
         * @param trustChainEcdsaPem The trust chain in PEM format for the ECDSA certificate you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder trustChainEcdsaPem(String trustChainEcdsaPem) {
            return trustChainEcdsaPem(Output.of(trustChainEcdsaPem));
        }

        /**
         * @param trustChainRsaPem The trust chain in PEM format for the RSA certificate you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder trustChainRsaPem(@Nullable Output<String> trustChainRsaPem) {
            $.trustChainRsaPem = trustChainRsaPem;
            return this;
        }

        /**
         * @param trustChainRsaPem The trust chain in PEM format for the RSA certificate you want to upload.
         * 
         * @return builder
         * 
         */
        public Builder trustChainRsaPem(String trustChainRsaPem) {
            return trustChainRsaPem(Output.of(trustChainRsaPem));
        }

        /**
         * @param unacknowledgedWarnings Used to distinguish whether there are unacknowledged warnings for a certificate
         * 
         * @return builder
         * 
         */
        public Builder unacknowledgedWarnings(@Nullable Output<Boolean> unacknowledgedWarnings) {
            $.unacknowledgedWarnings = unacknowledgedWarnings;
            return this;
        }

        /**
         * @param unacknowledgedWarnings Used to distinguish whether there are unacknowledged warnings for a certificate
         * 
         * @return builder
         * 
         */
        public Builder unacknowledgedWarnings(Boolean unacknowledgedWarnings) {
            return unacknowledgedWarnings(Output.of(unacknowledgedWarnings));
        }

        /**
         * @param waitForDeployment Boolean. Enter `true` to wait for certificate to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder waitForDeployment(@Nullable Output<Boolean> waitForDeployment) {
            $.waitForDeployment = waitForDeployment;
            return this;
        }

        /**
         * @param waitForDeployment Boolean. Enter `true` to wait for certificate to be deployed.
         * 
         * @return builder
         * 
         */
        public Builder waitForDeployment(Boolean waitForDeployment) {
            return waitForDeployment(Output.of(waitForDeployment));
        }

        public CpsUploadCertificateState build() {
            return $;
        }
    }

}
