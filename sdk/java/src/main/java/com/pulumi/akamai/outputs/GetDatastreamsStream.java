// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetDatastreamsStreamError;
import com.pulumi.akamai.outputs.GetDatastreamsStreamProperty;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatastreamsStream {
    private String activationStatus;
    private Boolean archived;
    private String connectors;
    private String contractId;
    private String createdBy;
    private String createdDate;
    private Integer currentVersionId;
    private List<GetDatastreamsStreamError> errors;
    /**
     * @return Unique identifier of the group that can access the product.
     * 
     */
    private Integer groupId;
    private String groupName;
    private List<GetDatastreamsStreamProperty> properties;
    private Integer streamId;
    private String streamName;
    private String streamTypeName;
    private Integer streamVersionId;

    private GetDatastreamsStream() {}
    public String activationStatus() {
        return this.activationStatus;
    }
    public Boolean archived() {
        return this.archived;
    }
    public String connectors() {
        return this.connectors;
    }
    public String contractId() {
        return this.contractId;
    }
    public String createdBy() {
        return this.createdBy;
    }
    public String createdDate() {
        return this.createdDate;
    }
    public Integer currentVersionId() {
        return this.currentVersionId;
    }
    public List<GetDatastreamsStreamError> errors() {
        return this.errors;
    }
    /**
     * @return Unique identifier of the group that can access the product.
     * 
     */
    public Integer groupId() {
        return this.groupId;
    }
    public String groupName() {
        return this.groupName;
    }
    public List<GetDatastreamsStreamProperty> properties() {
        return this.properties;
    }
    public Integer streamId() {
        return this.streamId;
    }
    public String streamName() {
        return this.streamName;
    }
    public String streamTypeName() {
        return this.streamTypeName;
    }
    public Integer streamVersionId() {
        return this.streamVersionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatastreamsStream defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activationStatus;
        private Boolean archived;
        private String connectors;
        private String contractId;
        private String createdBy;
        private String createdDate;
        private Integer currentVersionId;
        private List<GetDatastreamsStreamError> errors;
        private Integer groupId;
        private String groupName;
        private List<GetDatastreamsStreamProperty> properties;
        private Integer streamId;
        private String streamName;
        private String streamTypeName;
        private Integer streamVersionId;
        public Builder() {}
        public Builder(GetDatastreamsStream defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationStatus = defaults.activationStatus;
    	      this.archived = defaults.archived;
    	      this.connectors = defaults.connectors;
    	      this.contractId = defaults.contractId;
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.currentVersionId = defaults.currentVersionId;
    	      this.errors = defaults.errors;
    	      this.groupId = defaults.groupId;
    	      this.groupName = defaults.groupName;
    	      this.properties = defaults.properties;
    	      this.streamId = defaults.streamId;
    	      this.streamName = defaults.streamName;
    	      this.streamTypeName = defaults.streamTypeName;
    	      this.streamVersionId = defaults.streamVersionId;
        }

        @CustomType.Setter
        public Builder activationStatus(String activationStatus) {
            this.activationStatus = Objects.requireNonNull(activationStatus);
            return this;
        }
        @CustomType.Setter
        public Builder archived(Boolean archived) {
            this.archived = Objects.requireNonNull(archived);
            return this;
        }
        @CustomType.Setter
        public Builder connectors(String connectors) {
            this.connectors = Objects.requireNonNull(connectors);
            return this;
        }
        @CustomType.Setter
        public Builder contractId(String contractId) {
            this.contractId = Objects.requireNonNull(contractId);
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            this.createdBy = Objects.requireNonNull(createdBy);
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder currentVersionId(Integer currentVersionId) {
            this.currentVersionId = Objects.requireNonNull(currentVersionId);
            return this;
        }
        @CustomType.Setter
        public Builder errors(List<GetDatastreamsStreamError> errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        public Builder errors(GetDatastreamsStreamError... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        @CustomType.Setter
        public Builder groupName(String groupName) {
            this.groupName = Objects.requireNonNull(groupName);
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetDatastreamsStreamProperty> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder properties(GetDatastreamsStreamProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder streamId(Integer streamId) {
            this.streamId = Objects.requireNonNull(streamId);
            return this;
        }
        @CustomType.Setter
        public Builder streamName(String streamName) {
            this.streamName = Objects.requireNonNull(streamName);
            return this;
        }
        @CustomType.Setter
        public Builder streamTypeName(String streamTypeName) {
            this.streamTypeName = Objects.requireNonNull(streamTypeName);
            return this;
        }
        @CustomType.Setter
        public Builder streamVersionId(Integer streamVersionId) {
            this.streamVersionId = Objects.requireNonNull(streamVersionId);
            return this;
        }
        public GetDatastreamsStream build() {
            final var o = new GetDatastreamsStream();
            o.activationStatus = activationStatus;
            o.archived = archived;
            o.connectors = connectors;
            o.contractId = contractId;
            o.createdBy = createdBy;
            o.createdDate = createdDate;
            o.currentVersionId = currentVersionId;
            o.errors = errors;
            o.groupId = groupId;
            o.groupName = groupName;
            o.properties = properties;
            o.streamId = streamId;
            o.streamName = streamName;
            o.streamTypeName = streamTypeName;
            o.streamVersionId = streamVersionId;
            return o;
        }
    }
}
