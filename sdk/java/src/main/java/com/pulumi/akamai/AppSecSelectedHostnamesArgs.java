// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AppSecSelectedHostnamesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSecSelectedHostnamesArgs Empty = new AppSecSelectedHostnamesArgs();

    /**
     * . Unique identifier of the security configuration associated with the hostnames.
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return . Unique identifier of the security configuration associated with the hostnames.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * . JSON array of hostnames to be added or removed from the protected hosts list.
     * 
     */
    @Import(name="hostnames", required=true)
    private Output<List<String>> hostnames;

    /**
     * @return . JSON array of hostnames to be added or removed from the protected hosts list.
     * 
     */
    public Output<List<String>> hostnames() {
        return this.hostnames;
    }

    /**
     * . Indicates how the `hostnames` array is to be applied. Allowed values are:
     * - **APPEND**. Hosts listed in the `hostnames` array are added to the current list of selected hostnames.
     * - **REPLACE**. Hosts listed in the `hostnames`  array overwrite the current list of selected hostnames: the “old” hostnames are replaced by the specified set of hostnames.
     * - **REMOVE**, Hosts listed in the `hostnames` array are removed from the current list of select hostnames.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return . Indicates how the `hostnames` array is to be applied. Allowed values are:
     * - **APPEND**. Hosts listed in the `hostnames` array are added to the current list of selected hostnames.
     * - **REPLACE**. Hosts listed in the `hostnames`  array overwrite the current list of selected hostnames: the “old” hostnames are replaced by the specified set of hostnames.
     * - **REMOVE**, Hosts listed in the `hostnames` array are removed from the current list of select hostnames.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    private AppSecSelectedHostnamesArgs() {}

    private AppSecSelectedHostnamesArgs(AppSecSelectedHostnamesArgs $) {
        this.configId = $.configId;
        this.hostnames = $.hostnames;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecSelectedHostnamesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecSelectedHostnamesArgs $;

        public Builder() {
            $ = new AppSecSelectedHostnamesArgs();
        }

        public Builder(AppSecSelectedHostnamesArgs defaults) {
            $ = new AppSecSelectedHostnamesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the hostnames.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the hostnames.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param hostnames . JSON array of hostnames to be added or removed from the protected hosts list.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(Output<List<String>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames . JSON array of hostnames to be added or removed from the protected hosts list.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<String> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param hostnames . JSON array of hostnames to be added or removed from the protected hosts list.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param mode . Indicates how the `hostnames` array is to be applied. Allowed values are:
         * - **APPEND**. Hosts listed in the `hostnames` array are added to the current list of selected hostnames.
         * - **REPLACE**. Hosts listed in the `hostnames`  array overwrite the current list of selected hostnames: the “old” hostnames are replaced by the specified set of hostnames.
         * - **REMOVE**, Hosts listed in the `hostnames` array are removed from the current list of select hostnames.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode . Indicates how the `hostnames` array is to be applied. Allowed values are:
         * - **APPEND**. Hosts listed in the `hostnames` array are added to the current list of selected hostnames.
         * - **REPLACE**. Hosts listed in the `hostnames`  array overwrite the current list of selected hostnames: the “old” hostnames are replaced by the specified set of hostnames.
         * - **REMOVE**, Hosts listed in the `hostnames` array are removed from the current list of select hostnames.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public AppSecSelectedHostnamesArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            $.hostnames = Objects.requireNonNull($.hostnames, "expected parameter 'hostnames' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            return $;
        }
    }

}
