// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GtmPropertyLivenessTestHttpHeader;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GtmPropertyLivenessTest {
    /**
     * @return If `test_object_protocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
     * 
     */
    private final @Nullable Boolean answersRequired;
    /**
     * @return A boolean that if set to `true`, disables warnings when non-standard ports are used.
     * 
     */
    private final @Nullable Boolean disableNonstandardPortWarning;
    /**
     * @return A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
     * 
     */
    private final @Nullable Boolean disabled;
    /**
     * @return Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     * 
     */
    private final @Nullable Double errorPenalty;
    /**
     * @return A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    private final @Nullable Boolean httpError3xx;
    /**
     * @return A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    private final @Nullable Boolean httpError4xx;
    /**
     * @return A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    private final @Nullable Boolean httpError5xx;
    /**
     * @return Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
     * 
     */
    private final @Nullable List<GtmPropertyLivenessTestHttpHeader> httpHeaders;
    /**
     * @return Name of HTTP header.
     * 
     */
    private final String name;
    /**
     * @return A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `test_object_protocol` of https.
     * 
     */
    private final @Nullable Boolean peerCertificateVerification;
    /**
     * @return A boolean indicating whether the `test_object_protocol` is DNS. The DNS query is recursive.
     * 
     */
    private final @Nullable Boolean recursionRequested;
    /**
     * @return Specifies a request string.
     * 
     */
    private final @Nullable String requestString;
    /**
     * @return Specifies the query type, if `test_object_protocol` is DNS.
     * 
     */
    private final @Nullable String resourceType;
    /**
     * @return Specifies a response string.
     * 
     */
    private final @Nullable String responseString;
    /**
     * @return Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
     * 
     */
    private final @Nullable String sslClientCertificate;
    /**
     * @return Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can&#39;t have a passphrase nor be used for any other purpose.
     * 
     */
    private final @Nullable String sslClientPrivateKey;
    /**
     * @return Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
     * 
     */
    private final Integer testInterval;
    /**
     * @return Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
     * 
     */
    private final String testObject;
    /**
     * @return Specifies the test object&#39;s password. It is required if testObjectProtocol is ftp.
     * 
     */
    private final @Nullable String testObjectPassword;
    /**
     * @return Specifies the port number for the testObject.
     * 
     */
    private final @Nullable Integer testObjectPort;
    /**
     * @return Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
     * 
     */
    private final String testObjectProtocol;
    /**
     * @return A descriptive name for the testObject.
     * 
     */
    private final @Nullable String testObjectUsername;
    /**
     * @return Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
     * 
     */
    private final Double testTimeout;
    /**
     * @return Specifies the score to be reported if the liveness test times out.
     * 
     */
    private final @Nullable Double timeoutPenalty;

    @CustomType.Constructor
    private GtmPropertyLivenessTest(
        @CustomType.Parameter("answersRequired") @Nullable Boolean answersRequired,
        @CustomType.Parameter("disableNonstandardPortWarning") @Nullable Boolean disableNonstandardPortWarning,
        @CustomType.Parameter("disabled") @Nullable Boolean disabled,
        @CustomType.Parameter("errorPenalty") @Nullable Double errorPenalty,
        @CustomType.Parameter("httpError3xx") @Nullable Boolean httpError3xx,
        @CustomType.Parameter("httpError4xx") @Nullable Boolean httpError4xx,
        @CustomType.Parameter("httpError5xx") @Nullable Boolean httpError5xx,
        @CustomType.Parameter("httpHeaders") @Nullable List<GtmPropertyLivenessTestHttpHeader> httpHeaders,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("peerCertificateVerification") @Nullable Boolean peerCertificateVerification,
        @CustomType.Parameter("recursionRequested") @Nullable Boolean recursionRequested,
        @CustomType.Parameter("requestString") @Nullable String requestString,
        @CustomType.Parameter("resourceType") @Nullable String resourceType,
        @CustomType.Parameter("responseString") @Nullable String responseString,
        @CustomType.Parameter("sslClientCertificate") @Nullable String sslClientCertificate,
        @CustomType.Parameter("sslClientPrivateKey") @Nullable String sslClientPrivateKey,
        @CustomType.Parameter("testInterval") Integer testInterval,
        @CustomType.Parameter("testObject") String testObject,
        @CustomType.Parameter("testObjectPassword") @Nullable String testObjectPassword,
        @CustomType.Parameter("testObjectPort") @Nullable Integer testObjectPort,
        @CustomType.Parameter("testObjectProtocol") String testObjectProtocol,
        @CustomType.Parameter("testObjectUsername") @Nullable String testObjectUsername,
        @CustomType.Parameter("testTimeout") Double testTimeout,
        @CustomType.Parameter("timeoutPenalty") @Nullable Double timeoutPenalty) {
        this.answersRequired = answersRequired;
        this.disableNonstandardPortWarning = disableNonstandardPortWarning;
        this.disabled = disabled;
        this.errorPenalty = errorPenalty;
        this.httpError3xx = httpError3xx;
        this.httpError4xx = httpError4xx;
        this.httpError5xx = httpError5xx;
        this.httpHeaders = httpHeaders;
        this.name = name;
        this.peerCertificateVerification = peerCertificateVerification;
        this.recursionRequested = recursionRequested;
        this.requestString = requestString;
        this.resourceType = resourceType;
        this.responseString = responseString;
        this.sslClientCertificate = sslClientCertificate;
        this.sslClientPrivateKey = sslClientPrivateKey;
        this.testInterval = testInterval;
        this.testObject = testObject;
        this.testObjectPassword = testObjectPassword;
        this.testObjectPort = testObjectPort;
        this.testObjectProtocol = testObjectProtocol;
        this.testObjectUsername = testObjectUsername;
        this.testTimeout = testTimeout;
        this.timeoutPenalty = timeoutPenalty;
    }

    /**
     * @return If `test_object_protocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
     * 
     */
    public Optional<Boolean> answersRequired() {
        return Optional.ofNullable(this.answersRequired);
    }
    /**
     * @return A boolean that if set to `true`, disables warnings when non-standard ports are used.
     * 
     */
    public Optional<Boolean> disableNonstandardPortWarning() {
        return Optional.ofNullable(this.disableNonstandardPortWarning);
    }
    /**
     * @return A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     * 
     */
    public Optional<Double> errorPenalty() {
        return Optional.ofNullable(this.errorPenalty);
    }
    /**
     * @return A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    public Optional<Boolean> httpError3xx() {
        return Optional.ofNullable(this.httpError3xx);
    }
    /**
     * @return A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    public Optional<Boolean> httpError4xx() {
        return Optional.ofNullable(this.httpError4xx);
    }
    /**
     * @return A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    public Optional<Boolean> httpError5xx() {
        return Optional.ofNullable(this.httpError5xx);
    }
    /**
     * @return Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
     * 
     */
    public List<GtmPropertyLivenessTestHttpHeader> httpHeaders() {
        return this.httpHeaders == null ? List.of() : this.httpHeaders;
    }
    /**
     * @return Name of HTTP header.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `test_object_protocol` of https.
     * 
     */
    public Optional<Boolean> peerCertificateVerification() {
        return Optional.ofNullable(this.peerCertificateVerification);
    }
    /**
     * @return A boolean indicating whether the `test_object_protocol` is DNS. The DNS query is recursive.
     * 
     */
    public Optional<Boolean> recursionRequested() {
        return Optional.ofNullable(this.recursionRequested);
    }
    /**
     * @return Specifies a request string.
     * 
     */
    public Optional<String> requestString() {
        return Optional.ofNullable(this.requestString);
    }
    /**
     * @return Specifies the query type, if `test_object_protocol` is DNS.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return Specifies a response string.
     * 
     */
    public Optional<String> responseString() {
        return Optional.ofNullable(this.responseString);
    }
    /**
     * @return Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
     * 
     */
    public Optional<String> sslClientCertificate() {
        return Optional.ofNullable(this.sslClientCertificate);
    }
    /**
     * @return Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can&#39;t have a passphrase nor be used for any other purpose.
     * 
     */
    public Optional<String> sslClientPrivateKey() {
        return Optional.ofNullable(this.sslClientPrivateKey);
    }
    /**
     * @return Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
     * 
     */
    public Integer testInterval() {
        return this.testInterval;
    }
    /**
     * @return Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
     * 
     */
    public String testObject() {
        return this.testObject;
    }
    /**
     * @return Specifies the test object&#39;s password. It is required if testObjectProtocol is ftp.
     * 
     */
    public Optional<String> testObjectPassword() {
        return Optional.ofNullable(this.testObjectPassword);
    }
    /**
     * @return Specifies the port number for the testObject.
     * 
     */
    public Optional<Integer> testObjectPort() {
        return Optional.ofNullable(this.testObjectPort);
    }
    /**
     * @return Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
     * 
     */
    public String testObjectProtocol() {
        return this.testObjectProtocol;
    }
    /**
     * @return A descriptive name for the testObject.
     * 
     */
    public Optional<String> testObjectUsername() {
        return Optional.ofNullable(this.testObjectUsername);
    }
    /**
     * @return Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
     * 
     */
    public Double testTimeout() {
        return this.testTimeout;
    }
    /**
     * @return Specifies the score to be reported if the liveness test times out.
     * 
     */
    public Optional<Double> timeoutPenalty() {
        return Optional.ofNullable(this.timeoutPenalty);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GtmPropertyLivenessTest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean answersRequired;
        private @Nullable Boolean disableNonstandardPortWarning;
        private @Nullable Boolean disabled;
        private @Nullable Double errorPenalty;
        private @Nullable Boolean httpError3xx;
        private @Nullable Boolean httpError4xx;
        private @Nullable Boolean httpError5xx;
        private @Nullable List<GtmPropertyLivenessTestHttpHeader> httpHeaders;
        private String name;
        private @Nullable Boolean peerCertificateVerification;
        private @Nullable Boolean recursionRequested;
        private @Nullable String requestString;
        private @Nullable String resourceType;
        private @Nullable String responseString;
        private @Nullable String sslClientCertificate;
        private @Nullable String sslClientPrivateKey;
        private Integer testInterval;
        private String testObject;
        private @Nullable String testObjectPassword;
        private @Nullable Integer testObjectPort;
        private String testObjectProtocol;
        private @Nullable String testObjectUsername;
        private Double testTimeout;
        private @Nullable Double timeoutPenalty;

        public Builder() {
    	      // Empty
        }

        public Builder(GtmPropertyLivenessTest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.answersRequired = defaults.answersRequired;
    	      this.disableNonstandardPortWarning = defaults.disableNonstandardPortWarning;
    	      this.disabled = defaults.disabled;
    	      this.errorPenalty = defaults.errorPenalty;
    	      this.httpError3xx = defaults.httpError3xx;
    	      this.httpError4xx = defaults.httpError4xx;
    	      this.httpError5xx = defaults.httpError5xx;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.name = defaults.name;
    	      this.peerCertificateVerification = defaults.peerCertificateVerification;
    	      this.recursionRequested = defaults.recursionRequested;
    	      this.requestString = defaults.requestString;
    	      this.resourceType = defaults.resourceType;
    	      this.responseString = defaults.responseString;
    	      this.sslClientCertificate = defaults.sslClientCertificate;
    	      this.sslClientPrivateKey = defaults.sslClientPrivateKey;
    	      this.testInterval = defaults.testInterval;
    	      this.testObject = defaults.testObject;
    	      this.testObjectPassword = defaults.testObjectPassword;
    	      this.testObjectPort = defaults.testObjectPort;
    	      this.testObjectProtocol = defaults.testObjectProtocol;
    	      this.testObjectUsername = defaults.testObjectUsername;
    	      this.testTimeout = defaults.testTimeout;
    	      this.timeoutPenalty = defaults.timeoutPenalty;
        }

        public Builder answersRequired(@Nullable Boolean answersRequired) {
            this.answersRequired = answersRequired;
            return this;
        }
        public Builder disableNonstandardPortWarning(@Nullable Boolean disableNonstandardPortWarning) {
            this.disableNonstandardPortWarning = disableNonstandardPortWarning;
            return this;
        }
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        public Builder errorPenalty(@Nullable Double errorPenalty) {
            this.errorPenalty = errorPenalty;
            return this;
        }
        public Builder httpError3xx(@Nullable Boolean httpError3xx) {
            this.httpError3xx = httpError3xx;
            return this;
        }
        public Builder httpError4xx(@Nullable Boolean httpError4xx) {
            this.httpError4xx = httpError4xx;
            return this;
        }
        public Builder httpError5xx(@Nullable Boolean httpError5xx) {
            this.httpError5xx = httpError5xx;
            return this;
        }
        public Builder httpHeaders(@Nullable List<GtmPropertyLivenessTestHttpHeader> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }
        public Builder httpHeaders(GtmPropertyLivenessTestHttpHeader... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder peerCertificateVerification(@Nullable Boolean peerCertificateVerification) {
            this.peerCertificateVerification = peerCertificateVerification;
            return this;
        }
        public Builder recursionRequested(@Nullable Boolean recursionRequested) {
            this.recursionRequested = recursionRequested;
            return this;
        }
        public Builder requestString(@Nullable String requestString) {
            this.requestString = requestString;
            return this;
        }
        public Builder resourceType(@Nullable String resourceType) {
            this.resourceType = resourceType;
            return this;
        }
        public Builder responseString(@Nullable String responseString) {
            this.responseString = responseString;
            return this;
        }
        public Builder sslClientCertificate(@Nullable String sslClientCertificate) {
            this.sslClientCertificate = sslClientCertificate;
            return this;
        }
        public Builder sslClientPrivateKey(@Nullable String sslClientPrivateKey) {
            this.sslClientPrivateKey = sslClientPrivateKey;
            return this;
        }
        public Builder testInterval(Integer testInterval) {
            this.testInterval = Objects.requireNonNull(testInterval);
            return this;
        }
        public Builder testObject(String testObject) {
            this.testObject = Objects.requireNonNull(testObject);
            return this;
        }
        public Builder testObjectPassword(@Nullable String testObjectPassword) {
            this.testObjectPassword = testObjectPassword;
            return this;
        }
        public Builder testObjectPort(@Nullable Integer testObjectPort) {
            this.testObjectPort = testObjectPort;
            return this;
        }
        public Builder testObjectProtocol(String testObjectProtocol) {
            this.testObjectProtocol = Objects.requireNonNull(testObjectProtocol);
            return this;
        }
        public Builder testObjectUsername(@Nullable String testObjectUsername) {
            this.testObjectUsername = testObjectUsername;
            return this;
        }
        public Builder testTimeout(Double testTimeout) {
            this.testTimeout = Objects.requireNonNull(testTimeout);
            return this;
        }
        public Builder timeoutPenalty(@Nullable Double timeoutPenalty) {
            this.timeoutPenalty = timeoutPenalty;
            return this;
        }        public GtmPropertyLivenessTest build() {
            return new GtmPropertyLivenessTest(answersRequired, disableNonstandardPortWarning, disabled, errorPenalty, httpError3xx, httpError4xx, httpError5xx, httpHeaders, name, peerCertificateVerification, recursionRequested, requestString, resourceType, responseString, sslClientCertificate, sslClientPrivateKey, testInterval, testObject, testObjectPassword, testObjectPort, testObjectProtocol, testObjectUsername, testTimeout, timeoutPenalty);
        }
    }
}
