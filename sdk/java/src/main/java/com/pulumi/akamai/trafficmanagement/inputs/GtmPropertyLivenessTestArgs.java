// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.trafficmanagement.inputs;

import com.pulumi.akamai.trafficmanagement.inputs.GtmPropertyLivenessTestHttpHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmPropertyLivenessTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GtmPropertyLivenessTestArgs Empty = new GtmPropertyLivenessTestArgs();

    /**
     * If `test_object_protocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
     * 
     */
    @Import(name="answersRequired")
    private @Nullable Output<Boolean> answersRequired;

    /**
     * @return If `test_object_protocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
     * 
     */
    public Optional<Output<Boolean>> answersRequired() {
        return Optional.ofNullable(this.answersRequired);
    }

    /**
     * A boolean that if set to `true`, disables warnings when non-standard ports are used.
     * 
     */
    @Import(name="disableNonstandardPortWarning")
    private @Nullable Output<Boolean> disableNonstandardPortWarning;

    /**
     * @return A boolean that if set to `true`, disables warnings when non-standard ports are used.
     * 
     */
    public Optional<Output<Boolean>> disableNonstandardPortWarning() {
        return Optional.ofNullable(this.disableNonstandardPortWarning);
    }

    /**
     * A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     * 
     */
    @Import(name="errorPenalty")
    private @Nullable Output<Double> errorPenalty;

    /**
     * @return Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     * 
     */
    public Optional<Output<Double>> errorPenalty() {
        return Optional.ofNullable(this.errorPenalty);
    }

    /**
     * A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    @Import(name="httpError3xx")
    private @Nullable Output<Boolean> httpError3xx;

    /**
     * @return A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    public Optional<Output<Boolean>> httpError3xx() {
        return Optional.ofNullable(this.httpError3xx);
    }

    /**
     * A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    @Import(name="httpError4xx")
    private @Nullable Output<Boolean> httpError4xx;

    /**
     * @return A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    public Optional<Output<Boolean>> httpError4xx() {
        return Optional.ofNullable(this.httpError4xx);
    }

    /**
     * A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    @Import(name="httpError5xx")
    private @Nullable Output<Boolean> httpError5xx;

    /**
     * @return A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
     * 
     */
    public Optional<Output<Boolean>> httpError5xx() {
        return Optional.ofNullable(this.httpError5xx);
    }

    /**
     * Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
     * 
     */
    @Import(name="httpHeaders")
    private @Nullable Output<List<GtmPropertyLivenessTestHttpHeaderArgs>> httpHeaders;

    /**
     * @return Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
     * 
     */
    public Optional<Output<List<GtmPropertyLivenessTestHttpHeaderArgs>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    /**
     * Name of HTTP header.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of HTTP header.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `test_object_protocol` of https.
     * 
     */
    @Import(name="peerCertificateVerification")
    private @Nullable Output<Boolean> peerCertificateVerification;

    /**
     * @return A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `test_object_protocol` of https.
     * 
     */
    public Optional<Output<Boolean>> peerCertificateVerification() {
        return Optional.ofNullable(this.peerCertificateVerification);
    }

    /**
     * A boolean indicating whether the `test_object_protocol` is DNS. The DNS query is recursive.
     * 
     */
    @Import(name="recursionRequested")
    private @Nullable Output<Boolean> recursionRequested;

    /**
     * @return A boolean indicating whether the `test_object_protocol` is DNS. The DNS query is recursive.
     * 
     */
    public Optional<Output<Boolean>> recursionRequested() {
        return Optional.ofNullable(this.recursionRequested);
    }

    /**
     * Specifies a request string.
     * 
     */
    @Import(name="requestString")
    private @Nullable Output<String> requestString;

    /**
     * @return Specifies a request string.
     * 
     */
    public Optional<Output<String>> requestString() {
        return Optional.ofNullable(this.requestString);
    }

    /**
     * Specifies the query type, if `test_object_protocol` is DNS.
     * 
     */
    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    /**
     * @return Specifies the query type, if `test_object_protocol` is DNS.
     * 
     */
    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    /**
     * Specifies a response string.
     * 
     */
    @Import(name="responseString")
    private @Nullable Output<String> responseString;

    /**
     * @return Specifies a response string.
     * 
     */
    public Optional<Output<String>> responseString() {
        return Optional.ofNullable(this.responseString);
    }

    /**
     * Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
     * 
     */
    @Import(name="sslClientCertificate")
    private @Nullable Output<String> sslClientCertificate;

    /**
     * @return Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
     * 
     */
    public Optional<Output<String>> sslClientCertificate() {
        return Optional.ofNullable(this.sslClientCertificate);
    }

    /**
     * Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can&#39;t have a passphrase nor be used for any other purpose.
     * 
     */
    @Import(name="sslClientPrivateKey")
    private @Nullable Output<String> sslClientPrivateKey;

    /**
     * @return Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can&#39;t have a passphrase nor be used for any other purpose.
     * 
     */
    public Optional<Output<String>> sslClientPrivateKey() {
        return Optional.ofNullable(this.sslClientPrivateKey);
    }

    /**
     * Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
     * 
     */
    @Import(name="testInterval", required=true)
    private Output<Integer> testInterval;

    /**
     * @return Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
     * 
     */
    public Output<Integer> testInterval() {
        return this.testInterval;
    }

    /**
     * Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
     * 
     */
    @Import(name="testObject", required=true)
    private Output<String> testObject;

    /**
     * @return Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
     * 
     */
    public Output<String> testObject() {
        return this.testObject;
    }

    /**
     * Specifies the test object&#39;s password. It is required if testObjectProtocol is ftp.
     * 
     */
    @Import(name="testObjectPassword")
    private @Nullable Output<String> testObjectPassword;

    /**
     * @return Specifies the test object&#39;s password. It is required if testObjectProtocol is ftp.
     * 
     */
    public Optional<Output<String>> testObjectPassword() {
        return Optional.ofNullable(this.testObjectPassword);
    }

    /**
     * Specifies the port number for the testObject.
     * 
     */
    @Import(name="testObjectPort")
    private @Nullable Output<Integer> testObjectPort;

    /**
     * @return Specifies the port number for the testObject.
     * 
     */
    public Optional<Output<Integer>> testObjectPort() {
        return Optional.ofNullable(this.testObjectPort);
    }

    /**
     * Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
     * 
     */
    @Import(name="testObjectProtocol", required=true)
    private Output<String> testObjectProtocol;

    /**
     * @return Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
     * 
     */
    public Output<String> testObjectProtocol() {
        return this.testObjectProtocol;
    }

    /**
     * A descriptive name for the testObject.
     * 
     */
    @Import(name="testObjectUsername")
    private @Nullable Output<String> testObjectUsername;

    /**
     * @return A descriptive name for the testObject.
     * 
     */
    public Optional<Output<String>> testObjectUsername() {
        return Optional.ofNullable(this.testObjectUsername);
    }

    /**
     * Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
     * 
     */
    @Import(name="testTimeout", required=true)
    private Output<Double> testTimeout;

    /**
     * @return Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
     * 
     */
    public Output<Double> testTimeout() {
        return this.testTimeout;
    }

    /**
     * Specifies the score to be reported if the liveness test times out.
     * 
     */
    @Import(name="timeoutPenalty")
    private @Nullable Output<Double> timeoutPenalty;

    /**
     * @return Specifies the score to be reported if the liveness test times out.
     * 
     */
    public Optional<Output<Double>> timeoutPenalty() {
        return Optional.ofNullable(this.timeoutPenalty);
    }

    private GtmPropertyLivenessTestArgs() {}

    private GtmPropertyLivenessTestArgs(GtmPropertyLivenessTestArgs $) {
        this.answersRequired = $.answersRequired;
        this.disableNonstandardPortWarning = $.disableNonstandardPortWarning;
        this.disabled = $.disabled;
        this.errorPenalty = $.errorPenalty;
        this.httpError3xx = $.httpError3xx;
        this.httpError4xx = $.httpError4xx;
        this.httpError5xx = $.httpError5xx;
        this.httpHeaders = $.httpHeaders;
        this.name = $.name;
        this.peerCertificateVerification = $.peerCertificateVerification;
        this.recursionRequested = $.recursionRequested;
        this.requestString = $.requestString;
        this.resourceType = $.resourceType;
        this.responseString = $.responseString;
        this.sslClientCertificate = $.sslClientCertificate;
        this.sslClientPrivateKey = $.sslClientPrivateKey;
        this.testInterval = $.testInterval;
        this.testObject = $.testObject;
        this.testObjectPassword = $.testObjectPassword;
        this.testObjectPort = $.testObjectPort;
        this.testObjectProtocol = $.testObjectProtocol;
        this.testObjectUsername = $.testObjectUsername;
        this.testTimeout = $.testTimeout;
        this.timeoutPenalty = $.timeoutPenalty;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmPropertyLivenessTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmPropertyLivenessTestArgs $;

        public Builder() {
            $ = new GtmPropertyLivenessTestArgs();
        }

        public Builder(GtmPropertyLivenessTestArgs defaults) {
            $ = new GtmPropertyLivenessTestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param answersRequired If `test_object_protocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
         * 
         * @return builder
         * 
         */
        public Builder answersRequired(@Nullable Output<Boolean> answersRequired) {
            $.answersRequired = answersRequired;
            return this;
        }

        /**
         * @param answersRequired If `test_object_protocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
         * 
         * @return builder
         * 
         */
        public Builder answersRequired(Boolean answersRequired) {
            return answersRequired(Output.of(answersRequired));
        }

        /**
         * @param disableNonstandardPortWarning A boolean that if set to `true`, disables warnings when non-standard ports are used.
         * 
         * @return builder
         * 
         */
        public Builder disableNonstandardPortWarning(@Nullable Output<Boolean> disableNonstandardPortWarning) {
            $.disableNonstandardPortWarning = disableNonstandardPortWarning;
            return this;
        }

        /**
         * @param disableNonstandardPortWarning A boolean that if set to `true`, disables warnings when non-standard ports are used.
         * 
         * @return builder
         * 
         */
        public Builder disableNonstandardPortWarning(Boolean disableNonstandardPortWarning) {
            return disableNonstandardPortWarning(Output.of(disableNonstandardPortWarning));
        }

        /**
         * @param disabled A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param errorPenalty Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
         * 
         * @return builder
         * 
         */
        public Builder errorPenalty(@Nullable Output<Double> errorPenalty) {
            $.errorPenalty = errorPenalty;
            return this;
        }

        /**
         * @param errorPenalty Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
         * 
         * @return builder
         * 
         */
        public Builder errorPenalty(Double errorPenalty) {
            return errorPenalty(Output.of(errorPenalty));
        }

        /**
         * @param httpError3xx A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder httpError3xx(@Nullable Output<Boolean> httpError3xx) {
            $.httpError3xx = httpError3xx;
            return this;
        }

        /**
         * @param httpError3xx A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder httpError3xx(Boolean httpError3xx) {
            return httpError3xx(Output.of(httpError3xx));
        }

        /**
         * @param httpError4xx A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder httpError4xx(@Nullable Output<Boolean> httpError4xx) {
            $.httpError4xx = httpError4xx;
            return this;
        }

        /**
         * @param httpError4xx A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder httpError4xx(Boolean httpError4xx) {
            return httpError4xx(Output.of(httpError4xx));
        }

        /**
         * @param httpError5xx A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder httpError5xx(@Nullable Output<Boolean> httpError5xx) {
            $.httpError5xx = httpError5xx;
            return this;
        }

        /**
         * @param httpError5xx A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `test_object_protocol` is `http`, `https`, or `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder httpError5xx(Boolean httpError5xx) {
            return httpError5xx(Output.of(httpError5xx));
        }

        /**
         * @param httpHeaders Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(@Nullable Output<List<GtmPropertyLivenessTestHttpHeaderArgs>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(List<GtmPropertyLivenessTestHttpHeaderArgs> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        /**
         * @param httpHeaders Contains HTTP headers to send if the `test_object_protocol` is `http` or `https`. You can have multiple `http_header` entries. Requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(GtmPropertyLivenessTestHttpHeaderArgs... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }

        /**
         * @param name Name of HTTP header.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of HTTP header.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerCertificateVerification A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `test_object_protocol` of https.
         * 
         * @return builder
         * 
         */
        public Builder peerCertificateVerification(@Nullable Output<Boolean> peerCertificateVerification) {
            $.peerCertificateVerification = peerCertificateVerification;
            return this;
        }

        /**
         * @param peerCertificateVerification A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `test_object_protocol` of https.
         * 
         * @return builder
         * 
         */
        public Builder peerCertificateVerification(Boolean peerCertificateVerification) {
            return peerCertificateVerification(Output.of(peerCertificateVerification));
        }

        /**
         * @param recursionRequested A boolean indicating whether the `test_object_protocol` is DNS. The DNS query is recursive.
         * 
         * @return builder
         * 
         */
        public Builder recursionRequested(@Nullable Output<Boolean> recursionRequested) {
            $.recursionRequested = recursionRequested;
            return this;
        }

        /**
         * @param recursionRequested A boolean indicating whether the `test_object_protocol` is DNS. The DNS query is recursive.
         * 
         * @return builder
         * 
         */
        public Builder recursionRequested(Boolean recursionRequested) {
            return recursionRequested(Output.of(recursionRequested));
        }

        /**
         * @param requestString Specifies a request string.
         * 
         * @return builder
         * 
         */
        public Builder requestString(@Nullable Output<String> requestString) {
            $.requestString = requestString;
            return this;
        }

        /**
         * @param requestString Specifies a request string.
         * 
         * @return builder
         * 
         */
        public Builder requestString(String requestString) {
            return requestString(Output.of(requestString));
        }

        /**
         * @param resourceType Specifies the query type, if `test_object_protocol` is DNS.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Specifies the query type, if `test_object_protocol` is DNS.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param responseString Specifies a response string.
         * 
         * @return builder
         * 
         */
        public Builder responseString(@Nullable Output<String> responseString) {
            $.responseString = responseString;
            return this;
        }

        /**
         * @param responseString Specifies a response string.
         * 
         * @return builder
         * 
         */
        public Builder responseString(String responseString) {
            return responseString(Output.of(responseString));
        }

        /**
         * @param sslClientCertificate Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
         * 
         * @return builder
         * 
         */
        public Builder sslClientCertificate(@Nullable Output<String> sslClientCertificate) {
            $.sslClientCertificate = sslClientCertificate;
            return this;
        }

        /**
         * @param sslClientCertificate Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
         * 
         * @return builder
         * 
         */
        public Builder sslClientCertificate(String sslClientCertificate) {
            return sslClientCertificate(Output.of(sslClientCertificate));
        }

        /**
         * @param sslClientPrivateKey Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can&#39;t have a passphrase nor be used for any other purpose.
         * 
         * @return builder
         * 
         */
        public Builder sslClientPrivateKey(@Nullable Output<String> sslClientPrivateKey) {
            $.sslClientPrivateKey = sslClientPrivateKey;
            return this;
        }

        /**
         * @param sslClientPrivateKey Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can&#39;t have a passphrase nor be used for any other purpose.
         * 
         * @return builder
         * 
         */
        public Builder sslClientPrivateKey(String sslClientPrivateKey) {
            return sslClientPrivateKey(Output.of(sslClientPrivateKey));
        }

        /**
         * @param testInterval Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
         * 
         * @return builder
         * 
         */
        public Builder testInterval(Output<Integer> testInterval) {
            $.testInterval = testInterval;
            return this;
        }

        /**
         * @param testInterval Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
         * 
         * @return builder
         * 
         */
        public Builder testInterval(Integer testInterval) {
            return testInterval(Output.of(testInterval));
        }

        /**
         * @param testObject Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
         * 
         * @return builder
         * 
         */
        public Builder testObject(Output<String> testObject) {
            $.testObject = testObject;
            return this;
        }

        /**
         * @param testObject Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
         * 
         * @return builder
         * 
         */
        public Builder testObject(String testObject) {
            return testObject(Output.of(testObject));
        }

        /**
         * @param testObjectPassword Specifies the test object&#39;s password. It is required if testObjectProtocol is ftp.
         * 
         * @return builder
         * 
         */
        public Builder testObjectPassword(@Nullable Output<String> testObjectPassword) {
            $.testObjectPassword = testObjectPassword;
            return this;
        }

        /**
         * @param testObjectPassword Specifies the test object&#39;s password. It is required if testObjectProtocol is ftp.
         * 
         * @return builder
         * 
         */
        public Builder testObjectPassword(String testObjectPassword) {
            return testObjectPassword(Output.of(testObjectPassword));
        }

        /**
         * @param testObjectPort Specifies the port number for the testObject.
         * 
         * @return builder
         * 
         */
        public Builder testObjectPort(@Nullable Output<Integer> testObjectPort) {
            $.testObjectPort = testObjectPort;
            return this;
        }

        /**
         * @param testObjectPort Specifies the port number for the testObject.
         * 
         * @return builder
         * 
         */
        public Builder testObjectPort(Integer testObjectPort) {
            return testObjectPort(Output.of(testObjectPort));
        }

        /**
         * @param testObjectProtocol Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
         * 
         * @return builder
         * 
         */
        public Builder testObjectProtocol(Output<String> testObjectProtocol) {
            $.testObjectProtocol = testObjectProtocol;
            return this;
        }

        /**
         * @param testObjectProtocol Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
         * 
         * @return builder
         * 
         */
        public Builder testObjectProtocol(String testObjectProtocol) {
            return testObjectProtocol(Output.of(testObjectProtocol));
        }

        /**
         * @param testObjectUsername A descriptive name for the testObject.
         * 
         * @return builder
         * 
         */
        public Builder testObjectUsername(@Nullable Output<String> testObjectUsername) {
            $.testObjectUsername = testObjectUsername;
            return this;
        }

        /**
         * @param testObjectUsername A descriptive name for the testObject.
         * 
         * @return builder
         * 
         */
        public Builder testObjectUsername(String testObjectUsername) {
            return testObjectUsername(Output.of(testObjectUsername));
        }

        /**
         * @param testTimeout Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
         * 
         * @return builder
         * 
         */
        public Builder testTimeout(Output<Double> testTimeout) {
            $.testTimeout = testTimeout;
            return this;
        }

        /**
         * @param testTimeout Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
         * 
         * @return builder
         * 
         */
        public Builder testTimeout(Double testTimeout) {
            return testTimeout(Output.of(testTimeout));
        }

        /**
         * @param timeoutPenalty Specifies the score to be reported if the liveness test times out.
         * 
         * @return builder
         * 
         */
        public Builder timeoutPenalty(@Nullable Output<Double> timeoutPenalty) {
            $.timeoutPenalty = timeoutPenalty;
            return this;
        }

        /**
         * @param timeoutPenalty Specifies the score to be reported if the liveness test times out.
         * 
         * @return builder
         * 
         */
        public Builder timeoutPenalty(Double timeoutPenalty) {
            return timeoutPenalty(Output.of(timeoutPenalty));
        }

        public GtmPropertyLivenessTestArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.testInterval = Objects.requireNonNull($.testInterval, "expected parameter 'testInterval' to be non-null");
            $.testObject = Objects.requireNonNull($.testObject, "expected parameter 'testObject' to be non-null");
            $.testObjectProtocol = Objects.requireNonNull($.testObjectProtocol, "expected parameter 'testObjectProtocol' to be non-null");
            $.testTimeout = Objects.requireNonNull($.testTimeout, "expected parameter 'testTimeout' to be non-null");
            return $;
        }
    }

}
