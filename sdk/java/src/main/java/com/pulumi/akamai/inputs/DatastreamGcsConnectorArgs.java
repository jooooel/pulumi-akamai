// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatastreamGcsConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatastreamGcsConnectorArgs Empty = new DatastreamGcsConnectorArgs();

    /**
     * The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    @Import(name="compressLogs")
    private @Nullable Output<Boolean> compressLogs;

    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }

    @Import(name="connectorId")
    private @Nullable Output<Integer> connectorId;

    public Optional<Output<Integer>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * The name of the connector.
     * 
     */
    @Import(name="connectorName", required=true)
    private Output<String> connectorName;

    /**
     * @return The name of the connector.
     * 
     */
    public Output<String> connectorName() {
        return this.connectorName;
    }

    /**
     * The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * - (Required) **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return - (Required) **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * - (Required) The unique ID of your Google Cloud project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return - (Required) The unique ID of your Google Cloud project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * - (Required)	The name of the service account with the storage.object.create permission or Storage Object Creator role.
     * 
     */
    @Import(name="serviceAccountName", required=true)
    private Output<String> serviceAccountName;

    /**
     * @return - (Required)	The name of the service account with the storage.object.create permission or Storage Object Creator role.
     * 
     */
    public Output<String> serviceAccountName() {
        return this.serviceAccountName;
    }

    private DatastreamGcsConnectorArgs() {}

    private DatastreamGcsConnectorArgs(DatastreamGcsConnectorArgs $) {
        this.bucket = $.bucket;
        this.compressLogs = $.compressLogs;
        this.connectorId = $.connectorId;
        this.connectorName = $.connectorName;
        this.path = $.path;
        this.privateKey = $.privateKey;
        this.projectId = $.projectId;
        this.serviceAccountName = $.serviceAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastreamGcsConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastreamGcsConnectorArgs $;

        public Builder() {
            $ = new DatastreamGcsConnectorArgs();
        }

        public Builder(DatastreamGcsConnectorArgs defaults) {
            $ = new DatastreamGcsConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param compressLogs Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder compressLogs(@Nullable Output<Boolean> compressLogs) {
            $.compressLogs = compressLogs;
            return this;
        }

        /**
         * @param compressLogs Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder compressLogs(Boolean compressLogs) {
            return compressLogs(Output.of(compressLogs));
        }

        public Builder connectorId(@Nullable Output<Integer> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        public Builder connectorId(Integer connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param connectorName The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(Output<String> connectorName) {
            $.connectorName = connectorName;
            return this;
        }

        /**
         * @param connectorName The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(String connectorName) {
            return connectorName(Output.of(connectorName));
        }

        /**
         * @param path The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param privateKey - (Required) **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey - (Required) **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param projectId - (Required) The unique ID of your Google Cloud project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId - (Required) The unique ID of your Google Cloud project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param serviceAccountName - (Required)	The name of the service account with the storage.object.create permission or Storage Object Creator role.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(Output<String> serviceAccountName) {
            $.serviceAccountName = serviceAccountName;
            return this;
        }

        /**
         * @param serviceAccountName - (Required)	The name of the service account with the storage.object.create permission or Storage Object Creator role.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountName(String serviceAccountName) {
            return serviceAccountName(Output.of(serviceAccountName));
        }

        public DatastreamGcsConnectorArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.connectorName = Objects.requireNonNull($.connectorName, "expected parameter 'connectorName' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.serviceAccountName = Objects.requireNonNull($.serviceAccountName, "expected parameter 'serviceAccountName' to be non-null");
            return $;
        }
    }

}
