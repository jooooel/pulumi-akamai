// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CloudletsApplicationLoadBalancerDataCenter {
    /**
     * @return The city in which the data center is located.
     * 
     */
    private final @Nullable String city;
    /**
     * @return Whether to override the cloud server host header.
     * 
     */
    private final @Nullable Boolean cloudServerHostHeaderOverride;
    /**
     * @return Whether this datacenter is a cloud service.
     * 
     */
    private final @Nullable Boolean cloudService;
    /**
     * @return The code of the continent on which the data center is located. See [Continent Codes](https://control.akamai.com/dl/edgescape/continentCodes.csv) for a list of valid codes.
     * 
     */
    private final String continent;
    /**
     * @return The country in which the data center is located. See [Country Codes](https://control.akamai.com/dl/edgescape/cc2continent.csv) for a list of valid codes.
     * 
     */
    private final String country;
    /**
     * @return The name of the host that can be used as a Conditional Origin. This should match the `hostname` value defined for this datacenter in Property Manager.
     * 
     */
    private final @Nullable String hostname;
    /**
     * @return The latitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    private final Double latitude;
    /**
     * @return A list of the origin servers used to poll the data centers in an Application Load Balancer configuration. These servers support basic HTTP polling.
     * 
     */
    private final @Nullable List<String> livenessHosts;
    /**
     * @return The longitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    private final Double longitude;
    /**
     * @return The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     * 
     */
    private final String originId;
    /**
     * @return The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
     * 
     */
    private final Double percent;
    /**
     * @return The state, province, or region where the data center is located.
     * 
     */
    private final @Nullable String stateOrProvince;

    @CustomType.Constructor
    private CloudletsApplicationLoadBalancerDataCenter(
        @CustomType.Parameter("city") @Nullable String city,
        @CustomType.Parameter("cloudServerHostHeaderOverride") @Nullable Boolean cloudServerHostHeaderOverride,
        @CustomType.Parameter("cloudService") @Nullable Boolean cloudService,
        @CustomType.Parameter("continent") String continent,
        @CustomType.Parameter("country") String country,
        @CustomType.Parameter("hostname") @Nullable String hostname,
        @CustomType.Parameter("latitude") Double latitude,
        @CustomType.Parameter("livenessHosts") @Nullable List<String> livenessHosts,
        @CustomType.Parameter("longitude") Double longitude,
        @CustomType.Parameter("originId") String originId,
        @CustomType.Parameter("percent") Double percent,
        @CustomType.Parameter("stateOrProvince") @Nullable String stateOrProvince) {
        this.city = city;
        this.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
        this.cloudService = cloudService;
        this.continent = continent;
        this.country = country;
        this.hostname = hostname;
        this.latitude = latitude;
        this.livenessHosts = livenessHosts;
        this.longitude = longitude;
        this.originId = originId;
        this.percent = percent;
        this.stateOrProvince = stateOrProvince;
    }

    /**
     * @return The city in which the data center is located.
     * 
     */
    public Optional<String> city() {
        return Optional.ofNullable(this.city);
    }
    /**
     * @return Whether to override the cloud server host header.
     * 
     */
    public Optional<Boolean> cloudServerHostHeaderOverride() {
        return Optional.ofNullable(this.cloudServerHostHeaderOverride);
    }
    /**
     * @return Whether this datacenter is a cloud service.
     * 
     */
    public Optional<Boolean> cloudService() {
        return Optional.ofNullable(this.cloudService);
    }
    /**
     * @return The code of the continent on which the data center is located. See [Continent Codes](https://control.akamai.com/dl/edgescape/continentCodes.csv) for a list of valid codes.
     * 
     */
    public String continent() {
        return this.continent;
    }
    /**
     * @return The country in which the data center is located. See [Country Codes](https://control.akamai.com/dl/edgescape/cc2continent.csv) for a list of valid codes.
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return The name of the host that can be used as a Conditional Origin. This should match the `hostname` value defined for this datacenter in Property Manager.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return The latitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    public Double latitude() {
        return this.latitude;
    }
    /**
     * @return A list of the origin servers used to poll the data centers in an Application Load Balancer configuration. These servers support basic HTTP polling.
     * 
     */
    public List<String> livenessHosts() {
        return this.livenessHosts == null ? List.of() : this.livenessHosts;
    }
    /**
     * @return The longitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    public Double longitude() {
        return this.longitude;
    }
    /**
     * @return The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     * 
     */
    public String originId() {
        return this.originId;
    }
    /**
     * @return The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
     * 
     */
    public Double percent() {
        return this.percent;
    }
    /**
     * @return The state, province, or region where the data center is located.
     * 
     */
    public Optional<String> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudletsApplicationLoadBalancerDataCenter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String city;
        private @Nullable Boolean cloudServerHostHeaderOverride;
        private @Nullable Boolean cloudService;
        private String continent;
        private String country;
        private @Nullable String hostname;
        private Double latitude;
        private @Nullable List<String> livenessHosts;
        private Double longitude;
        private String originId;
        private Double percent;
        private @Nullable String stateOrProvince;

        public Builder() {
    	      // Empty
        }

        public Builder(CloudletsApplicationLoadBalancerDataCenter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.city = defaults.city;
    	      this.cloudServerHostHeaderOverride = defaults.cloudServerHostHeaderOverride;
    	      this.cloudService = defaults.cloudService;
    	      this.continent = defaults.continent;
    	      this.country = defaults.country;
    	      this.hostname = defaults.hostname;
    	      this.latitude = defaults.latitude;
    	      this.livenessHosts = defaults.livenessHosts;
    	      this.longitude = defaults.longitude;
    	      this.originId = defaults.originId;
    	      this.percent = defaults.percent;
    	      this.stateOrProvince = defaults.stateOrProvince;
        }

        public Builder city(@Nullable String city) {
            this.city = city;
            return this;
        }
        public Builder cloudServerHostHeaderOverride(@Nullable Boolean cloudServerHostHeaderOverride) {
            this.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }
        public Builder cloudService(@Nullable Boolean cloudService) {
            this.cloudService = cloudService;
            return this;
        }
        public Builder continent(String continent) {
            this.continent = Objects.requireNonNull(continent);
            return this;
        }
        public Builder country(String country) {
            this.country = Objects.requireNonNull(country);
            return this;
        }
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        public Builder latitude(Double latitude) {
            this.latitude = Objects.requireNonNull(latitude);
            return this;
        }
        public Builder livenessHosts(@Nullable List<String> livenessHosts) {
            this.livenessHosts = livenessHosts;
            return this;
        }
        public Builder livenessHosts(String... livenessHosts) {
            return livenessHosts(List.of(livenessHosts));
        }
        public Builder longitude(Double longitude) {
            this.longitude = Objects.requireNonNull(longitude);
            return this;
        }
        public Builder originId(String originId) {
            this.originId = Objects.requireNonNull(originId);
            return this;
        }
        public Builder percent(Double percent) {
            this.percent = Objects.requireNonNull(percent);
            return this;
        }
        public Builder stateOrProvince(@Nullable String stateOrProvince) {
            this.stateOrProvince = stateOrProvince;
            return this;
        }        public CloudletsApplicationLoadBalancerDataCenter build() {
            return new CloudletsApplicationLoadBalancerDataCenter(city, cloudServerHostHeaderOverride, cloudService, continent, country, hostname, latitude, livenessHosts, longitude, originId, percent, stateOrProvince);
        }
    }
}
