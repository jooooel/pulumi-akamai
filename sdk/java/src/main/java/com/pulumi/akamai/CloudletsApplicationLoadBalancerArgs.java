// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CloudletsApplicationLoadBalancerDataCenterArgs;
import com.pulumi.akamai.inputs.CloudletsApplicationLoadBalancerLivenessSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudletsApplicationLoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudletsApplicationLoadBalancerArgs Empty = new CloudletsApplicationLoadBalancerArgs();

    /**
     * The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
     * 
     */
    @Import(name="balancingType")
    private @Nullable Output<String> balancingType;

    /**
     * @return The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
     * 
     */
    public Optional<Output<String>> balancingType() {
        return Optional.ofNullable(this.balancingType);
    }

    /**
     * Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
     * 
     */
    @Import(name="dataCenters", required=true)
    private Output<List<CloudletsApplicationLoadBalancerDataCenterArgs>> dataCenters;

    /**
     * @return Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
     * 
     */
    public Output<List<CloudletsApplicationLoadBalancerDataCenterArgs>> dataCenters() {
        return this.dataCenters;
    }

    /**
     * The description of the load balancing configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the load balancing configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the health of each load balanced data center defined in the data center list.
     * 
     */
    @Import(name="livenessSettings")
    private @Nullable Output<CloudletsApplicationLoadBalancerLivenessSettingsArgs> livenessSettings;

    /**
     * @return Specifies the health of each load balanced data center defined in the data center list.
     * 
     */
    public Optional<Output<CloudletsApplicationLoadBalancerLivenessSettingsArgs>> livenessSettings() {
        return Optional.ofNullable(this.livenessSettings);
    }

    /**
     * The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     * 
     */
    @Import(name="originId", required=true)
    private Output<String> originId;

    /**
     * @return The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     * 
     */
    public Output<String> originId() {
        return this.originId;
    }

    private CloudletsApplicationLoadBalancerArgs() {}

    private CloudletsApplicationLoadBalancerArgs(CloudletsApplicationLoadBalancerArgs $) {
        this.balancingType = $.balancingType;
        this.dataCenters = $.dataCenters;
        this.description = $.description;
        this.livenessSettings = $.livenessSettings;
        this.originId = $.originId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudletsApplicationLoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudletsApplicationLoadBalancerArgs $;

        public Builder() {
            $ = new CloudletsApplicationLoadBalancerArgs();
        }

        public Builder(CloudletsApplicationLoadBalancerArgs defaults) {
            $ = new CloudletsApplicationLoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param balancingType The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
         * 
         * @return builder
         * 
         */
        public Builder balancingType(@Nullable Output<String> balancingType) {
            $.balancingType = balancingType;
            return this;
        }

        /**
         * @param balancingType The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
         * 
         * @return builder
         * 
         */
        public Builder balancingType(String balancingType) {
            return balancingType(Output.of(balancingType));
        }

        /**
         * @param dataCenters Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataCenters(Output<List<CloudletsApplicationLoadBalancerDataCenterArgs>> dataCenters) {
            $.dataCenters = dataCenters;
            return this;
        }

        /**
         * @param dataCenters Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataCenters(List<CloudletsApplicationLoadBalancerDataCenterArgs> dataCenters) {
            return dataCenters(Output.of(dataCenters));
        }

        /**
         * @param dataCenters Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataCenters(CloudletsApplicationLoadBalancerDataCenterArgs... dataCenters) {
            return dataCenters(List.of(dataCenters));
        }

        /**
         * @param description The description of the load balancing configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the load balancing configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param livenessSettings Specifies the health of each load balanced data center defined in the data center list.
         * 
         * @return builder
         * 
         */
        public Builder livenessSettings(@Nullable Output<CloudletsApplicationLoadBalancerLivenessSettingsArgs> livenessSettings) {
            $.livenessSettings = livenessSettings;
            return this;
        }

        /**
         * @param livenessSettings Specifies the health of each load balanced data center defined in the data center list.
         * 
         * @return builder
         * 
         */
        public Builder livenessSettings(CloudletsApplicationLoadBalancerLivenessSettingsArgs livenessSettings) {
            return livenessSettings(Output.of(livenessSettings));
        }

        /**
         * @param originId The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
         * 
         * @return builder
         * 
         */
        public Builder originId(Output<String> originId) {
            $.originId = originId;
            return this;
        }

        /**
         * @param originId The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
         * 
         * @return builder
         * 
         */
        public Builder originId(String originId) {
            return originId(Output.of(originId));
        }

        public CloudletsApplicationLoadBalancerArgs build() {
            $.dataCenters = Objects.requireNonNull($.dataCenters, "expected parameter 'dataCenters' to be non-null");
            $.originId = Objects.requireNonNull($.originId, "expected parameter 'originId' to be non-null");
            return $;
        }
    }

}
