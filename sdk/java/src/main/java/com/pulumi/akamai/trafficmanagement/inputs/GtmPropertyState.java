// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.trafficmanagement.inputs;

import com.pulumi.akamai.trafficmanagement.inputs.GtmPropertyLivenessTestArgs;
import com.pulumi.akamai.trafficmanagement.inputs.GtmPropertyStaticRrSetArgs;
import com.pulumi.akamai.trafficmanagement.inputs.GtmPropertyTrafficTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmPropertyState extends com.pulumi.resources.ResourceArgs {

    public static final GtmPropertyState Empty = new GtmPropertyState();

    /**
     * Specifies a backup CNAME. If GTM declares that all of the servers configured for your property are down, the backup CNAME is handed out. If a backup CNAME is set, do not set a backup IP.
     * 
     */
    @Import(name="backupCname")
    private @Nullable Output<String> backupCname;

    /**
     * @return Specifies a backup CNAME. If GTM declares that all of the servers configured for your property are down, the backup CNAME is handed out. If a backup CNAME is set, do not set a backup IP.
     * 
     */
    public Optional<Output<String>> backupCname() {
        return Optional.ofNullable(this.backupCname);
    }

    /**
     * Specifies a backup IP. When GTM declares that all of the targets are down, the backup IP is handed out. If a backup IP is set, do not set a backup CNAME.
     * 
     */
    @Import(name="backupIp")
    private @Nullable Output<String> backupIp;

    /**
     * @return Specifies a backup IP. When GTM declares that all of the targets are down, the backup IP is handed out. If a backup IP is set, do not set a backup CNAME.
     * 
     */
    public Optional<Output<String>> backupIp() {
        return Optional.ofNullable(this.backupIp);
    }

    /**
     * A boolean that indicates whether download score based load balancing is enabled.
     * 
     */
    @Import(name="balanceByDownloadScore")
    private @Nullable Output<Boolean> balanceByDownloadScore;

    /**
     * @return A boolean that indicates whether download score based load balancing is enabled.
     * 
     */
    public Optional<Output<Boolean>> balanceByDownloadScore() {
        return Optional.ofNullable(this.balanceByDownloadScore);
    }

    /**
     * Indicates the fully qualified name aliased to a particular property.
     * 
     */
    @Import(name="cname")
    private @Nullable Output<String> cname;

    /**
     * @return Indicates the fully qualified name aliased to a particular property.
     * 
     */
    public Optional<Output<String>> cname() {
        return Optional.ofNullable(this.cname);
    }

    /**
     * A descriptive note about changes to the domain. The maximum is 4000 characters.
     * 
     */
    @Import(name="comments")
    private @Nullable Output<String> comments;

    /**
     * @return A descriptive note about changes to the domain. The maximum is 4000 characters.
     * 
     */
    public Optional<Output<String>> comments() {
        return Optional.ofNullable(this.comments);
    }

    /**
     * DNS name for the GTM Domain set that includes this Property.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return DNS name for the GTM Domain set that includes this Property.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
     * 
     */
    @Import(name="dynamicTtl")
    private @Nullable Output<Integer> dynamicTtl;

    /**
     * @return Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
     * 
     */
    public Optional<Output<Integer>> dynamicTtl() {
        return Optional.ofNullable(this.dynamicTtl);
    }

    /**
     * Specifies the failback delay in seconds.
     * 
     */
    @Import(name="failbackDelay")
    private @Nullable Output<Integer> failbackDelay;

    /**
     * @return Specifies the failback delay in seconds.
     * 
     */
    public Optional<Output<Integer>> failbackDelay() {
        return Optional.ofNullable(this.failbackDelay);
    }

    /**
     * Specifies the failover delay in seconds.
     * 
     */
    @Import(name="failoverDelay")
    private @Nullable Output<Integer> failoverDelay;

    /**
     * @return Specifies the failover delay in seconds.
     * 
     */
    public Optional<Output<Integer>> failoverDelay() {
        return Optional.ofNullable(this.failoverDelay);
    }

    /**
     * Use load estimates from Akamai Ghost utilization messages.
     * 
     */
    @Import(name="ghostDemandReporting")
    private @Nullable Output<Boolean> ghostDemandReporting;

    /**
     * @return Use load estimates from Akamai Ghost utilization messages.
     * 
     */
    public Optional<Output<Boolean>> ghostDemandReporting() {
        return Optional.ofNullable(this.ghostDemandReporting);
    }

    /**
     * Indicates the limit for the number of live IPs handed out to a DNS request.
     * 
     */
    @Import(name="handoutLimit")
    private @Nullable Output<Integer> handoutLimit;

    /**
     * @return Indicates the limit for the number of live IPs handed out to a DNS request.
     * 
     */
    public Optional<Output<Integer>> handoutLimit() {
        return Optional.ofNullable(this.handoutLimit);
    }

    /**
     * Specifies how IPs are returned when more than one IP is alive and available.
     * 
     */
    @Import(name="handoutMode")
    private @Nullable Output<String> handoutMode;

    /**
     * @return Specifies how IPs are returned when more than one IP is alive and available.
     * 
     */
    public Optional<Output<String>> handoutMode() {
        return Optional.ofNullable(this.handoutMode);
    }

    /**
     * Defines the absolute limit beyond which IPs are declared unhealthy.
     * 
     */
    @Import(name="healthMax")
    private @Nullable Output<Double> healthMax;

    /**
     * @return Defines the absolute limit beyond which IPs are declared unhealthy.
     * 
     */
    public Optional<Output<Double>> healthMax() {
        return Optional.ofNullable(this.healthMax);
    }

    /**
     * Configures a cutoff value that is computed from the median scores.
     * 
     */
    @Import(name="healthMultiplier")
    private @Nullable Output<Double> healthMultiplier;

    /**
     * @return Configures a cutoff value that is computed from the median scores.
     * 
     */
    public Optional<Output<Double>> healthMultiplier() {
        return Optional.ofNullable(this.healthMultiplier);
    }

    /**
     * Configures a cutoff value that is computed from the median scores.
     * 
     */
    @Import(name="healthThreshold")
    private @Nullable Output<Double> healthThreshold;

    /**
     * @return Configures a cutoff value that is computed from the median scores.
     * 
     */
    public Optional<Output<Double>> healthThreshold() {
        return Optional.ofNullable(this.healthThreshold);
    }

    /**
     * A boolean that indicates the type of IP address handed out by a GTM property.
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<Boolean> ipv6;

    /**
     * @return A boolean that indicates the type of IP address handed out by a GTM property.
     * 
     */
    public Optional<Output<Boolean>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
     * 
     */
    @Import(name="livenessTests")
    private @Nullable Output<List<GtmPropertyLivenessTestArgs>> livenessTests;

    /**
     * @return Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
     * 
     */
    public Optional<Output<List<GtmPropertyLivenessTestArgs>>> livenessTests() {
        return Optional.ofNullable(this.livenessTests);
    }

    /**
     * Indicates the percent of load imbalance factor (LIF) for the property.
     * 
     */
    @Import(name="loadImbalancePercentage")
    private @Nullable Output<Double> loadImbalancePercentage;

    /**
     * @return Indicates the percent of load imbalance factor (LIF) for the property.
     * 
     */
    public Optional<Output<Double>> loadImbalancePercentage() {
        return Optional.ofNullable(this.loadImbalancePercentage);
    }

    /**
     * A descriptive label for a GeographicMap or a CidrMap that&#39;s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
     * 
     */
    @Import(name="mapName")
    private @Nullable Output<String> mapName;

    /**
     * @return A descriptive label for a GeographicMap or a CidrMap that&#39;s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
     * 
     */
    public Optional<Output<String>> mapName() {
        return Optional.ofNullable(this.mapName);
    }

    /**
     * For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
     * 
     */
    @Import(name="maxUnreachablePenalty")
    private @Nullable Output<Integer> maxUnreachablePenalty;

    /**
     * @return For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
     * 
     */
    public Optional<Output<Integer>> maxUnreachablePenalty() {
        return Optional.ofNullable(this.maxUnreachablePenalty);
    }

    /**
     * Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
     * 
     */
    @Import(name="minLiveFraction")
    private @Nullable Output<Double> minLiveFraction;

    /**
     * @return Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
     * 
     */
    public Optional<Output<Double>> minLiveFraction() {
        return Optional.ofNullable(this.minLiveFraction);
    }

    /**
     * Name of HTTP header.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of HTTP header.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
     * 
     */
    @Import(name="scoreAggregationType")
    private @Nullable Output<String> scoreAggregationType;

    /**
     * @return Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
     * 
     */
    public Optional<Output<String>> scoreAggregationType() {
        return Optional.ofNullable(this.scoreAggregationType);
    }

    /**
     * Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
     * 
     */
    @Import(name="staticRrSets")
    private @Nullable Output<List<GtmPropertyStaticRrSetArgs>> staticRrSets;

    /**
     * @return Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
     * 
     */
    public Optional<Output<List<GtmPropertyStaticRrSetArgs>>> staticRrSets() {
        return Optional.ofNullable(this.staticRrSets);
    }

    @Import(name="staticTtl")
    private @Nullable Output<Integer> staticTtl;

    public Optional<Output<Integer>> staticTtl() {
        return Optional.ofNullable(this.staticTtl);
    }

    /**
     * Specifies a constant used to configure data center affinity.
     * 
     */
    @Import(name="stickinessBonusConstant")
    private @Nullable Output<Integer> stickinessBonusConstant;

    /**
     * @return Specifies a constant used to configure data center affinity.
     * 
     */
    public Optional<Output<Integer>> stickinessBonusConstant() {
        return Optional.ofNullable(this.stickinessBonusConstant);
    }

    /**
     * Specifies a percentage used to configure data center affinity.
     * 
     */
    @Import(name="stickinessBonusPercentage")
    private @Nullable Output<Integer> stickinessBonusPercentage;

    /**
     * @return Specifies a percentage used to configure data center affinity.
     * 
     */
    public Optional<Output<Integer>> stickinessBonusPercentage() {
        return Optional.ofNullable(this.stickinessBonusPercentage);
    }

    /**
     * Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
     * 
     */
    @Import(name="trafficTargets")
    private @Nullable Output<List<GtmPropertyTrafficTargetArgs>> trafficTargets;

    /**
     * @return Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
     * 
     */
    public Optional<Output<List<GtmPropertyTrafficTargetArgs>>> trafficTargets() {
        return Optional.ofNullable(this.trafficTargets);
    }

    /**
     * The record type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The record type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
     * 
     */
    @Import(name="unreachableThreshold")
    private @Nullable Output<Double> unreachableThreshold;

    /**
     * @return For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
     * 
     */
    public Optional<Output<Double>> unreachableThreshold() {
        return Optional.ofNullable(this.unreachableThreshold);
    }

    /**
     * For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
     * 
     */
    @Import(name="useComputedTargets")
    private @Nullable Output<Boolean> useComputedTargets;

    /**
     * @return For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
     * 
     */
    public Optional<Output<Boolean>> useComputedTargets() {
        return Optional.ofNullable(this.useComputedTargets);
    }

    /**
     * A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     * 
     */
    @Import(name="waitOnComplete")
    private @Nullable Output<Boolean> waitOnComplete;

    /**
     * @return A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     * 
     */
    public Optional<Output<Boolean>> waitOnComplete() {
        return Optional.ofNullable(this.waitOnComplete);
    }

    @Import(name="weightedHashBitsForIpv4")
    private @Nullable Output<Integer> weightedHashBitsForIpv4;

    public Optional<Output<Integer>> weightedHashBitsForIpv4() {
        return Optional.ofNullable(this.weightedHashBitsForIpv4);
    }

    @Import(name="weightedHashBitsForIpv6")
    private @Nullable Output<Integer> weightedHashBitsForIpv6;

    public Optional<Output<Integer>> weightedHashBitsForIpv6() {
        return Optional.ofNullable(this.weightedHashBitsForIpv6);
    }

    private GtmPropertyState() {}

    private GtmPropertyState(GtmPropertyState $) {
        this.backupCname = $.backupCname;
        this.backupIp = $.backupIp;
        this.balanceByDownloadScore = $.balanceByDownloadScore;
        this.cname = $.cname;
        this.comments = $.comments;
        this.domain = $.domain;
        this.dynamicTtl = $.dynamicTtl;
        this.failbackDelay = $.failbackDelay;
        this.failoverDelay = $.failoverDelay;
        this.ghostDemandReporting = $.ghostDemandReporting;
        this.handoutLimit = $.handoutLimit;
        this.handoutMode = $.handoutMode;
        this.healthMax = $.healthMax;
        this.healthMultiplier = $.healthMultiplier;
        this.healthThreshold = $.healthThreshold;
        this.ipv6 = $.ipv6;
        this.livenessTests = $.livenessTests;
        this.loadImbalancePercentage = $.loadImbalancePercentage;
        this.mapName = $.mapName;
        this.maxUnreachablePenalty = $.maxUnreachablePenalty;
        this.minLiveFraction = $.minLiveFraction;
        this.name = $.name;
        this.scoreAggregationType = $.scoreAggregationType;
        this.staticRrSets = $.staticRrSets;
        this.staticTtl = $.staticTtl;
        this.stickinessBonusConstant = $.stickinessBonusConstant;
        this.stickinessBonusPercentage = $.stickinessBonusPercentage;
        this.trafficTargets = $.trafficTargets;
        this.type = $.type;
        this.unreachableThreshold = $.unreachableThreshold;
        this.useComputedTargets = $.useComputedTargets;
        this.waitOnComplete = $.waitOnComplete;
        this.weightedHashBitsForIpv4 = $.weightedHashBitsForIpv4;
        this.weightedHashBitsForIpv6 = $.weightedHashBitsForIpv6;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmPropertyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmPropertyState $;

        public Builder() {
            $ = new GtmPropertyState();
        }

        public Builder(GtmPropertyState defaults) {
            $ = new GtmPropertyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupCname Specifies a backup CNAME. If GTM declares that all of the servers configured for your property are down, the backup CNAME is handed out. If a backup CNAME is set, do not set a backup IP.
         * 
         * @return builder
         * 
         */
        public Builder backupCname(@Nullable Output<String> backupCname) {
            $.backupCname = backupCname;
            return this;
        }

        /**
         * @param backupCname Specifies a backup CNAME. If GTM declares that all of the servers configured for your property are down, the backup CNAME is handed out. If a backup CNAME is set, do not set a backup IP.
         * 
         * @return builder
         * 
         */
        public Builder backupCname(String backupCname) {
            return backupCname(Output.of(backupCname));
        }

        /**
         * @param backupIp Specifies a backup IP. When GTM declares that all of the targets are down, the backup IP is handed out. If a backup IP is set, do not set a backup CNAME.
         * 
         * @return builder
         * 
         */
        public Builder backupIp(@Nullable Output<String> backupIp) {
            $.backupIp = backupIp;
            return this;
        }

        /**
         * @param backupIp Specifies a backup IP. When GTM declares that all of the targets are down, the backup IP is handed out. If a backup IP is set, do not set a backup CNAME.
         * 
         * @return builder
         * 
         */
        public Builder backupIp(String backupIp) {
            return backupIp(Output.of(backupIp));
        }

        /**
         * @param balanceByDownloadScore A boolean that indicates whether download score based load balancing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder balanceByDownloadScore(@Nullable Output<Boolean> balanceByDownloadScore) {
            $.balanceByDownloadScore = balanceByDownloadScore;
            return this;
        }

        /**
         * @param balanceByDownloadScore A boolean that indicates whether download score based load balancing is enabled.
         * 
         * @return builder
         * 
         */
        public Builder balanceByDownloadScore(Boolean balanceByDownloadScore) {
            return balanceByDownloadScore(Output.of(balanceByDownloadScore));
        }

        /**
         * @param cname Indicates the fully qualified name aliased to a particular property.
         * 
         * @return builder
         * 
         */
        public Builder cname(@Nullable Output<String> cname) {
            $.cname = cname;
            return this;
        }

        /**
         * @param cname Indicates the fully qualified name aliased to a particular property.
         * 
         * @return builder
         * 
         */
        public Builder cname(String cname) {
            return cname(Output.of(cname));
        }

        /**
         * @param comments A descriptive note about changes to the domain. The maximum is 4000 characters.
         * 
         * @return builder
         * 
         */
        public Builder comments(@Nullable Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments A descriptive note about changes to the domain. The maximum is 4000 characters.
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param domain DNS name for the GTM Domain set that includes this Property.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain DNS name for the GTM Domain set that includes this Property.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param dynamicTtl Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
         * 
         * @return builder
         * 
         */
        public Builder dynamicTtl(@Nullable Output<Integer> dynamicTtl) {
            $.dynamicTtl = dynamicTtl;
            return this;
        }

        /**
         * @param dynamicTtl Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
         * 
         * @return builder
         * 
         */
        public Builder dynamicTtl(Integer dynamicTtl) {
            return dynamicTtl(Output.of(dynamicTtl));
        }

        /**
         * @param failbackDelay Specifies the failback delay in seconds.
         * 
         * @return builder
         * 
         */
        public Builder failbackDelay(@Nullable Output<Integer> failbackDelay) {
            $.failbackDelay = failbackDelay;
            return this;
        }

        /**
         * @param failbackDelay Specifies the failback delay in seconds.
         * 
         * @return builder
         * 
         */
        public Builder failbackDelay(Integer failbackDelay) {
            return failbackDelay(Output.of(failbackDelay));
        }

        /**
         * @param failoverDelay Specifies the failover delay in seconds.
         * 
         * @return builder
         * 
         */
        public Builder failoverDelay(@Nullable Output<Integer> failoverDelay) {
            $.failoverDelay = failoverDelay;
            return this;
        }

        /**
         * @param failoverDelay Specifies the failover delay in seconds.
         * 
         * @return builder
         * 
         */
        public Builder failoverDelay(Integer failoverDelay) {
            return failoverDelay(Output.of(failoverDelay));
        }

        /**
         * @param ghostDemandReporting Use load estimates from Akamai Ghost utilization messages.
         * 
         * @return builder
         * 
         */
        public Builder ghostDemandReporting(@Nullable Output<Boolean> ghostDemandReporting) {
            $.ghostDemandReporting = ghostDemandReporting;
            return this;
        }

        /**
         * @param ghostDemandReporting Use load estimates from Akamai Ghost utilization messages.
         * 
         * @return builder
         * 
         */
        public Builder ghostDemandReporting(Boolean ghostDemandReporting) {
            return ghostDemandReporting(Output.of(ghostDemandReporting));
        }

        /**
         * @param handoutLimit Indicates the limit for the number of live IPs handed out to a DNS request.
         * 
         * @return builder
         * 
         */
        public Builder handoutLimit(@Nullable Output<Integer> handoutLimit) {
            $.handoutLimit = handoutLimit;
            return this;
        }

        /**
         * @param handoutLimit Indicates the limit for the number of live IPs handed out to a DNS request.
         * 
         * @return builder
         * 
         */
        public Builder handoutLimit(Integer handoutLimit) {
            return handoutLimit(Output.of(handoutLimit));
        }

        /**
         * @param handoutMode Specifies how IPs are returned when more than one IP is alive and available.
         * 
         * @return builder
         * 
         */
        public Builder handoutMode(@Nullable Output<String> handoutMode) {
            $.handoutMode = handoutMode;
            return this;
        }

        /**
         * @param handoutMode Specifies how IPs are returned when more than one IP is alive and available.
         * 
         * @return builder
         * 
         */
        public Builder handoutMode(String handoutMode) {
            return handoutMode(Output.of(handoutMode));
        }

        /**
         * @param healthMax Defines the absolute limit beyond which IPs are declared unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder healthMax(@Nullable Output<Double> healthMax) {
            $.healthMax = healthMax;
            return this;
        }

        /**
         * @param healthMax Defines the absolute limit beyond which IPs are declared unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder healthMax(Double healthMax) {
            return healthMax(Output.of(healthMax));
        }

        /**
         * @param healthMultiplier Configures a cutoff value that is computed from the median scores.
         * 
         * @return builder
         * 
         */
        public Builder healthMultiplier(@Nullable Output<Double> healthMultiplier) {
            $.healthMultiplier = healthMultiplier;
            return this;
        }

        /**
         * @param healthMultiplier Configures a cutoff value that is computed from the median scores.
         * 
         * @return builder
         * 
         */
        public Builder healthMultiplier(Double healthMultiplier) {
            return healthMultiplier(Output.of(healthMultiplier));
        }

        /**
         * @param healthThreshold Configures a cutoff value that is computed from the median scores.
         * 
         * @return builder
         * 
         */
        public Builder healthThreshold(@Nullable Output<Double> healthThreshold) {
            $.healthThreshold = healthThreshold;
            return this;
        }

        /**
         * @param healthThreshold Configures a cutoff value that is computed from the median scores.
         * 
         * @return builder
         * 
         */
        public Builder healthThreshold(Double healthThreshold) {
            return healthThreshold(Output.of(healthThreshold));
        }

        /**
         * @param ipv6 A boolean that indicates the type of IP address handed out by a GTM property.
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<Boolean> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 A boolean that indicates the type of IP address handed out by a GTM property.
         * 
         * @return builder
         * 
         */
        public Builder ipv6(Boolean ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param livenessTests Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder livenessTests(@Nullable Output<List<GtmPropertyLivenessTestArgs>> livenessTests) {
            $.livenessTests = livenessTests;
            return this;
        }

        /**
         * @param livenessTests Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder livenessTests(List<GtmPropertyLivenessTestArgs> livenessTests) {
            return livenessTests(Output.of(livenessTests));
        }

        /**
         * @param livenessTests Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder livenessTests(GtmPropertyLivenessTestArgs... livenessTests) {
            return livenessTests(List.of(livenessTests));
        }

        /**
         * @param loadImbalancePercentage Indicates the percent of load imbalance factor (LIF) for the property.
         * 
         * @return builder
         * 
         */
        public Builder loadImbalancePercentage(@Nullable Output<Double> loadImbalancePercentage) {
            $.loadImbalancePercentage = loadImbalancePercentage;
            return this;
        }

        /**
         * @param loadImbalancePercentage Indicates the percent of load imbalance factor (LIF) for the property.
         * 
         * @return builder
         * 
         */
        public Builder loadImbalancePercentage(Double loadImbalancePercentage) {
            return loadImbalancePercentage(Output.of(loadImbalancePercentage));
        }

        /**
         * @param mapName A descriptive label for a GeographicMap or a CidrMap that&#39;s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
         * 
         * @return builder
         * 
         */
        public Builder mapName(@Nullable Output<String> mapName) {
            $.mapName = mapName;
            return this;
        }

        /**
         * @param mapName A descriptive label for a GeographicMap or a CidrMap that&#39;s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
         * 
         * @return builder
         * 
         */
        public Builder mapName(String mapName) {
            return mapName(Output.of(mapName));
        }

        /**
         * @param maxUnreachablePenalty For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
         * 
         * @return builder
         * 
         */
        public Builder maxUnreachablePenalty(@Nullable Output<Integer> maxUnreachablePenalty) {
            $.maxUnreachablePenalty = maxUnreachablePenalty;
            return this;
        }

        /**
         * @param maxUnreachablePenalty For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
         * 
         * @return builder
         * 
         */
        public Builder maxUnreachablePenalty(Integer maxUnreachablePenalty) {
            return maxUnreachablePenalty(Output.of(maxUnreachablePenalty));
        }

        /**
         * @param minLiveFraction Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
         * 
         * @return builder
         * 
         */
        public Builder minLiveFraction(@Nullable Output<Double> minLiveFraction) {
            $.minLiveFraction = minLiveFraction;
            return this;
        }

        /**
         * @param minLiveFraction Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
         * 
         * @return builder
         * 
         */
        public Builder minLiveFraction(Double minLiveFraction) {
            return minLiveFraction(Output.of(minLiveFraction));
        }

        /**
         * @param name Name of HTTP header.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of HTTP header.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scoreAggregationType Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
         * 
         * @return builder
         * 
         */
        public Builder scoreAggregationType(@Nullable Output<String> scoreAggregationType) {
            $.scoreAggregationType = scoreAggregationType;
            return this;
        }

        /**
         * @param scoreAggregationType Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
         * 
         * @return builder
         * 
         */
        public Builder scoreAggregationType(String scoreAggregationType) {
            return scoreAggregationType(Output.of(scoreAggregationType));
        }

        /**
         * @param staticRrSets Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder staticRrSets(@Nullable Output<List<GtmPropertyStaticRrSetArgs>> staticRrSets) {
            $.staticRrSets = staticRrSets;
            return this;
        }

        /**
         * @param staticRrSets Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder staticRrSets(List<GtmPropertyStaticRrSetArgs> staticRrSets) {
            return staticRrSets(Output.of(staticRrSets));
        }

        /**
         * @param staticRrSets Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder staticRrSets(GtmPropertyStaticRrSetArgs... staticRrSets) {
            return staticRrSets(List.of(staticRrSets));
        }

        public Builder staticTtl(@Nullable Output<Integer> staticTtl) {
            $.staticTtl = staticTtl;
            return this;
        }

        public Builder staticTtl(Integer staticTtl) {
            return staticTtl(Output.of(staticTtl));
        }

        /**
         * @param stickinessBonusConstant Specifies a constant used to configure data center affinity.
         * 
         * @return builder
         * 
         */
        public Builder stickinessBonusConstant(@Nullable Output<Integer> stickinessBonusConstant) {
            $.stickinessBonusConstant = stickinessBonusConstant;
            return this;
        }

        /**
         * @param stickinessBonusConstant Specifies a constant used to configure data center affinity.
         * 
         * @return builder
         * 
         */
        public Builder stickinessBonusConstant(Integer stickinessBonusConstant) {
            return stickinessBonusConstant(Output.of(stickinessBonusConstant));
        }

        /**
         * @param stickinessBonusPercentage Specifies a percentage used to configure data center affinity.
         * 
         * @return builder
         * 
         */
        public Builder stickinessBonusPercentage(@Nullable Output<Integer> stickinessBonusPercentage) {
            $.stickinessBonusPercentage = stickinessBonusPercentage;
            return this;
        }

        /**
         * @param stickinessBonusPercentage Specifies a percentage used to configure data center affinity.
         * 
         * @return builder
         * 
         */
        public Builder stickinessBonusPercentage(Integer stickinessBonusPercentage) {
            return stickinessBonusPercentage(Output.of(stickinessBonusPercentage));
        }

        /**
         * @param trafficTargets Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
         * 
         * @return builder
         * 
         */
        public Builder trafficTargets(@Nullable Output<List<GtmPropertyTrafficTargetArgs>> trafficTargets) {
            $.trafficTargets = trafficTargets;
            return this;
        }

        /**
         * @param trafficTargets Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
         * 
         * @return builder
         * 
         */
        public Builder trafficTargets(List<GtmPropertyTrafficTargetArgs> trafficTargets) {
            return trafficTargets(Output.of(trafficTargets));
        }

        /**
         * @param trafficTargets Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
         * 
         * @return builder
         * 
         */
        public Builder trafficTargets(GtmPropertyTrafficTargetArgs... trafficTargets) {
            return trafficTargets(List.of(trafficTargets));
        }

        /**
         * @param type The record type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The record type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unreachableThreshold For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
         * 
         * @return builder
         * 
         */
        public Builder unreachableThreshold(@Nullable Output<Double> unreachableThreshold) {
            $.unreachableThreshold = unreachableThreshold;
            return this;
        }

        /**
         * @param unreachableThreshold For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
         * 
         * @return builder
         * 
         */
        public Builder unreachableThreshold(Double unreachableThreshold) {
            return unreachableThreshold(Output.of(unreachableThreshold));
        }

        /**
         * @param useComputedTargets For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
         * 
         * @return builder
         * 
         */
        public Builder useComputedTargets(@Nullable Output<Boolean> useComputedTargets) {
            $.useComputedTargets = useComputedTargets;
            return this;
        }

        /**
         * @param useComputedTargets For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
         * 
         * @return builder
         * 
         */
        public Builder useComputedTargets(Boolean useComputedTargets) {
            return useComputedTargets(Output.of(useComputedTargets));
        }

        /**
         * @param waitOnComplete A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
         * 
         * @return builder
         * 
         */
        public Builder waitOnComplete(@Nullable Output<Boolean> waitOnComplete) {
            $.waitOnComplete = waitOnComplete;
            return this;
        }

        /**
         * @param waitOnComplete A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
         * 
         * @return builder
         * 
         */
        public Builder waitOnComplete(Boolean waitOnComplete) {
            return waitOnComplete(Output.of(waitOnComplete));
        }

        public Builder weightedHashBitsForIpv4(@Nullable Output<Integer> weightedHashBitsForIpv4) {
            $.weightedHashBitsForIpv4 = weightedHashBitsForIpv4;
            return this;
        }

        public Builder weightedHashBitsForIpv4(Integer weightedHashBitsForIpv4) {
            return weightedHashBitsForIpv4(Output.of(weightedHashBitsForIpv4));
        }

        public Builder weightedHashBitsForIpv6(@Nullable Output<Integer> weightedHashBitsForIpv6) {
            $.weightedHashBitsForIpv6 = weightedHashBitsForIpv6;
            return this;
        }

        public Builder weightedHashBitsForIpv6(Integer weightedHashBitsForIpv6) {
            return weightedHashBitsForIpv6(Output.of(weightedHashBitsForIpv6));
        }

        public GtmPropertyState build() {
            return $;
        }
    }

}
