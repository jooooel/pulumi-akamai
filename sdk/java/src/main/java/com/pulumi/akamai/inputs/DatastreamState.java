// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.DatastreamAzureConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamConfigArgs;
import com.pulumi.akamai.inputs.DatastreamDatadogConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamElasticsearchConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamGcsConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamHttpsConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamLogglyConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamNewRelicConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamOracleConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamS3ConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamSplunkConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamSumologicConnectorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatastreamState extends com.pulumi.resources.ResourceArgs {

    public static final DatastreamState Empty = new DatastreamState();

    /**
     * Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
     * 
     */
    @Import(name="azureConnector")
    private @Nullable Output<DatastreamAzureConnectorArgs> azureConnector;

    /**
     * @return Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamAzureConnectorArgs>> azureConnector() {
        return Optional.ofNullable(this.azureConnector);
    }

    /**
     * Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
     * 
     */
    @Import(name="config")
    private @Nullable Output<DatastreamConfigArgs> config;

    /**
     * @return Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamConfigArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Identifies the contract that has access to the product.
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return Identifies the contract that has access to the product.
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * The username who created the stream
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The username who created the stream
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The date and time when the stream was created
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The date and time when the stream was created
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * Specify details about the Datadog connector in a stream, including:
     * 
     */
    @Import(name="datadogConnector")
    private @Nullable Output<DatastreamDatadogConnectorArgs> datadogConnector;

    /**
     * @return Specify details about the Datadog connector in a stream, including:
     * 
     */
    public Optional<Output<DatastreamDatadogConnectorArgs>> datadogConnector() {
        return Optional.ofNullable(this.datadogConnector);
    }

    /**
     * Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
     * 
     */
    @Import(name="datasetFieldsIds")
    private @Nullable Output<List<Integer>> datasetFieldsIds;

    /**
     * @return Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
     * 
     */
    public Optional<Output<List<Integer>>> datasetFieldsIds() {
        return Optional.ofNullable(this.datasetFieldsIds);
    }

    /**
     * Specify details about the Elasticsearch connector you can use in a stream, including:
     * 
     */
    @Import(name="elasticsearchConnector")
    private @Nullable Output<DatastreamElasticsearchConnectorArgs> elasticsearchConnector;

    /**
     * @return Specify details about the Elasticsearch connector you can use in a stream, including:
     * 
     */
    public Optional<Output<DatastreamElasticsearchConnectorArgs>> elasticsearchConnector() {
        return Optional.ofNullable(this.elasticsearchConnector);
    }

    /**
     * A list of email addresses you want to notify about activations and deactivations of the stream.
     * 
     */
    @Import(name="emailIds")
    private @Nullable Output<List<String>> emailIds;

    /**
     * @return A list of email addresses you want to notify about activations and deactivations of the stream.
     * 
     */
    public Optional<Output<List<String>>> emailIds() {
        return Optional.ofNullable(this.emailIds);
    }

    /**
     * Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
     * 
     */
    @Import(name="gcsConnector")
    private @Nullable Output<DatastreamGcsConnectorArgs> gcsConnector;

    /**
     * @return Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamGcsConnectorArgs>> gcsConnector() {
        return Optional.ofNullable(this.gcsConnector);
    }

    /**
     * Identifies the group that has access to the product and this stream configuration.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return Identifies the group that has access to the product and this stream configuration.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The name of the user group for which the stream was created
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return The name of the user group for which the stream was created
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
     * 
     */
    @Import(name="httpsConnector")
    private @Nullable Output<DatastreamHttpsConnectorArgs> httpsConnector;

    /**
     * @return Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
     * 
     */
    public Optional<Output<DatastreamHttpsConnectorArgs>> httpsConnector() {
        return Optional.ofNullable(this.httpsConnector);
    }

    /**
     * Specify details about the Loggly connector you can use in a stream, including:
     * 
     */
    @Import(name="logglyConnector")
    private @Nullable Output<DatastreamLogglyConnectorArgs> logglyConnector;

    /**
     * @return Specify details about the Loggly connector you can use in a stream, including:
     * 
     */
    public Optional<Output<DatastreamLogglyConnectorArgs>> logglyConnector() {
        return Optional.ofNullable(this.logglyConnector);
    }

    /**
     * The username who modified the stream
     * 
     */
    @Import(name="modifiedBy")
    private @Nullable Output<String> modifiedBy;

    /**
     * @return The username who modified the stream
     * 
     */
    public Optional<Output<String>> modifiedBy() {
        return Optional.ofNullable(this.modifiedBy);
    }

    /**
     * The date and time when the stream was modified
     * 
     */
    @Import(name="modifiedDate")
    private @Nullable Output<String> modifiedDate;

    /**
     * @return The date and time when the stream was modified
     * 
     */
    public Optional<Output<String>> modifiedDate() {
        return Optional.ofNullable(this.modifiedDate);
    }

    /**
     * Specify details about the New Relic connector you can use in a stream, including:
     * 
     */
    @Import(name="newRelicConnector")
    private @Nullable Output<DatastreamNewRelicConnectorArgs> newRelicConnector;

    /**
     * @return Specify details about the New Relic connector you can use in a stream, including:
     * 
     */
    public Optional<Output<DatastreamNewRelicConnectorArgs>> newRelicConnector() {
        return Optional.ofNullable(this.newRelicConnector);
    }

    /**
     * Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
     * 
     */
    @Import(name="oracleConnector")
    private @Nullable Output<DatastreamOracleConnectorArgs> oracleConnector;

    /**
     * @return Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
     * 
     */
    public Optional<Output<DatastreamOracleConnectorArgs>> oracleConnector() {
        return Optional.ofNullable(this.oracleConnector);
    }

    /**
     * The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
     * 
     */
    @Import(name="papiJson")
    private @Nullable Output<String> papiJson;

    /**
     * @return The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
     * 
     */
    public Optional<Output<String>> papiJson() {
        return Optional.ofNullable(this.papiJson);
    }

    /**
     * The ID of the product for which the stream was created
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return The ID of the product for which the stream was created
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    /**
     * The name of the product for which the stream was created
     * 
     */
    @Import(name="productName")
    private @Nullable Output<String> productName;

    /**
     * @return The name of the product for which the stream was created
     * 
     */
    public Optional<Output<String>> productName() {
        return Optional.ofNullable(this.productName);
    }

    /**
     * Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
     * 
     */
    @Import(name="propertyIds")
    private @Nullable Output<List<String>> propertyIds;

    /**
     * @return Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
     * 
     */
    public Optional<Output<List<String>>> propertyIds() {
        return Optional.ofNullable(this.propertyIds);
    }

    /**
     * Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
     * 
     */
    @Import(name="s3Connector")
    private @Nullable Output<DatastreamS3ConnectorArgs> s3Connector;

    /**
     * @return Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamS3ConnectorArgs>> s3Connector() {
        return Optional.ofNullable(this.s3Connector);
    }

    /**
     * Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
     * 
     */
    @Import(name="splunkConnector")
    private @Nullable Output<DatastreamSplunkConnectorArgs> splunkConnector;

    /**
     * @return Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamSplunkConnectorArgs>> splunkConnector() {
        return Optional.ofNullable(this.splunkConnector);
    }

    /**
     * The name of the stream.
     * 
     */
    @Import(name="streamName")
    private @Nullable Output<String> streamName;

    /**
     * @return The name of the stream.
     * 
     */
    public Optional<Output<String>> streamName() {
        return Optional.ofNullable(this.streamName);
    }

    /**
     * The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
     * 
     */
    @Import(name="streamType")
    private @Nullable Output<String> streamType;

    /**
     * @return The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
     * 
     */
    public Optional<Output<String>> streamType() {
        return Optional.ofNullable(this.streamType);
    }

    /**
     * Identifies the configuration version of the stream
     * 
     */
    @Import(name="streamVersionId")
    private @Nullable Output<Integer> streamVersionId;

    /**
     * @return Identifies the configuration version of the stream
     * 
     */
    public Optional<Output<Integer>> streamVersionId() {
        return Optional.ofNullable(this.streamVersionId);
    }

    /**
     * Specify details about the Sumo Logic connector in a stream, including:
     * 
     */
    @Import(name="sumologicConnector")
    private @Nullable Output<DatastreamSumologicConnectorArgs> sumologicConnector;

    /**
     * @return Specify details about the Sumo Logic connector in a stream, including:
     * 
     */
    public Optional<Output<DatastreamSumologicConnectorArgs>> sumologicConnector() {
        return Optional.ofNullable(this.sumologicConnector);
    }

    /**
     * The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    private DatastreamState() {}

    private DatastreamState(DatastreamState $) {
        this.active = $.active;
        this.azureConnector = $.azureConnector;
        this.config = $.config;
        this.contractId = $.contractId;
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.datadogConnector = $.datadogConnector;
        this.datasetFieldsIds = $.datasetFieldsIds;
        this.elasticsearchConnector = $.elasticsearchConnector;
        this.emailIds = $.emailIds;
        this.gcsConnector = $.gcsConnector;
        this.groupId = $.groupId;
        this.groupName = $.groupName;
        this.httpsConnector = $.httpsConnector;
        this.logglyConnector = $.logglyConnector;
        this.modifiedBy = $.modifiedBy;
        this.modifiedDate = $.modifiedDate;
        this.newRelicConnector = $.newRelicConnector;
        this.oracleConnector = $.oracleConnector;
        this.papiJson = $.papiJson;
        this.productId = $.productId;
        this.productName = $.productName;
        this.propertyIds = $.propertyIds;
        this.s3Connector = $.s3Connector;
        this.splunkConnector = $.splunkConnector;
        this.streamName = $.streamName;
        this.streamType = $.streamType;
        this.streamVersionId = $.streamVersionId;
        this.sumologicConnector = $.sumologicConnector;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastreamState $;

        public Builder() {
            $ = new DatastreamState();
        }

        public Builder(DatastreamState defaults) {
            $ = new DatastreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param azureConnector Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder azureConnector(@Nullable Output<DatastreamAzureConnectorArgs> azureConnector) {
            $.azureConnector = azureConnector;
            return this;
        }

        /**
         * @param azureConnector Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder azureConnector(DatastreamAzureConnectorArgs azureConnector) {
            return azureConnector(Output.of(azureConnector));
        }

        /**
         * @param config Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<DatastreamConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder config(DatastreamConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param contractId Identifies the contract that has access to the product.
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Identifies the contract that has access to the product.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param createdBy The username who created the stream
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The username who created the stream
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate The date and time when the stream was created
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The date and time when the stream was created
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param datadogConnector Specify details about the Datadog connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder datadogConnector(@Nullable Output<DatastreamDatadogConnectorArgs> datadogConnector) {
            $.datadogConnector = datadogConnector;
            return this;
        }

        /**
         * @param datadogConnector Specify details about the Datadog connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder datadogConnector(DatastreamDatadogConnectorArgs datadogConnector) {
            return datadogConnector(Output.of(datadogConnector));
        }

        /**
         * @param datasetFieldsIds Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
         * 
         * @return builder
         * 
         */
        public Builder datasetFieldsIds(@Nullable Output<List<Integer>> datasetFieldsIds) {
            $.datasetFieldsIds = datasetFieldsIds;
            return this;
        }

        /**
         * @param datasetFieldsIds Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
         * 
         * @return builder
         * 
         */
        public Builder datasetFieldsIds(List<Integer> datasetFieldsIds) {
            return datasetFieldsIds(Output.of(datasetFieldsIds));
        }

        /**
         * @param datasetFieldsIds Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
         * 
         * @return builder
         * 
         */
        public Builder datasetFieldsIds(Integer... datasetFieldsIds) {
            return datasetFieldsIds(List.of(datasetFieldsIds));
        }

        /**
         * @param elasticsearchConnector Specify details about the Elasticsearch connector you can use in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchConnector(@Nullable Output<DatastreamElasticsearchConnectorArgs> elasticsearchConnector) {
            $.elasticsearchConnector = elasticsearchConnector;
            return this;
        }

        /**
         * @param elasticsearchConnector Specify details about the Elasticsearch connector you can use in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder elasticsearchConnector(DatastreamElasticsearchConnectorArgs elasticsearchConnector) {
            return elasticsearchConnector(Output.of(elasticsearchConnector));
        }

        /**
         * @param emailIds A list of email addresses you want to notify about activations and deactivations of the stream.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(@Nullable Output<List<String>> emailIds) {
            $.emailIds = emailIds;
            return this;
        }

        /**
         * @param emailIds A list of email addresses you want to notify about activations and deactivations of the stream.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(List<String> emailIds) {
            return emailIds(Output.of(emailIds));
        }

        /**
         * @param emailIds A list of email addresses you want to notify about activations and deactivations of the stream.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(String... emailIds) {
            return emailIds(List.of(emailIds));
        }

        /**
         * @param gcsConnector Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder gcsConnector(@Nullable Output<DatastreamGcsConnectorArgs> gcsConnector) {
            $.gcsConnector = gcsConnector;
            return this;
        }

        /**
         * @param gcsConnector Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder gcsConnector(DatastreamGcsConnectorArgs gcsConnector) {
            return gcsConnector(Output.of(gcsConnector));
        }

        /**
         * @param groupId Identifies the group that has access to the product and this stream configuration.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Identifies the group that has access to the product and this stream configuration.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param groupName The name of the user group for which the stream was created
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName The name of the user group for which the stream was created
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param httpsConnector Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder httpsConnector(@Nullable Output<DatastreamHttpsConnectorArgs> httpsConnector) {
            $.httpsConnector = httpsConnector;
            return this;
        }

        /**
         * @param httpsConnector Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder httpsConnector(DatastreamHttpsConnectorArgs httpsConnector) {
            return httpsConnector(Output.of(httpsConnector));
        }

        /**
         * @param logglyConnector Specify details about the Loggly connector you can use in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder logglyConnector(@Nullable Output<DatastreamLogglyConnectorArgs> logglyConnector) {
            $.logglyConnector = logglyConnector;
            return this;
        }

        /**
         * @param logglyConnector Specify details about the Loggly connector you can use in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder logglyConnector(DatastreamLogglyConnectorArgs logglyConnector) {
            return logglyConnector(Output.of(logglyConnector));
        }

        /**
         * @param modifiedBy The username who modified the stream
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(@Nullable Output<String> modifiedBy) {
            $.modifiedBy = modifiedBy;
            return this;
        }

        /**
         * @param modifiedBy The username who modified the stream
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(String modifiedBy) {
            return modifiedBy(Output.of(modifiedBy));
        }

        /**
         * @param modifiedDate The date and time when the stream was modified
         * 
         * @return builder
         * 
         */
        public Builder modifiedDate(@Nullable Output<String> modifiedDate) {
            $.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * @param modifiedDate The date and time when the stream was modified
         * 
         * @return builder
         * 
         */
        public Builder modifiedDate(String modifiedDate) {
            return modifiedDate(Output.of(modifiedDate));
        }

        /**
         * @param newRelicConnector Specify details about the New Relic connector you can use in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder newRelicConnector(@Nullable Output<DatastreamNewRelicConnectorArgs> newRelicConnector) {
            $.newRelicConnector = newRelicConnector;
            return this;
        }

        /**
         * @param newRelicConnector Specify details about the New Relic connector you can use in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder newRelicConnector(DatastreamNewRelicConnectorArgs newRelicConnector) {
            return newRelicConnector(Output.of(newRelicConnector));
        }

        /**
         * @param oracleConnector Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
         * 
         * @return builder
         * 
         */
        public Builder oracleConnector(@Nullable Output<DatastreamOracleConnectorArgs> oracleConnector) {
            $.oracleConnector = oracleConnector;
            return this;
        }

        /**
         * @param oracleConnector Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
         * 
         * @return builder
         * 
         */
        public Builder oracleConnector(DatastreamOracleConnectorArgs oracleConnector) {
            return oracleConnector(Output.of(oracleConnector));
        }

        /**
         * @param papiJson The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
         * 
         * @return builder
         * 
         */
        public Builder papiJson(@Nullable Output<String> papiJson) {
            $.papiJson = papiJson;
            return this;
        }

        /**
         * @param papiJson The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
         * 
         * @return builder
         * 
         */
        public Builder papiJson(String papiJson) {
            return papiJson(Output.of(papiJson));
        }

        /**
         * @param productId The ID of the product for which the stream was created
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId The ID of the product for which the stream was created
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param productName The name of the product for which the stream was created
         * 
         * @return builder
         * 
         */
        public Builder productName(@Nullable Output<String> productName) {
            $.productName = productName;
            return this;
        }

        /**
         * @param productName The name of the product for which the stream was created
         * 
         * @return builder
         * 
         */
        public Builder productName(String productName) {
            return productName(Output.of(productName));
        }

        /**
         * @param propertyIds Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(@Nullable Output<List<String>> propertyIds) {
            $.propertyIds = propertyIds;
            return this;
        }

        /**
         * @param propertyIds Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(List<String> propertyIds) {
            return propertyIds(Output.of(propertyIds));
        }

        /**
         * @param propertyIds Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(String... propertyIds) {
            return propertyIds(List.of(propertyIds));
        }

        /**
         * @param s3Connector Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder s3Connector(@Nullable Output<DatastreamS3ConnectorArgs> s3Connector) {
            $.s3Connector = s3Connector;
            return this;
        }

        /**
         * @param s3Connector Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder s3Connector(DatastreamS3ConnectorArgs s3Connector) {
            return s3Connector(Output.of(s3Connector));
        }

        /**
         * @param splunkConnector Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder splunkConnector(@Nullable Output<DatastreamSplunkConnectorArgs> splunkConnector) {
            $.splunkConnector = splunkConnector;
            return this;
        }

        /**
         * @param splunkConnector Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder splunkConnector(DatastreamSplunkConnectorArgs splunkConnector) {
            return splunkConnector(Output.of(splunkConnector));
        }

        /**
         * @param streamName The name of the stream.
         * 
         * @return builder
         * 
         */
        public Builder streamName(@Nullable Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        /**
         * @param streamName The name of the stream.
         * 
         * @return builder
         * 
         */
        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        /**
         * @param streamType The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
         * 
         * @return builder
         * 
         */
        public Builder streamType(@Nullable Output<String> streamType) {
            $.streamType = streamType;
            return this;
        }

        /**
         * @param streamType The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
         * 
         * @return builder
         * 
         */
        public Builder streamType(String streamType) {
            return streamType(Output.of(streamType));
        }

        /**
         * @param streamVersionId Identifies the configuration version of the stream
         * 
         * @return builder
         * 
         */
        public Builder streamVersionId(@Nullable Output<Integer> streamVersionId) {
            $.streamVersionId = streamVersionId;
            return this;
        }

        /**
         * @param streamVersionId Identifies the configuration version of the stream
         * 
         * @return builder
         * 
         */
        public Builder streamVersionId(Integer streamVersionId) {
            return streamVersionId(Output.of(streamVersionId));
        }

        /**
         * @param sumologicConnector Specify details about the Sumo Logic connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder sumologicConnector(@Nullable Output<DatastreamSumologicConnectorArgs> sumologicConnector) {
            $.sumologicConnector = sumologicConnector;
            return this;
        }

        /**
         * @param sumologicConnector Specify details about the Sumo Logic connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder sumologicConnector(DatastreamSumologicConnectorArgs sumologicConnector) {
            return sumologicConnector(Output.of(sumologicConnector));
        }

        /**
         * @param templateName The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public DatastreamState build() {
            return $;
        }
    }

}
