// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCloudletsRequestControlMatchRuleMatchRuleMatch {
    /**
     * @return - (Optional) Whether the match is case sensitive.
     * 
     */
    private final @Nullable Boolean caseSensitive;
    /**
     * @return - (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     * 
     */
    private final @Nullable String checkIps;
    /**
     * @return - (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     * 
     */
    private final @Nullable String matchOperator;
    /**
     * @return - (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     * 
     */
    private final @Nullable String matchType;
    /**
     * @return - (Optional) This depends on the `match_type`. If the `match_type` is `hostname`, then `match_value` is the fully qualified domain name, like `www.akamai.com`.
     * 
     */
    private final @Nullable String matchValue;
    /**
     * @return - (Optional) Whether to negate the match.
     * 
     */
    private final @Nullable Boolean negate;
    /**
     * @return - (Optional) If `match_value` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     * 
     */
    private final @Nullable List<GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue> objectMatchValues;

    @CustomType.Constructor
    private GetCloudletsRequestControlMatchRuleMatchRuleMatch(
        @CustomType.Parameter("caseSensitive") @Nullable Boolean caseSensitive,
        @CustomType.Parameter("checkIps") @Nullable String checkIps,
        @CustomType.Parameter("matchOperator") @Nullable String matchOperator,
        @CustomType.Parameter("matchType") @Nullable String matchType,
        @CustomType.Parameter("matchValue") @Nullable String matchValue,
        @CustomType.Parameter("negate") @Nullable Boolean negate,
        @CustomType.Parameter("objectMatchValues") @Nullable List<GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue> objectMatchValues) {
        this.caseSensitive = caseSensitive;
        this.checkIps = checkIps;
        this.matchOperator = matchOperator;
        this.matchType = matchType;
        this.matchValue = matchValue;
        this.negate = negate;
        this.objectMatchValues = objectMatchValues;
    }

    /**
     * @return - (Optional) Whether the match is case sensitive.
     * 
     */
    public Optional<Boolean> caseSensitive() {
        return Optional.ofNullable(this.caseSensitive);
    }
    /**
     * @return - (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     * 
     */
    public Optional<String> checkIps() {
        return Optional.ofNullable(this.checkIps);
    }
    /**
     * @return - (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     * 
     */
    public Optional<String> matchOperator() {
        return Optional.ofNullable(this.matchOperator);
    }
    /**
     * @return - (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     * 
     */
    public Optional<String> matchType() {
        return Optional.ofNullable(this.matchType);
    }
    /**
     * @return - (Optional) This depends on the `match_type`. If the `match_type` is `hostname`, then `match_value` is the fully qualified domain name, like `www.akamai.com`.
     * 
     */
    public Optional<String> matchValue() {
        return Optional.ofNullable(this.matchValue);
    }
    /**
     * @return - (Optional) Whether to negate the match.
     * 
     */
    public Optional<Boolean> negate() {
        return Optional.ofNullable(this.negate);
    }
    /**
     * @return - (Optional) If `match_value` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     * 
     */
    public List<GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue> objectMatchValues() {
        return this.objectMatchValues == null ? List.of() : this.objectMatchValues;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudletsRequestControlMatchRuleMatchRuleMatch defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean caseSensitive;
        private @Nullable String checkIps;
        private @Nullable String matchOperator;
        private @Nullable String matchType;
        private @Nullable String matchValue;
        private @Nullable Boolean negate;
        private @Nullable List<GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue> objectMatchValues;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCloudletsRequestControlMatchRuleMatchRuleMatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.checkIps = defaults.checkIps;
    	      this.matchOperator = defaults.matchOperator;
    	      this.matchType = defaults.matchType;
    	      this.matchValue = defaults.matchValue;
    	      this.negate = defaults.negate;
    	      this.objectMatchValues = defaults.objectMatchValues;
        }

        public Builder caseSensitive(@Nullable Boolean caseSensitive) {
            this.caseSensitive = caseSensitive;
            return this;
        }
        public Builder checkIps(@Nullable String checkIps) {
            this.checkIps = checkIps;
            return this;
        }
        public Builder matchOperator(@Nullable String matchOperator) {
            this.matchOperator = matchOperator;
            return this;
        }
        public Builder matchType(@Nullable String matchType) {
            this.matchType = matchType;
            return this;
        }
        public Builder matchValue(@Nullable String matchValue) {
            this.matchValue = matchValue;
            return this;
        }
        public Builder negate(@Nullable Boolean negate) {
            this.negate = negate;
            return this;
        }
        public Builder objectMatchValues(@Nullable List<GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue> objectMatchValues) {
            this.objectMatchValues = objectMatchValues;
            return this;
        }
        public Builder objectMatchValues(GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue... objectMatchValues) {
            return objectMatchValues(List.of(objectMatchValues));
        }        public GetCloudletsRequestControlMatchRuleMatchRuleMatch build() {
            return new GetCloudletsRequestControlMatchRuleMatchRuleMatch(caseSensitive, checkIps, matchOperator, matchType, matchValue, negate, objectMatchValues);
        }
    }
}
