// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GtmAsmapAssignmentArgs;
import com.pulumi.akamai.inputs.GtmAsmapDefaultDatacenterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmAsmapState extends com.pulumi.resources.ResourceArgs {

    public static final GtmAsmapState Empty = new GtmAsmapState();

    /**
     * Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
     * 
     */
    @Import(name="assignments")
    private @Nullable Output<List<GtmAsmapAssignmentArgs>> assignments;

    /**
     * @return Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
     * 
     */
    public Optional<Output<List<GtmAsmapAssignmentArgs>>> assignments() {
        return Optional.ofNullable(this.assignments);
    }

    /**
     * A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
     * 
     */
    @Import(name="defaultDatacenter")
    private @Nullable Output<GtmAsmapDefaultDatacenterArgs> defaultDatacenter;

    /**
     * @return A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
     * 
     */
    public Optional<Output<GtmAsmapDefaultDatacenterArgs>> defaultDatacenter() {
        return Optional.ofNullable(this.defaultDatacenter);
    }

    /**
     * The GTM Domain name for the AS map.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The GTM Domain name for the AS map.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A boolean that, if `true`, waits for transaction to complete.
     * 
     */
    @Import(name="waitOnComplete")
    private @Nullable Output<Boolean> waitOnComplete;

    /**
     * @return A boolean that, if `true`, waits for transaction to complete.
     * 
     */
    public Optional<Output<Boolean>> waitOnComplete() {
        return Optional.ofNullable(this.waitOnComplete);
    }

    private GtmAsmapState() {}

    private GtmAsmapState(GtmAsmapState $) {
        this.assignments = $.assignments;
        this.defaultDatacenter = $.defaultDatacenter;
        this.domain = $.domain;
        this.name = $.name;
        this.waitOnComplete = $.waitOnComplete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmAsmapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmAsmapState $;

        public Builder() {
            $ = new GtmAsmapState();
        }

        public Builder(GtmAsmapState defaults) {
            $ = new GtmAsmapState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignments Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder assignments(@Nullable Output<List<GtmAsmapAssignmentArgs>> assignments) {
            $.assignments = assignments;
            return this;
        }

        /**
         * @param assignments Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder assignments(List<GtmAsmapAssignmentArgs> assignments) {
            return assignments(Output.of(assignments));
        }

        /**
         * @param assignments Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
         * 
         * @return builder
         * 
         */
        public Builder assignments(GtmAsmapAssignmentArgs... assignments) {
            return assignments(List.of(assignments));
        }

        /**
         * @param defaultDatacenter A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
         * 
         * @return builder
         * 
         */
        public Builder defaultDatacenter(@Nullable Output<GtmAsmapDefaultDatacenterArgs> defaultDatacenter) {
            $.defaultDatacenter = defaultDatacenter;
            return this;
        }

        /**
         * @param defaultDatacenter A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
         * 
         * @return builder
         * 
         */
        public Builder defaultDatacenter(GtmAsmapDefaultDatacenterArgs defaultDatacenter) {
            return defaultDatacenter(Output.of(defaultDatacenter));
        }

        /**
         * @param domain The GTM Domain name for the AS map.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The GTM Domain name for the AS map.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param name A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param waitOnComplete A boolean that, if `true`, waits for transaction to complete.
         * 
         * @return builder
         * 
         */
        public Builder waitOnComplete(@Nullable Output<Boolean> waitOnComplete) {
            $.waitOnComplete = waitOnComplete;
            return this;
        }

        /**
         * @param waitOnComplete A boolean that, if `true`, waits for transaction to complete.
         * 
         * @return builder
         * 
         */
        public Builder waitOnComplete(Boolean waitOnComplete) {
            return waitOnComplete(Output.of(waitOnComplete));
        }

        public GtmAsmapState build() {
            return $;
        }
    }

}
