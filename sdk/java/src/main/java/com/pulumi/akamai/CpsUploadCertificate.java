// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.CpsUploadCertificateArgs;
import com.pulumi.akamai.Utilities;
import com.pulumi.akamai.inputs.CpsUploadCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use the `akamai.CpsUploadCertificate` resource to upload a third-party certificate and any other files that your CA sent you into CPS. The certificate and trust chain that your CA gives you must be in PEM format before you can use it in CPS. A PEM certificate is a base64 encoded ASCII file and contains `----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` statements.
 * 
 * If your CA provides you with a certificate that is not in PEM format, you can convert it to PEM format using an SSL converter.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.akamai.CpsUploadCertificate;
 * import com.pulumi.akamai.CpsUploadCertificateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var uploadCert = new CpsUploadCertificate(&#34;uploadCert&#34;, CpsUploadCertificateArgs.builder()        
 *             .enrollmentId(12345)
 *             .certificateEcdsaPem(example_cert_ecdsa.pem())
 *             .trustChainEcdsaPem(example_trust_chain_ecdsa.pem())
 *             .acknowledgePostVerificationWarnings(true)
 *             .acknowledgeChangeManagement(true)
 *             .waitForDeployment(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="akamai:index/cpsUploadCertificate:CpsUploadCertificate")
public class CpsUploadCertificate extends com.pulumi.resources.CustomResource {
    /**
     * Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     * 
     */
    @Export(name="acknowledgeChangeManagement", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> acknowledgeChangeManagement;

    /**
     * @return Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     * 
     */
    public Output<Optional<Boolean>> acknowledgeChangeManagement() {
        return Codegen.optional(this.acknowledgeChangeManagement);
    }
    /**
     * Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
     * 
     */
    @Export(name="acknowledgePostVerificationWarnings", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> acknowledgePostVerificationWarnings;

    /**
     * @return Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
     * 
     */
    public Output<Optional<Boolean>> acknowledgePostVerificationWarnings() {
        return Codegen.optional(this.acknowledgePostVerificationWarnings);
    }
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     * 
     */
    @Export(name="autoApproveWarnings", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> autoApproveWarnings;

    /**
     * @return The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     * 
     */
    public Output<Optional<List<String>>> autoApproveWarnings() {
        return Codegen.optional(this.autoApproveWarnings);
    }
    /**
     * The ECDSA certificate in PEM format you want to upload.
     * 
     */
    @Export(name="certificateEcdsaPem", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateEcdsaPem;

    /**
     * @return The ECDSA certificate in PEM format you want to upload.
     * 
     */
    public Output<Optional<String>> certificateEcdsaPem() {
        return Codegen.optional(this.certificateEcdsaPem);
    }
    /**
     * The RSA certificate in PEM format you want to upload.
     * 
     */
    @Export(name="certificateRsaPem", type=String.class, parameters={})
    private Output</* @Nullable */ String> certificateRsaPem;

    /**
     * @return The RSA certificate in PEM format you want to upload.
     * 
     */
    public Output<Optional<String>> certificateRsaPem() {
        return Codegen.optional(this.certificateRsaPem);
    }
    /**
     * Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     * 
     */
    @Export(name="enrollmentId", type=Integer.class, parameters={})
    private Output<Integer> enrollmentId;

    /**
     * @return Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     * 
     */
    public Output<Integer> enrollmentId() {
        return this.enrollmentId;
    }
    /**
     * The trust chain in PEM format for the ECDSA certificate you want to upload.
     * 
     */
    @Export(name="trustChainEcdsaPem", type=String.class, parameters={})
    private Output</* @Nullable */ String> trustChainEcdsaPem;

    /**
     * @return The trust chain in PEM format for the ECDSA certificate you want to upload.
     * 
     */
    public Output<Optional<String>> trustChainEcdsaPem() {
        return Codegen.optional(this.trustChainEcdsaPem);
    }
    /**
     * The trust chain in PEM format for the RSA certificate you want to upload.
     * 
     */
    @Export(name="trustChainRsaPem", type=String.class, parameters={})
    private Output</* @Nullable */ String> trustChainRsaPem;

    /**
     * @return The trust chain in PEM format for the RSA certificate you want to upload.
     * 
     */
    public Output<Optional<String>> trustChainRsaPem() {
        return Codegen.optional(this.trustChainRsaPem);
    }
    /**
     * Used to distinguish whether there are unacknowledged warnings for a certificate
     * 
     */
    @Export(name="unacknowledgedWarnings", type=Boolean.class, parameters={})
    private Output<Boolean> unacknowledgedWarnings;

    /**
     * @return Used to distinguish whether there are unacknowledged warnings for a certificate
     * 
     */
    public Output<Boolean> unacknowledgedWarnings() {
        return this.unacknowledgedWarnings;
    }
    /**
     * Boolean. Enter `true` to wait for certificate to be deployed.
     * 
     */
    @Export(name="waitForDeployment", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> waitForDeployment;

    /**
     * @return Boolean. Enter `true` to wait for certificate to be deployed.
     * 
     */
    public Output<Optional<Boolean>> waitForDeployment() {
        return Codegen.optional(this.waitForDeployment);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CpsUploadCertificate(String name) {
        this(name, CpsUploadCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CpsUploadCertificate(String name, CpsUploadCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CpsUploadCertificate(String name, CpsUploadCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, args == null ? CpsUploadCertificateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CpsUploadCertificate(String name, Output<String> id, @Nullable CpsUploadCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CpsUploadCertificate get(String name, Output<String> id, @Nullable CpsUploadCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CpsUploadCertificate(name, id, state, options);
    }
}
