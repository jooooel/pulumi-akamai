// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetPropertyRulesTemplateTemplate extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesTemplateTemplate Empty = new GetPropertyRulesTemplateTemplate();

    /**
     * The content of the JSON template as a string.
     * 
     */
    @Import(name="templateData", required=true)
    private String templateData;

    /**
     * @return The content of the JSON template as a string.
     * 
     */
    public String templateData() {
        return this.templateData;
    }

    /**
     * The absolute or relative path to the directory containing the template files. The path must end with `property-snippets`, the required directory name. For example: `template_dir = abspath(&#34;${path.root}/property-snippets/&#34;)`, or `template_dir = &#34;property-snippets/&#34;`.
     * 
     */
    @Import(name="templateDir", required=true)
    private String templateDir;

    /**
     * @return The absolute or relative path to the directory containing the template files. The path must end with `property-snippets`, the required directory name. For example: `template_dir = abspath(&#34;${path.root}/property-snippets/&#34;)`, or `template_dir = &#34;property-snippets/&#34;`.
     * 
     */
    public String templateDir() {
        return this.templateDir;
    }

    private GetPropertyRulesTemplateTemplate() {}

    private GetPropertyRulesTemplateTemplate(GetPropertyRulesTemplateTemplate $) {
        this.templateData = $.templateData;
        this.templateDir = $.templateDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesTemplateTemplate defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesTemplateTemplate $;

        public Builder() {
            $ = new GetPropertyRulesTemplateTemplate();
        }

        public Builder(GetPropertyRulesTemplateTemplate defaults) {
            $ = new GetPropertyRulesTemplateTemplate(Objects.requireNonNull(defaults));
        }

        /**
         * @param templateData The content of the JSON template as a string.
         * 
         * @return builder
         * 
         */
        public Builder templateData(String templateData) {
            $.templateData = templateData;
            return this;
        }

        /**
         * @param templateDir The absolute or relative path to the directory containing the template files. The path must end with `property-snippets`, the required directory name. For example: `template_dir = abspath(&#34;${path.root}/property-snippets/&#34;)`, or `template_dir = &#34;property-snippets/&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder templateDir(String templateDir) {
            $.templateDir = templateDir;
            return this;
        }

        public GetPropertyRulesTemplateTemplate build() {
            $.templateData = Objects.requireNonNull($.templateData, "expected parameter 'templateData' to be non-null");
            $.templateDir = Objects.requireNonNull($.templateDir, "expected parameter 'templateDir' to be non-null");
            return $;
        }
    }

}
