// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetAppSecHostnameCoverageOverlappingArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppSecHostnameCoverageOverlappingArgs Empty = new GetAppSecHostnameCoverageOverlappingArgs();

    /**
     * . Unique identifier of the security configuration you want to return information for.
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return . Unique identifier of the security configuration you want to return information for.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * . Name of the host you want to return information for.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return . Name of the host you want to return information for.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    private GetAppSecHostnameCoverageOverlappingArgs() {}

    private GetAppSecHostnameCoverageOverlappingArgs(GetAppSecHostnameCoverageOverlappingArgs $) {
        this.configId = $.configId;
        this.hostname = $.hostname;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppSecHostnameCoverageOverlappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppSecHostnameCoverageOverlappingArgs $;

        public Builder() {
            $ = new GetAppSecHostnameCoverageOverlappingArgs();
        }

        public Builder(GetAppSecHostnameCoverageOverlappingArgs defaults) {
            $ = new GetAppSecHostnameCoverageOverlappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId . Unique identifier of the security configuration you want to return information for.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId . Unique identifier of the security configuration you want to return information for.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param hostname . Name of the host you want to return information for.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname . Name of the host you want to return information for.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public GetAppSecHostnameCoverageOverlappingArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            $.hostname = Objects.requireNonNull($.hostname, "expected parameter 'hostname' to be non-null");
            return $;
        }
    }

}
