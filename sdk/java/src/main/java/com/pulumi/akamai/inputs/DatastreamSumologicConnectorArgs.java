// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatastreamSumologicConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatastreamSumologicConnectorArgs Empty = new DatastreamSumologicConnectorArgs();

    /**
     * **Secret**. The unique HTTP collector code of your Sumo Logic `endpoint`.
     * 
     */
    @Import(name="collectorCode", required=true)
    private Output<String> collectorCode;

    /**
     * @return **Secret**. The unique HTTP collector code of your Sumo Logic `endpoint`.
     * 
     */
    public Output<String> collectorCode() {
        return this.collectorCode;
    }

    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    @Import(name="compressLogs")
    private @Nullable Output<Boolean> compressLogs;

    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }

    @Import(name="connectorId")
    private @Nullable Output<Integer> connectorId;

    public Optional<Output<Integer>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * The name of the connector.
     * 
     */
    @Import(name="connectorName", required=true)
    private Output<String> connectorName;

    /**
     * @return The name of the connector.
     * 
     */
    public Output<String> connectorName() {
        return this.connectorName;
    }

    /**
     * The Sumo Logic collection endpoint where you want to send your logs. You should follow the `https://&lt;SumoEndpoint&gt;/receiver/v1/http` format and pass the collector code in the `collectorCode` argument.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The Sumo Logic collection endpoint where you want to send your logs. You should follow the `https://&lt;SumoEndpoint&gt;/receiver/v1/http` format and pass the collector code in the `collectorCode` argument.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    private DatastreamSumologicConnectorArgs() {}

    private DatastreamSumologicConnectorArgs(DatastreamSumologicConnectorArgs $) {
        this.collectorCode = $.collectorCode;
        this.compressLogs = $.compressLogs;
        this.connectorId = $.connectorId;
        this.connectorName = $.connectorName;
        this.endpoint = $.endpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastreamSumologicConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastreamSumologicConnectorArgs $;

        public Builder() {
            $ = new DatastreamSumologicConnectorArgs();
        }

        public Builder(DatastreamSumologicConnectorArgs defaults) {
            $ = new DatastreamSumologicConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectorCode **Secret**. The unique HTTP collector code of your Sumo Logic `endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder collectorCode(Output<String> collectorCode) {
            $.collectorCode = collectorCode;
            return this;
        }

        /**
         * @param collectorCode **Secret**. The unique HTTP collector code of your Sumo Logic `endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder collectorCode(String collectorCode) {
            return collectorCode(Output.of(collectorCode));
        }

        /**
         * @param compressLogs Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder compressLogs(@Nullable Output<Boolean> compressLogs) {
            $.compressLogs = compressLogs;
            return this;
        }

        /**
         * @param compressLogs Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder compressLogs(Boolean compressLogs) {
            return compressLogs(Output.of(compressLogs));
        }

        public Builder connectorId(@Nullable Output<Integer> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        public Builder connectorId(Integer connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param connectorName The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(Output<String> connectorName) {
            $.connectorName = connectorName;
            return this;
        }

        /**
         * @param connectorName The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(String connectorName) {
            return connectorName(Output.of(connectorName));
        }

        /**
         * @param endpoint The Sumo Logic collection endpoint where you want to send your logs. You should follow the `https://&lt;SumoEndpoint&gt;/receiver/v1/http` format and pass the collector code in the `collectorCode` argument.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The Sumo Logic collection endpoint where you want to send your logs. You should follow the `https://&lt;SumoEndpoint&gt;/receiver/v1/http` format and pass the collector code in the `collectorCode` argument.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public DatastreamSumologicConnectorArgs build() {
            $.collectorCode = Objects.requireNonNull($.collectorCode, "expected parameter 'collectorCode' to be non-null");
            $.connectorName = Objects.requireNonNull($.connectorName, "expected parameter 'connectorName' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            return $;
        }
    }

}
