// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.trafficmanagement;

import com.pulumi.akamai.Utilities;
import com.pulumi.akamai.trafficmanagement.GtmCidrmapArgs;
import com.pulumi.akamai.trafficmanagement.inputs.GtmCidrmapState;
import com.pulumi.akamai.trafficmanagement.outputs.GtmCidrmapAssignment;
import com.pulumi.akamai.trafficmanagement.outputs.GtmCidrmapDefaultDatacenter;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use the `akamai.GtmCidrmap` resource to create, configure, and import a GTM Classless Inter-Domain Routing (CIDR) map. CIDR mapping uses the IP addresses of the requesting name server to provide IP-specific CNAME entries. CNAMEs let you direct internal users to a specific environment or direct them to the origin. This lets you provide different responses to an internal corporate DNS infrastructure, such as internal test environments and another answer for all other name servers (`default_datacenter`).
 * 
 *  CIDR maps split the Internet into multiple CIDR block zones. Properties that use a map can specify a handout CNAME for each zone on the property&#39;s editing page. To configure a property for CIDR mapping, your domain needs at least one CIDR map defined.
 * 
 * &gt; **Note** Import requires an ID with this format: `existing_domain_name`:`existing_map_name`.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.akamai.GtmCidrmap;
 * import com.pulumi.akamai.GtmCidrmapArgs;
 * import com.pulumi.akamai.inputs.GtmCidrmapDefaultDatacenterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demoCidrmap = new GtmCidrmap(&#34;demoCidrmap&#34;, GtmCidrmapArgs.builder()        
 *             .defaultDatacenter(GtmCidrmapDefaultDatacenterArgs.builder()
 *                 .datacenterId(5400)
 *                 .nickname(&#34;All Other CIDR Blocks&#34;)
 *                 .build())
 *             .domain(&#34;demo_domain.akadns.net&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Schema reference
 * 
 * You can download the GTM CIDR Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#cidrmap) page.
 * 
 * @deprecated
 * akamai.trafficmanagement.GtmCidrmap has been deprecated in favor of akamai.GtmCidrmap
 * 
 */
@Deprecated /* akamai.trafficmanagement.GtmCidrmap has been deprecated in favor of akamai.GtmCidrmap */
@ResourceType(type="akamai:trafficmanagement/gtmCidrmap:GtmCidrmap")
public class GtmCidrmap extends com.pulumi.resources.CustomResource {
    /**
     * Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
     * 
     */
    @Export(name="assignments", type=List.class, parameters={GtmCidrmapAssignment.class})
    private Output</* @Nullable */ List<GtmCidrmapAssignment>> assignments;

    /**
     * @return Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
     * 
     */
    public Output<Optional<List<GtmCidrmapAssignment>>> assignments() {
        return Codegen.optional(this.assignments);
    }
    /**
     * A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
     * 
     */
    @Export(name="defaultDatacenter", type=GtmCidrmapDefaultDatacenter.class, parameters={})
    private Output<GtmCidrmapDefaultDatacenter> defaultDatacenter;

    /**
     * @return A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
     * 
     */
    public Output<GtmCidrmapDefaultDatacenter> defaultDatacenter() {
        return this.defaultDatacenter;
    }
    /**
     * GTM Domain name for the AS Map.
     * 
     */
    @Export(name="domain", type=String.class, parameters={})
    private Output<String> domain;

    /**
     * @return GTM Domain name for the AS Map.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * A descriptive label for the CIDR map, up to 255 characters.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A descriptive label for the CIDR map, up to 255 characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A boolean that, if set to `true`, waits for transaction to complete.
     * 
     */
    @Export(name="waitOnComplete", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> waitOnComplete;

    /**
     * @return A boolean that, if set to `true`, waits for transaction to complete.
     * 
     */
    public Output<Optional<Boolean>> waitOnComplete() {
        return Codegen.optional(this.waitOnComplete);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GtmCidrmap(String name) {
        this(name, GtmCidrmapArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GtmCidrmap(String name, GtmCidrmapArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GtmCidrmap(String name, GtmCidrmapArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap", name, args == null ? GtmCidrmapArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GtmCidrmap(String name, Output<String> id, @Nullable GtmCidrmapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GtmCidrmap get(String name, Output<String> id, @Nullable GtmCidrmapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GtmCidrmap(name, id, state, options);
    }
}
