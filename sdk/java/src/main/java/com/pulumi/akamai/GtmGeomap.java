// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.GtmGeomapArgs;
import com.pulumi.akamai.Utilities;
import com.pulumi.akamai.inputs.GtmGeomapState;
import com.pulumi.akamai.outputs.GtmGeomapAssignment;
import com.pulumi.akamai.outputs.GtmGeomapDefaultDatacenter;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use the `akamai.GtmGeomap` resource to create, configure, and import a GTM Geographic map. Geographic mapping lets you configure a property that returns a CNAME based on the geographic location of the request.
 * 
 * You can reuse maps for multiple properties or create new ones. To configure a property for geographic mapping, you need to define at least one geographic map for your domain. Each map needs at least two definitions. For example, you can have one definition that maps a set of countries to a specific data center, and a second definition that routes all other traffic.
 * 
 * &gt; **Note** Import requires an ID with this format: `existing_domain_name`:`existing_map_name`.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.akamai.GtmGeomap;
 * import com.pulumi.akamai.GtmGeomapArgs;
 * import com.pulumi.akamai.inputs.GtmGeomapDefaultDatacenterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demoGeomap = new GtmGeomap(&#34;demoGeomap&#34;, GtmGeomapArgs.builder()        
 *             .defaultDatacenter(GtmGeomapDefaultDatacenterArgs.builder()
 *                 .datacenterId(5400)
 *                 .nickname(&#34;All Others&#34;)
 *                 .build())
 *             .domain(&#34;demo_domain.akadns.net&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Schema reference
 * 
 * You can download the GTM Geographic Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#geographicmap) page.
 * 
 */
@ResourceType(type="akamai:index/gtmGeomap:GtmGeomap")
public class GtmGeomap extends com.pulumi.resources.CustomResource {
    /**
     * Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
     * 
     */
    @Export(name="assignments", type=List.class, parameters={GtmGeomapAssignment.class})
    private Output</* @Nullable */ List<GtmGeomapAssignment>> assignments;

    /**
     * @return Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
     * 
     */
    public Output<Optional<List<GtmGeomapAssignment>>> assignments() {
        return Codegen.optional(this.assignments);
    }
    /**
     * A placeholder for all other geographic zones. Requires these additional arguments:
     * 
     */
    @Export(name="defaultDatacenter", type=GtmGeomapDefaultDatacenter.class, parameters={})
    private Output<GtmGeomapDefaultDatacenter> defaultDatacenter;

    /**
     * @return A placeholder for all other geographic zones. Requires these additional arguments:
     * 
     */
    public Output<GtmGeomapDefaultDatacenter> defaultDatacenter() {
        return this.defaultDatacenter;
    }
    /**
     * GTM Domain name for the Geographic Map.
     * 
     */
    @Export(name="domain", type=String.class, parameters={})
    private Output<String> domain;

    /**
     * @return GTM Domain name for the Geographic Map.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * A descriptive label for the Geographic map.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A descriptive label for the Geographic map.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     * 
     */
    @Export(name="waitOnComplete", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> waitOnComplete;

    /**
     * @return A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     * 
     */
    public Output<Optional<Boolean>> waitOnComplete() {
        return Codegen.optional(this.waitOnComplete);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GtmGeomap(String name) {
        this(name, GtmGeomapArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GtmGeomap(String name, GtmGeomapArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GtmGeomap(String name, GtmGeomapArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:index/gtmGeomap:GtmGeomap", name, args == null ? GtmGeomapArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GtmGeomap(String name, Output<String> id, @Nullable GtmGeomapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:index/gtmGeomap:GtmGeomap", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("akamai:trafficmanagement/gtmGeomap:GtmGeomap").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GtmGeomap get(String name, Output<String> id, @Nullable GtmGeomapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GtmGeomap(name, id, state, options);
    }
}
