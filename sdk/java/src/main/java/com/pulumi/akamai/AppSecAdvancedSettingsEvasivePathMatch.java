// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.AppSecAdvancedSettingsEvasivePathMatchArgs;
import com.pulumi.akamai.Utilities;
import com.pulumi.akamai.inputs.AppSecAdvancedSettingsEvasivePathMatchState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * **Scopes**: Security configuration; security policy
 * 
 * The `resource_akamai_appsec_advanced_settings_evasive_path_match` resource allows you to enable, disable, or update the evasive path match setting for a configuration.
 * This setting determines whether fuzzy matching is used to make URL matching more inclusive.
 * This operation applies at the configuration level, and therefore applies to all policies within a configuration.
 * You may override this setting for a particular policy by specifying the policy using the security_policy_id parameter.
 * 
 * **Related API Endpoints**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/advanced-settings/evasive-path-match](https://techdocs.akamai.com/application-security/reference/put-evasive-path-match)
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.akamai.AkamaiFunctions;
 * import com.pulumi.akamai.inputs.GetAppSecConfigurationArgs;
 * import com.pulumi.akamai.AppSecAdvancedSettingsEvasivePathMatch;
 * import com.pulumi.akamai.AppSecAdvancedSettingsEvasivePathMatchArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var configuration = AkamaiFunctions.getAppSecConfiguration(GetAppSecConfigurationArgs.builder()
 *             .name(var_.security_configuration())
 *             .build());
 * 
 *         var configEvasivePathMatch = new AppSecAdvancedSettingsEvasivePathMatch(&#34;configEvasivePathMatch&#34;, AppSecAdvancedSettingsEvasivePathMatchArgs.builder()        
 *             .configId(configuration.applyValue(getAppSecConfigurationResult -&gt; getAppSecConfigurationResult.configId()))
 *             .enablePathMatch(true)
 *             .build());
 * 
 *         var policyOverride = new AppSecAdvancedSettingsEvasivePathMatch(&#34;policyOverride&#34;, AppSecAdvancedSettingsEvasivePathMatchArgs.builder()        
 *             .configId(configuration.applyValue(getAppSecConfigurationResult -&gt; getAppSecConfigurationResult.configId()))
 *             .securityPolicyId(var_.security_policy_id())
 *             .enablePathMatch(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch")
public class AppSecAdvancedSettingsEvasivePathMatch extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the security configuration to use.
     * 
     */
    @Export(name="configId", type=Integer.class, parameters={})
    private Output<Integer> configId;

    /**
     * @return The ID of the security configuration to use.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }
    /**
     * Whether to enable path match.
     * 
     */
    @Export(name="enablePathMatch", type=Boolean.class, parameters={})
    private Output<Boolean> enablePathMatch;

    /**
     * @return Whether to enable path match.
     * 
     */
    public Output<Boolean> enablePathMatch() {
        return this.enablePathMatch;
    }
    /**
     * The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
     * 
     */
    @Export(name="securityPolicyId", type=String.class, parameters={})
    private Output</* @Nullable */ String> securityPolicyId;

    /**
     * @return The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
     * 
     */
    public Output<Optional<String>> securityPolicyId() {
        return Codegen.optional(this.securityPolicyId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppSecAdvancedSettingsEvasivePathMatch(String name) {
        this(name, AppSecAdvancedSettingsEvasivePathMatchArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppSecAdvancedSettingsEvasivePathMatch(String name, AppSecAdvancedSettingsEvasivePathMatchArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppSecAdvancedSettingsEvasivePathMatch(String name, AppSecAdvancedSettingsEvasivePathMatchArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch", name, args == null ? AppSecAdvancedSettingsEvasivePathMatchArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AppSecAdvancedSettingsEvasivePathMatch(String name, Output<String> id, @Nullable AppSecAdvancedSettingsEvasivePathMatchState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppSecAdvancedSettingsEvasivePathMatch get(String name, Output<String> id, @Nullable AppSecAdvancedSettingsEvasivePathMatchState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AppSecAdvancedSettingsEvasivePathMatch(name, id, state, options);
    }
}
