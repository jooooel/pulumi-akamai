// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamSplunkConnector {
    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    private final @Nullable Boolean compressLogs;
    private final @Nullable Integer connectorId;
    /**
     * @return The name of the connector.
     * 
     */
    private final String connectorName;
    /**
     * @return - (Required) **Secret**. The Event Collector token associated with your Splunk account. See [View usage of Event Collector token in Splunk](https://docs.splunk.com/Documentation/Splunk/8.0.3/Data/UsetheHTTPEventCollector).
     * 
     */
    private final String eventCollectorToken;
    /**
     * @return Enter the secure URL where you want to send and store your logs.
     * 
     */
    private final String url;

    @CustomType.Constructor
    private DatastreamSplunkConnector(
        @CustomType.Parameter("compressLogs") @Nullable Boolean compressLogs,
        @CustomType.Parameter("connectorId") @Nullable Integer connectorId,
        @CustomType.Parameter("connectorName") String connectorName,
        @CustomType.Parameter("eventCollectorToken") String eventCollectorToken,
        @CustomType.Parameter("url") String url) {
        this.compressLogs = compressLogs;
        this.connectorId = connectorId;
        this.connectorName = connectorName;
        this.eventCollectorToken = eventCollectorToken;
        this.url = url;
    }

    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    public Optional<Boolean> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }
    public Optional<Integer> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }
    /**
     * @return The name of the connector.
     * 
     */
    public String connectorName() {
        return this.connectorName;
    }
    /**
     * @return - (Required) **Secret**. The Event Collector token associated with your Splunk account. See [View usage of Event Collector token in Splunk](https://docs.splunk.com/Documentation/Splunk/8.0.3/Data/UsetheHTTPEventCollector).
     * 
     */
    public String eventCollectorToken() {
        return this.eventCollectorToken;
    }
    /**
     * @return Enter the secure URL where you want to send and store your logs.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamSplunkConnector defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean compressLogs;
        private @Nullable Integer connectorId;
        private String connectorName;
        private String eventCollectorToken;
        private String url;

        public Builder() {
    	      // Empty
        }

        public Builder(DatastreamSplunkConnector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compressLogs = defaults.compressLogs;
    	      this.connectorId = defaults.connectorId;
    	      this.connectorName = defaults.connectorName;
    	      this.eventCollectorToken = defaults.eventCollectorToken;
    	      this.url = defaults.url;
        }

        public Builder compressLogs(@Nullable Boolean compressLogs) {
            this.compressLogs = compressLogs;
            return this;
        }
        public Builder connectorId(@Nullable Integer connectorId) {
            this.connectorId = connectorId;
            return this;
        }
        public Builder connectorName(String connectorName) {
            this.connectorName = Objects.requireNonNull(connectorName);
            return this;
        }
        public Builder eventCollectorToken(String eventCollectorToken) {
            this.eventCollectorToken = Objects.requireNonNull(eventCollectorToken);
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }        public DatastreamSplunkConnector build() {
            return new DatastreamSplunkConnector(compressLogs, connectorId, connectorName, eventCollectorToken, url);
        }
    }
}
