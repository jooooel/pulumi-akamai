// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppSecTuningRecommendationsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppSecTuningRecommendationsPlainArgs Empty = new GetAppSecTuningRecommendationsPlainArgs();

    /**
     * . Unique name of the attack group you want tuning recommendations for. If not included, recommendations are returned for all attack groups.
     * 
     */
    @Import(name="attackGroup")
    private @Nullable String attackGroup;

    /**
     * @return . Unique name of the attack group you want tuning recommendations for. If not included, recommendations are returned for all attack groups.
     * 
     */
    public Optional<String> attackGroup() {
        return Optional.ofNullable(this.attackGroup);
    }

    /**
     * . Unique identifier of the security configuration you want tuning recommendations for.
     * 
     */
    @Import(name="configId", required=true)
    private Integer configId;

    /**
     * @return . Unique identifier of the security configuration you want tuning recommendations for.
     * 
     */
    public Integer configId() {
        return this.configId;
    }

    /**
     * . Type of ruleset used by the security configuration you want tuning recommendations for. Supported values are `active` and `evaluation`. Defaults to `active`.
     * 
     */
    @Import(name="rulesetType")
    private @Nullable String rulesetType;

    /**
     * @return . Type of ruleset used by the security configuration you want tuning recommendations for. Supported values are `active` and `evaluation`. Defaults to `active`.
     * 
     */
    public Optional<String> rulesetType() {
        return Optional.ofNullable(this.rulesetType);
    }

    /**
     * . Unique identifier of the security policy you want tuning recommendations for.
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable String securityPolicyId;

    /**
     * @return . Unique identifier of the security policy you want tuning recommendations for.
     * 
     */
    public Optional<String> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    private GetAppSecTuningRecommendationsPlainArgs() {}

    private GetAppSecTuningRecommendationsPlainArgs(GetAppSecTuningRecommendationsPlainArgs $) {
        this.attackGroup = $.attackGroup;
        this.configId = $.configId;
        this.rulesetType = $.rulesetType;
        this.securityPolicyId = $.securityPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppSecTuningRecommendationsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppSecTuningRecommendationsPlainArgs $;

        public Builder() {
            $ = new GetAppSecTuningRecommendationsPlainArgs();
        }

        public Builder(GetAppSecTuningRecommendationsPlainArgs defaults) {
            $ = new GetAppSecTuningRecommendationsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attackGroup . Unique name of the attack group you want tuning recommendations for. If not included, recommendations are returned for all attack groups.
         * 
         * @return builder
         * 
         */
        public Builder attackGroup(@Nullable String attackGroup) {
            $.attackGroup = attackGroup;
            return this;
        }

        /**
         * @param configId . Unique identifier of the security configuration you want tuning recommendations for.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param rulesetType . Type of ruleset used by the security configuration you want tuning recommendations for. Supported values are `active` and `evaluation`. Defaults to `active`.
         * 
         * @return builder
         * 
         */
        public Builder rulesetType(@Nullable String rulesetType) {
            $.rulesetType = rulesetType;
            return this;
        }

        /**
         * @param securityPolicyId . Unique identifier of the security policy you want tuning recommendations for.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable String securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        public GetAppSecTuningRecommendationsPlainArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            return $;
        }
    }

}
