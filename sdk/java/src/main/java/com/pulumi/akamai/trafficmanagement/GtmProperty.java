// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.trafficmanagement;

import com.pulumi.akamai.Utilities;
import com.pulumi.akamai.trafficmanagement.GtmPropertyArgs;
import com.pulumi.akamai.trafficmanagement.inputs.GtmPropertyState;
import com.pulumi.akamai.trafficmanagement.outputs.GtmPropertyLivenessTest;
import com.pulumi.akamai.trafficmanagement.outputs.GtmPropertyStaticRrSet;
import com.pulumi.akamai.trafficmanagement.outputs.GtmPropertyTrafficTarget;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use the `akamai.GtmProperty` resource to create, configure and import a GTM property, a set of IP addresses or CNAMEs that GTM provides in response to DNS queries based on a set of rules.
 * 
 * &gt; **Note** Import requires an ID with this format: `existing_domain_name`:`existing_property_name`.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.akamai.GtmProperty;
 * import com.pulumi.akamai.GtmPropertyArgs;
 * import com.pulumi.akamai.inputs.GtmPropertyTrafficTargetArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demoProperty = new GtmProperty(&#34;demoProperty&#34;, GtmPropertyArgs.builder()        
 *             .domain(&#34;demo_domain.akadns.net&#34;)
 *             .handoutLimit(5)
 *             .handoutMode(&#34;normal&#34;)
 *             .scoreAggregationType(&#34;median&#34;)
 *             .trafficTargets(GtmPropertyTrafficTargetArgs.builder()
 *                 .datacenterId(3131)
 *                 .build())
 *             .type(&#34;weighted-round-robin&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Schema reference
 * 
 * You can download the GTM Property backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#property) page.
 * 
 * @deprecated
 * akamai.trafficmanagement.GtmProperty has been deprecated in favor of akamai.GtmProperty
 * 
 */
@Deprecated /* akamai.trafficmanagement.GtmProperty has been deprecated in favor of akamai.GtmProperty */
@ResourceType(type="akamai:trafficmanagement/gtmProperty:GtmProperty")
public class GtmProperty extends com.pulumi.resources.CustomResource {
    /**
     * Specifies a backup CNAME. If GTM declares that all of the servers configured for your property are down, the backup CNAME is handed out. If a backup CNAME is set, do not set a backup IP.
     * 
     */
    @Export(name="backupCname", type=String.class, parameters={})
    private Output</* @Nullable */ String> backupCname;

    /**
     * @return Specifies a backup CNAME. If GTM declares that all of the servers configured for your property are down, the backup CNAME is handed out. If a backup CNAME is set, do not set a backup IP.
     * 
     */
    public Output<Optional<String>> backupCname() {
        return Codegen.optional(this.backupCname);
    }
    /**
     * Specifies a backup IP. When GTM declares that all of the targets are down, the backup IP is handed out. If a backup IP is set, do not set a backup CNAME.
     * 
     */
    @Export(name="backupIp", type=String.class, parameters={})
    private Output</* @Nullable */ String> backupIp;

    /**
     * @return Specifies a backup IP. When GTM declares that all of the targets are down, the backup IP is handed out. If a backup IP is set, do not set a backup CNAME.
     * 
     */
    public Output<Optional<String>> backupIp() {
        return Codegen.optional(this.backupIp);
    }
    /**
     * A boolean that indicates whether download score based load balancing is enabled.
     * 
     */
    @Export(name="balanceByDownloadScore", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> balanceByDownloadScore;

    /**
     * @return A boolean that indicates whether download score based load balancing is enabled.
     * 
     */
    public Output<Optional<Boolean>> balanceByDownloadScore() {
        return Codegen.optional(this.balanceByDownloadScore);
    }
    /**
     * Indicates the fully qualified name aliased to a particular property.
     * 
     */
    @Export(name="cname", type=String.class, parameters={})
    private Output</* @Nullable */ String> cname;

    /**
     * @return Indicates the fully qualified name aliased to a particular property.
     * 
     */
    public Output<Optional<String>> cname() {
        return Codegen.optional(this.cname);
    }
    /**
     * A descriptive note about changes to the domain. The maximum is 4000 characters.
     * 
     */
    @Export(name="comments", type=String.class, parameters={})
    private Output</* @Nullable */ String> comments;

    /**
     * @return A descriptive note about changes to the domain. The maximum is 4000 characters.
     * 
     */
    public Output<Optional<String>> comments() {
        return Codegen.optional(this.comments);
    }
    /**
     * DNS name for the GTM Domain set that includes this Property.
     * 
     */
    @Export(name="domain", type=String.class, parameters={})
    private Output<String> domain;

    /**
     * @return DNS name for the GTM Domain set that includes this Property.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
     * 
     */
    @Export(name="dynamicTtl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> dynamicTtl;

    /**
     * @return Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
     * 
     */
    public Output<Optional<Integer>> dynamicTtl() {
        return Codegen.optional(this.dynamicTtl);
    }
    /**
     * Specifies the failback delay in seconds.
     * 
     */
    @Export(name="failbackDelay", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> failbackDelay;

    /**
     * @return Specifies the failback delay in seconds.
     * 
     */
    public Output<Optional<Integer>> failbackDelay() {
        return Codegen.optional(this.failbackDelay);
    }
    /**
     * Specifies the failover delay in seconds.
     * 
     */
    @Export(name="failoverDelay", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> failoverDelay;

    /**
     * @return Specifies the failover delay in seconds.
     * 
     */
    public Output<Optional<Integer>> failoverDelay() {
        return Codegen.optional(this.failoverDelay);
    }
    /**
     * Use load estimates from Akamai Ghost utilization messages.
     * 
     */
    @Export(name="ghostDemandReporting", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ghostDemandReporting;

    /**
     * @return Use load estimates from Akamai Ghost utilization messages.
     * 
     */
    public Output<Optional<Boolean>> ghostDemandReporting() {
        return Codegen.optional(this.ghostDemandReporting);
    }
    /**
     * Indicates the limit for the number of live IPs handed out to a DNS request.
     * 
     */
    @Export(name="handoutLimit", type=Integer.class, parameters={})
    private Output<Integer> handoutLimit;

    /**
     * @return Indicates the limit for the number of live IPs handed out to a DNS request.
     * 
     */
    public Output<Integer> handoutLimit() {
        return this.handoutLimit;
    }
    /**
     * Specifies how IPs are returned when more than one IP is alive and available.
     * 
     */
    @Export(name="handoutMode", type=String.class, parameters={})
    private Output<String> handoutMode;

    /**
     * @return Specifies how IPs are returned when more than one IP is alive and available.
     * 
     */
    public Output<String> handoutMode() {
        return this.handoutMode;
    }
    /**
     * Defines the absolute limit beyond which IPs are declared unhealthy.
     * 
     */
    @Export(name="healthMax", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> healthMax;

    /**
     * @return Defines the absolute limit beyond which IPs are declared unhealthy.
     * 
     */
    public Output<Optional<Double>> healthMax() {
        return Codegen.optional(this.healthMax);
    }
    /**
     * Configures a cutoff value that is computed from the median scores.
     * 
     */
    @Export(name="healthMultiplier", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> healthMultiplier;

    /**
     * @return Configures a cutoff value that is computed from the median scores.
     * 
     */
    public Output<Optional<Double>> healthMultiplier() {
        return Codegen.optional(this.healthMultiplier);
    }
    /**
     * Configures a cutoff value that is computed from the median scores.
     * 
     */
    @Export(name="healthThreshold", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> healthThreshold;

    /**
     * @return Configures a cutoff value that is computed from the median scores.
     * 
     */
    public Output<Optional<Double>> healthThreshold() {
        return Codegen.optional(this.healthThreshold);
    }
    /**
     * A boolean that indicates the type of IP address handed out by a GTM property.
     * 
     */
    @Export(name="ipv6", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ipv6;

    /**
     * @return A boolean that indicates the type of IP address handed out by a GTM property.
     * 
     */
    public Output<Optional<Boolean>> ipv6() {
        return Codegen.optional(this.ipv6);
    }
    /**
     * Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
     * 
     */
    @Export(name="livenessTests", type=List.class, parameters={GtmPropertyLivenessTest.class})
    private Output</* @Nullable */ List<GtmPropertyLivenessTest>> livenessTests;

    /**
     * @return Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `liveness_test` arguments. If used, requires these arguments:
     * 
     */
    public Output<Optional<List<GtmPropertyLivenessTest>>> livenessTests() {
        return Codegen.optional(this.livenessTests);
    }
    /**
     * Indicates the percent of load imbalance factor (LIF) for the property.
     * 
     */
    @Export(name="loadImbalancePercentage", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> loadImbalancePercentage;

    /**
     * @return Indicates the percent of load imbalance factor (LIF) for the property.
     * 
     */
    public Output<Optional<Double>> loadImbalancePercentage() {
        return Codegen.optional(this.loadImbalancePercentage);
    }
    /**
     * A descriptive label for a GeographicMap or a CidrMap that&#39;s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
     * 
     */
    @Export(name="mapName", type=String.class, parameters={})
    private Output</* @Nullable */ String> mapName;

    /**
     * @return A descriptive label for a GeographicMap or a CidrMap that&#39;s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
     * 
     */
    public Output<Optional<String>> mapName() {
        return Codegen.optional(this.mapName);
    }
    /**
     * For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
     * 
     */
    @Export(name="maxUnreachablePenalty", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxUnreachablePenalty;

    /**
     * @return For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
     * 
     */
    public Output<Optional<Integer>> maxUnreachablePenalty() {
        return Codegen.optional(this.maxUnreachablePenalty);
    }
    /**
     * Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
     * 
     */
    @Export(name="minLiveFraction", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> minLiveFraction;

    /**
     * @return Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
     * 
     */
    public Output<Optional<Double>> minLiveFraction() {
        return Codegen.optional(this.minLiveFraction);
    }
    /**
     * Name of HTTP header.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of HTTP header.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
     * 
     */
    @Export(name="scoreAggregationType", type=String.class, parameters={})
    private Output<String> scoreAggregationType;

    /**
     * @return Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
     * 
     */
    public Output<String> scoreAggregationType() {
        return this.scoreAggregationType;
    }
    /**
     * Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
     * 
     */
    @Export(name="staticRrSets", type=List.class, parameters={GtmPropertyStaticRrSet.class})
    private Output</* @Nullable */ List<GtmPropertyStaticRrSet>> staticRrSets;

    /**
     * @return Contains static record sets. You can have multiple `static_rr_set` entries. Requires these arguments:
     * 
     */
    public Output<Optional<List<GtmPropertyStaticRrSet>>> staticRrSets() {
        return Codegen.optional(this.staticRrSets);
    }
    @Export(name="staticTtl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> staticTtl;

    public Output<Optional<Integer>> staticTtl() {
        return Codegen.optional(this.staticTtl);
    }
    /**
     * Specifies a constant used to configure data center affinity.
     * 
     */
    @Export(name="stickinessBonusConstant", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> stickinessBonusConstant;

    /**
     * @return Specifies a constant used to configure data center affinity.
     * 
     */
    public Output<Optional<Integer>> stickinessBonusConstant() {
        return Codegen.optional(this.stickinessBonusConstant);
    }
    /**
     * Specifies a percentage used to configure data center affinity.
     * 
     */
    @Export(name="stickinessBonusPercentage", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> stickinessBonusPercentage;

    /**
     * @return Specifies a percentage used to configure data center affinity.
     * 
     */
    public Output<Optional<Integer>> stickinessBonusPercentage() {
        return Codegen.optional(this.stickinessBonusPercentage);
    }
    /**
     * Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
     * 
     */
    @Export(name="trafficTargets", type=List.class, parameters={GtmPropertyTrafficTarget.class})
    private Output</* @Nullable */ List<GtmPropertyTrafficTarget>> trafficTargets;

    /**
     * @return Contains information about where to direct data center traffic. You can have multiple `traffic_target` arguments. If used, includes these arguments:
     * 
     */
    public Output<Optional<List<GtmPropertyTrafficTarget>>> trafficTargets() {
        return Codegen.optional(this.trafficTargets);
    }
    /**
     * The record type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The record type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
     * 
     */
    @Export(name="unreachableThreshold", type=Double.class, parameters={})
    private Output</* @Nullable */ Double> unreachableThreshold;

    /**
     * @return For performance domains, this specifies a penalty value that&#39;s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
     * 
     */
    public Output<Optional<Double>> unreachableThreshold() {
        return Codegen.optional(this.unreachableThreshold);
    }
    /**
     * For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
     * 
     */
    @Export(name="useComputedTargets", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useComputedTargets;

    /**
     * @return For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
     * 
     */
    public Output<Optional<Boolean>> useComputedTargets() {
        return Codegen.optional(this.useComputedTargets);
    }
    /**
     * A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     * 
     */
    @Export(name="waitOnComplete", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> waitOnComplete;

    /**
     * @return A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     * 
     */
    public Output<Optional<Boolean>> waitOnComplete() {
        return Codegen.optional(this.waitOnComplete);
    }
    @Export(name="weightedHashBitsForIpv4", type=Integer.class, parameters={})
    private Output<Integer> weightedHashBitsForIpv4;

    public Output<Integer> weightedHashBitsForIpv4() {
        return this.weightedHashBitsForIpv4;
    }
    @Export(name="weightedHashBitsForIpv6", type=Integer.class, parameters={})
    private Output<Integer> weightedHashBitsForIpv6;

    public Output<Integer> weightedHashBitsForIpv6() {
        return this.weightedHashBitsForIpv6;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GtmProperty(String name) {
        this(name, GtmPropertyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GtmProperty(String name, GtmPropertyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GtmProperty(String name, GtmPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:trafficmanagement/gtmProperty:GtmProperty", name, args == null ? GtmPropertyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GtmProperty(String name, Output<String> id, @Nullable GtmPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("akamai:trafficmanagement/gtmProperty:GtmProperty", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GtmProperty get(String name, Output<String> id, @Nullable GtmPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GtmProperty(name, id, state, options);
    }
}
