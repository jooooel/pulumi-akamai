// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.DatastreamAzureConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamConfigArgs;
import com.pulumi.akamai.inputs.DatastreamDatadogConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamGcsConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamHttpsConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamOracleConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamS3ConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamSplunkConnectorArgs;
import com.pulumi.akamai.inputs.DatastreamSumologicConnectorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatastreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatastreamArgs Empty = new DatastreamArgs();

    /**
     * - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
     * 
     */
    @Import(name="azureConnector")
    private @Nullable Output<DatastreamAzureConnectorArgs> azureConnector;

    /**
     * @return Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamAzureConnectorArgs>> azureConnector() {
        return Optional.ofNullable(this.azureConnector);
    }

    /**
     * - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
     * 
     */
    @Import(name="config", required=true)
    private Output<DatastreamConfigArgs> config;

    /**
     * @return - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
     * 
     */
    public Output<DatastreamConfigArgs> config() {
        return this.config;
    }

    /**
     * - (Required) Identifies the contract that has access to the product.
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return - (Required) Identifies the contract that has access to the product.
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * Specify details about the Datadog connector in a stream, including:
     * 
     */
    @Import(name="datadogConnector")
    private @Nullable Output<DatastreamDatadogConnectorArgs> datadogConnector;

    /**
     * @return Specify details about the Datadog connector in a stream, including:
     * 
     */
    public Optional<Output<DatastreamDatadogConnectorArgs>> datadogConnector() {
        return Optional.ofNullable(this.datadogConnector);
    }

    /**
     * - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
     * 
     */
    @Import(name="datasetFieldsIds", required=true)
    private Output<List<Integer>> datasetFieldsIds;

    /**
     * @return - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
     * 
     */
    public Output<List<Integer>> datasetFieldsIds() {
        return this.datasetFieldsIds;
    }

    /**
     * - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
     * 
     */
    @Import(name="emailIds")
    private @Nullable Output<List<String>> emailIds;

    /**
     * @return - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
     * 
     */
    public Optional<Output<List<String>>> emailIds() {
        return Optional.ofNullable(this.emailIds);
    }

    /**
     * Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
     * 
     */
    @Import(name="gcsConnector")
    private @Nullable Output<DatastreamGcsConnectorArgs> gcsConnector;

    /**
     * @return Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamGcsConnectorArgs>> gcsConnector() {
        return Optional.ofNullable(this.gcsConnector);
    }

    /**
     * - (Required) Identifies the group that has access to the product and this stream configuration.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return - (Required) Identifies the group that has access to the product and this stream configuration.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
     * 
     */
    @Import(name="httpsConnector")
    private @Nullable Output<DatastreamHttpsConnectorArgs> httpsConnector;

    /**
     * @return Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
     * 
     */
    public Optional<Output<DatastreamHttpsConnectorArgs>> httpsConnector() {
        return Optional.ofNullable(this.httpsConnector);
    }

    /**
     * Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
     * 
     */
    @Import(name="oracleConnector")
    private @Nullable Output<DatastreamOracleConnectorArgs> oracleConnector;

    /**
     * @return Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
     * 
     */
    public Optional<Output<DatastreamOracleConnectorArgs>> oracleConnector() {
        return Optional.ofNullable(this.oracleConnector);
    }

    /**
     * - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
     * 
     */
    @Import(name="propertyIds", required=true)
    private Output<List<String>> propertyIds;

    /**
     * @return - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
     * 
     */
    public Output<List<String>> propertyIds() {
        return this.propertyIds;
    }

    /**
     * - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
     * 
     */
    @Import(name="s3Connector")
    private @Nullable Output<DatastreamS3ConnectorArgs> s3Connector;

    /**
     * @return - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamS3ConnectorArgs>> s3Connector() {
        return Optional.ofNullable(this.s3Connector);
    }

    /**
     * Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
     * 
     */
    @Import(name="splunkConnector")
    private @Nullable Output<DatastreamSplunkConnectorArgs> splunkConnector;

    /**
     * @return Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
     * 
     */
    public Optional<Output<DatastreamSplunkConnectorArgs>> splunkConnector() {
        return Optional.ofNullable(this.splunkConnector);
    }

    /**
     * - (Required) The name of the stream.
     * 
     */
    @Import(name="streamName", required=true)
    private Output<String> streamName;

    /**
     * @return - (Required) The name of the stream.
     * 
     */
    public Output<String> streamName() {
        return this.streamName;
    }

    /**
     * - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
     * 
     */
    @Import(name="streamType", required=true)
    private Output<String> streamType;

    /**
     * @return - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
     * 
     */
    public Output<String> streamType() {
        return this.streamType;
    }

    /**
     * Specify details about the Sumo Logic connector in a stream, including:
     * 
     */
    @Import(name="sumologicConnector")
    private @Nullable Output<DatastreamSumologicConnectorArgs> sumologicConnector;

    /**
     * @return Specify details about the Sumo Logic connector in a stream, including:
     * 
     */
    public Optional<Output<DatastreamSumologicConnectorArgs>> sumologicConnector() {
        return Optional.ofNullable(this.sumologicConnector);
    }

    /**
     * - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
     * 
     */
    @Import(name="templateName", required=true)
    private Output<String> templateName;

    /**
     * @return - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    private DatastreamArgs() {}

    private DatastreamArgs(DatastreamArgs $) {
        this.active = $.active;
        this.azureConnector = $.azureConnector;
        this.config = $.config;
        this.contractId = $.contractId;
        this.datadogConnector = $.datadogConnector;
        this.datasetFieldsIds = $.datasetFieldsIds;
        this.emailIds = $.emailIds;
        this.gcsConnector = $.gcsConnector;
        this.groupId = $.groupId;
        this.httpsConnector = $.httpsConnector;
        this.oracleConnector = $.oracleConnector;
        this.propertyIds = $.propertyIds;
        this.s3Connector = $.s3Connector;
        this.splunkConnector = $.splunkConnector;
        this.streamName = $.streamName;
        this.streamType = $.streamType;
        this.sumologicConnector = $.sumologicConnector;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastreamArgs $;

        public Builder() {
            $ = new DatastreamArgs();
        }

        public Builder(DatastreamArgs defaults) {
            $ = new DatastreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param azureConnector Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder azureConnector(@Nullable Output<DatastreamAzureConnectorArgs> azureConnector) {
            $.azureConnector = azureConnector;
            return this;
        }

        /**
         * @param azureConnector Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder azureConnector(DatastreamAzureConnectorArgs azureConnector) {
            return azureConnector(Output.of(azureConnector));
        }

        /**
         * @param config - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder config(Output<DatastreamConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder config(DatastreamConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param contractId - (Required) Identifies the contract that has access to the product.
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId - (Required) Identifies the contract that has access to the product.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param datadogConnector Specify details about the Datadog connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder datadogConnector(@Nullable Output<DatastreamDatadogConnectorArgs> datadogConnector) {
            $.datadogConnector = datadogConnector;
            return this;
        }

        /**
         * @param datadogConnector Specify details about the Datadog connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder datadogConnector(DatastreamDatadogConnectorArgs datadogConnector) {
            return datadogConnector(Output.of(datadogConnector));
        }

        /**
         * @param datasetFieldsIds - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
         * 
         * @return builder
         * 
         */
        public Builder datasetFieldsIds(Output<List<Integer>> datasetFieldsIds) {
            $.datasetFieldsIds = datasetFieldsIds;
            return this;
        }

        /**
         * @param datasetFieldsIds - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
         * 
         * @return builder
         * 
         */
        public Builder datasetFieldsIds(List<Integer> datasetFieldsIds) {
            return datasetFieldsIds(Output.of(datasetFieldsIds));
        }

        /**
         * @param datasetFieldsIds - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
         * 
         * @return builder
         * 
         */
        public Builder datasetFieldsIds(Integer... datasetFieldsIds) {
            return datasetFieldsIds(List.of(datasetFieldsIds));
        }

        /**
         * @param emailIds - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(@Nullable Output<List<String>> emailIds) {
            $.emailIds = emailIds;
            return this;
        }

        /**
         * @param emailIds - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(List<String> emailIds) {
            return emailIds(Output.of(emailIds));
        }

        /**
         * @param emailIds - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
         * 
         * @return builder
         * 
         */
        public Builder emailIds(String... emailIds) {
            return emailIds(List.of(emailIds));
        }

        /**
         * @param gcsConnector Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder gcsConnector(@Nullable Output<DatastreamGcsConnectorArgs> gcsConnector) {
            $.gcsConnector = gcsConnector;
            return this;
        }

        /**
         * @param gcsConnector Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_&lt;timestamp&gt;.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder gcsConnector(DatastreamGcsConnectorArgs gcsConnector) {
            return gcsConnector(Output.of(gcsConnector));
        }

        /**
         * @param groupId - (Required) Identifies the group that has access to the product and this stream configuration.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId - (Required) Identifies the group that has access to the product and this stream configuration.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param httpsConnector Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder httpsConnector(@Nullable Output<DatastreamHttpsConnectorArgs> httpsConnector) {
            $.httpsConnector = httpsConnector;
            return this;
        }

        /**
         * @param httpsConnector Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder httpsConnector(DatastreamHttpsConnectorArgs httpsConnector) {
            return httpsConnector(Output.of(httpsConnector));
        }

        /**
         * @param oracleConnector Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
         * 
         * @return builder
         * 
         */
        public Builder oracleConnector(@Nullable Output<DatastreamOracleConnectorArgs> oracleConnector) {
            $.oracleConnector = oracleConnector;
            return this;
        }

        /**
         * @param oracleConnector Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and tries to save an `Akamai_access_verification_&lt;timestamp&gt;.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
         * 
         * @return builder
         * 
         */
        public Builder oracleConnector(DatastreamOracleConnectorArgs oracleConnector) {
            return oracleConnector(Output.of(oracleConnector));
        }

        /**
         * @param propertyIds - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(Output<List<String>> propertyIds) {
            $.propertyIds = propertyIds;
            return this;
        }

        /**
         * @param propertyIds - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(List<String> propertyIds) {
            return propertyIds(Output.of(propertyIds));
        }

        /**
         * @param propertyIds - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(String... propertyIds) {
            return propertyIds(List.of(propertyIds));
        }

        /**
         * @param s3Connector - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder s3Connector(@Nullable Output<DatastreamS3ConnectorArgs> s3Connector) {
            $.s3Connector = s3Connector;
            return this;
        }

        /**
         * @param s3Connector - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `access_key` and `secret_access_key` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder s3Connector(DatastreamS3ConnectorArgs s3Connector) {
            return s3Connector(Output.of(s3Connector));
        }

        /**
         * @param splunkConnector Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder splunkConnector(@Nullable Output<DatastreamSplunkConnectorArgs> splunkConnector) {
            $.splunkConnector = splunkConnector;
            return this;
        }

        /**
         * @param splunkConnector Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
         * 
         * @return builder
         * 
         */
        public Builder splunkConnector(DatastreamSplunkConnectorArgs splunkConnector) {
            return splunkConnector(Output.of(splunkConnector));
        }

        /**
         * @param streamName - (Required) The name of the stream.
         * 
         * @return builder
         * 
         */
        public Builder streamName(Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        /**
         * @param streamName - (Required) The name of the stream.
         * 
         * @return builder
         * 
         */
        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        /**
         * @param streamType - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
         * 
         * @return builder
         * 
         */
        public Builder streamType(Output<String> streamType) {
            $.streamType = streamType;
            return this;
        }

        /**
         * @param streamType - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
         * 
         * @return builder
         * 
         */
        public Builder streamType(String streamType) {
            return streamType(Output.of(streamType));
        }

        /**
         * @param sumologicConnector Specify details about the Sumo Logic connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder sumologicConnector(@Nullable Output<DatastreamSumologicConnectorArgs> sumologicConnector) {
            $.sumologicConnector = sumologicConnector;
            return this;
        }

        /**
         * @param sumologicConnector Specify details about the Sumo Logic connector in a stream, including:
         * 
         * @return builder
         * 
         */
        public Builder sumologicConnector(DatastreamSumologicConnectorArgs sumologicConnector) {
            return sumologicConnector(Output.of(sumologicConnector));
        }

        /**
         * @param templateName - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
         * 
         * @return builder
         * 
         */
        public Builder templateName(Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public DatastreamArgs build() {
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.datasetFieldsIds = Objects.requireNonNull($.datasetFieldsIds, "expected parameter 'datasetFieldsIds' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            $.propertyIds = Objects.requireNonNull($.propertyIds, "expected parameter 'propertyIds' to be non-null");
            $.streamName = Objects.requireNonNull($.streamName, "expected parameter 'streamName' to be non-null");
            $.streamType = Objects.requireNonNull($.streamType, "expected parameter 'streamType' to be non-null");
            $.templateName = Objects.requireNonNull($.templateName, "expected parameter 'templateName' to be non-null");
            return $;
        }
    }

}
