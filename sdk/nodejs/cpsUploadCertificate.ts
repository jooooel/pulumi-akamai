// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the `akamai.CpsUploadCertificate` resource to upload a third-party certificate and any other files that your CA sent you into CPS. The certificate and trust chain that your CA gives you must be in PEM format before you can use it in CPS. A PEM certificate is a base64 encoded ASCII file and contains `----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` statements.
 *
 * If your CA provides you with a certificate that is not in PEM format, you can convert it to PEM format using an SSL converter.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const uploadCert = new akamai.CpsUploadCertificate("uploadCert", {
 *     enrollmentId: 12345,
 *     certificateEcdsaPem: example_cert_ecdsa.pem,
 *     trustChainEcdsaPem: example_trust_chain_ecdsa.pem,
 *     acknowledgePostVerificationWarnings: true,
 *     acknowledgeChangeManagement: true,
 *     waitForDeployment: true,
 * });
 * ```
 */
export class CpsUploadCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CpsUploadCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CpsUploadCertificateState, opts?: pulumi.CustomResourceOptions): CpsUploadCertificate {
        return new CpsUploadCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cpsUploadCertificate:CpsUploadCertificate';

    /**
     * Returns true if the given object is an instance of CpsUploadCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CpsUploadCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CpsUploadCertificate.__pulumiType;
    }

    /**
     * Boolean. Use only if `changeManagement` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     */
    public readonly acknowledgeChangeManagement!: pulumi.Output<boolean | undefined>;
    /**
     * Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
     */
    public readonly acknowledgePostVerificationWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     */
    public readonly autoApproveWarnings!: pulumi.Output<string[] | undefined>;
    /**
     * The ECDSA certificate in PEM format you want to upload.
     */
    public readonly certificateEcdsaPem!: pulumi.Output<string | undefined>;
    /**
     * The RSA certificate in PEM format you want to upload.
     */
    public readonly certificateRsaPem!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     */
    public readonly enrollmentId!: pulumi.Output<number>;
    /**
     * The trust chain in PEM format for the ECDSA certificate you want to upload.
     */
    public readonly trustChainEcdsaPem!: pulumi.Output<string | undefined>;
    /**
     * The trust chain in PEM format for the RSA certificate you want to upload.
     */
    public readonly trustChainRsaPem!: pulumi.Output<string | undefined>;
    /**
     * Used to distinguish whether there are unacknowledged warnings for a certificate
     */
    public /*out*/ readonly unacknowledgedWarnings!: pulumi.Output<boolean>;
    /**
     * Boolean. Enter `true` to wait for certificate to be deployed.
     */
    public readonly waitForDeployment!: pulumi.Output<boolean | undefined>;

    /**
     * Create a CpsUploadCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CpsUploadCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CpsUploadCertificateArgs | CpsUploadCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CpsUploadCertificateState | undefined;
            resourceInputs["acknowledgeChangeManagement"] = state ? state.acknowledgeChangeManagement : undefined;
            resourceInputs["acknowledgePostVerificationWarnings"] = state ? state.acknowledgePostVerificationWarnings : undefined;
            resourceInputs["autoApproveWarnings"] = state ? state.autoApproveWarnings : undefined;
            resourceInputs["certificateEcdsaPem"] = state ? state.certificateEcdsaPem : undefined;
            resourceInputs["certificateRsaPem"] = state ? state.certificateRsaPem : undefined;
            resourceInputs["enrollmentId"] = state ? state.enrollmentId : undefined;
            resourceInputs["trustChainEcdsaPem"] = state ? state.trustChainEcdsaPem : undefined;
            resourceInputs["trustChainRsaPem"] = state ? state.trustChainRsaPem : undefined;
            resourceInputs["unacknowledgedWarnings"] = state ? state.unacknowledgedWarnings : undefined;
            resourceInputs["waitForDeployment"] = state ? state.waitForDeployment : undefined;
        } else {
            const args = argsOrState as CpsUploadCertificateArgs | undefined;
            if ((!args || args.enrollmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrollmentId'");
            }
            resourceInputs["acknowledgeChangeManagement"] = args ? args.acknowledgeChangeManagement : undefined;
            resourceInputs["acknowledgePostVerificationWarnings"] = args ? args.acknowledgePostVerificationWarnings : undefined;
            resourceInputs["autoApproveWarnings"] = args ? args.autoApproveWarnings : undefined;
            resourceInputs["certificateEcdsaPem"] = args ? args.certificateEcdsaPem : undefined;
            resourceInputs["certificateRsaPem"] = args ? args.certificateRsaPem : undefined;
            resourceInputs["enrollmentId"] = args ? args.enrollmentId : undefined;
            resourceInputs["trustChainEcdsaPem"] = args ? args.trustChainEcdsaPem : undefined;
            resourceInputs["trustChainRsaPem"] = args ? args.trustChainRsaPem : undefined;
            resourceInputs["waitForDeployment"] = args ? args.waitForDeployment : undefined;
            resourceInputs["unacknowledgedWarnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CpsUploadCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CpsUploadCertificate resources.
 */
export interface CpsUploadCertificateState {
    /**
     * Boolean. Use only if `changeManagement` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     */
    acknowledgeChangeManagement?: pulumi.Input<boolean>;
    /**
     * Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
     */
    acknowledgePostVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ECDSA certificate in PEM format you want to upload.
     */
    certificateEcdsaPem?: pulumi.Input<string>;
    /**
     * The RSA certificate in PEM format you want to upload.
     */
    certificateRsaPem?: pulumi.Input<string>;
    /**
     * Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     */
    enrollmentId?: pulumi.Input<number>;
    /**
     * The trust chain in PEM format for the ECDSA certificate you want to upload.
     */
    trustChainEcdsaPem?: pulumi.Input<string>;
    /**
     * The trust chain in PEM format for the RSA certificate you want to upload.
     */
    trustChainRsaPem?: pulumi.Input<string>;
    /**
     * Used to distinguish whether there are unacknowledged warnings for a certificate
     */
    unacknowledgedWarnings?: pulumi.Input<boolean>;
    /**
     * Boolean. Enter `true` to wait for certificate to be deployed.
     */
    waitForDeployment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CpsUploadCertificate resource.
 */
export interface CpsUploadCertificateArgs {
    /**
     * Boolean. Use only if `changeManagement` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
     */
    acknowledgeChangeManagement?: pulumi.Input<boolean>;
    /**
     * Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
     */
    acknowledgePostVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ECDSA certificate in PEM format you want to upload.
     */
    certificateEcdsaPem?: pulumi.Input<string>;
    /**
     * The RSA certificate in PEM format you want to upload.
     */
    certificateRsaPem?: pulumi.Input<string>;
    /**
     * Unique identifier for the certificate enrollment.
     * * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
     */
    enrollmentId: pulumi.Input<number>;
    /**
     * The trust chain in PEM format for the ECDSA certificate you want to upload.
     */
    trustChainEcdsaPem?: pulumi.Input<string>;
    /**
     * The trust chain in PEM format for the RSA certificate you want to upload.
     */
    trustChainRsaPem?: pulumi.Input<string>;
    /**
     * Boolean. Enter `true` to wait for certificate to be deployed.
     */
    waitForDeployment?: pulumi.Input<boolean>;
}
