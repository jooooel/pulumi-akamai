// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use the `akamai.PropertyActivation` data source to retrieve activation information for a property version on staging
 * or production network.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 * import * as fs from "fs";
 *
 * const email = "user@example.org";
 * const ruleFormat = "v2022-10-18";
 * const example = new akamai.Property("example", {
 *     productId: "prd_SPM",
 *     contractId: _var.contractid,
 *     groupId: _var.groupid,
 *     hostnames: [{
 *         cnameTo: "www.example.com.edgekey.net",
 *         cnameFrom: "www.example.com",
 *         certProvisioningType: "DEFAULT",
 *     }],
 *     ruleFormat: ruleFormat,
 *     rules: fs.readFileSync(`${path.module}/main.json`),
 * });
 * const exampleStagingPropertyActivation = new akamai.PropertyActivation("exampleStagingPropertyActivation", {
 *     propertyId: example.id,
 *     contacts: [email],
 *     version: example.latestVersion,
 *     note: "Sample activation",
 * });
 * const exampleStagingActivation = akamai.properties.getActivationOutput({
 *     propertyId: example.id,
 *     version: example.latestVersion,
 * });
 * ```
 */
export function getActivation(args: GetActivationArgs, opts?: pulumi.InvokeOptions): Promise<GetActivationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:properties/getActivation:getActivation", {
        "network": args.network,
        "propertyId": args.propertyId,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getActivation.
 */
export interface GetActivationArgs {
    /**
     * Akamai network to check the activation, either `STAGING` or `PRODUCTION`. If not specified, this defaults to `STAGING`.
     */
    network?: string;
    /**
     * The property's unique identifier, including optional `prp_` prefix.
     */
    propertyId: string;
    /**
     * The activated property version. The value depends on the `akamai.Property` resource to identify the latest activated version instead of calculating it locally. To always use the latest version, set the variable to identify the resource you want to use: `akamai_property.{resource identifier}.latest_version`.
     */
    version: number;
}

/**
 * A collection of values returned by getActivation.
 */
export interface GetActivationResult {
    /**
     * The activation's unique identifier, including optional `atv_` prefix.
     */
    readonly activationId: string;
    /**
     * The email addresses to notify about the activation status changes.
     */
    readonly contacts: string[];
    /**
     * The contents of `errors` field returned by the API. For more information
     * see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
     */
    readonly errors: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly network?: string;
    /**
     * Log message assigned to the activation request.
     */
    readonly note: string;
    readonly propertyId: string;
    /**
     * The property version's activation status on the selected network.
     */
    readonly status: string;
    readonly version: number;
    /**
     * The contents of `warnings` field returned by the API. For more information
     * see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
     */
    readonly warnings: string;
}
/**
 * Use the `akamai.PropertyActivation` data source to retrieve activation information for a property version on staging
 * or production network.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 * import * as fs from "fs";
 *
 * const email = "user@example.org";
 * const ruleFormat = "v2022-10-18";
 * const example = new akamai.Property("example", {
 *     productId: "prd_SPM",
 *     contractId: _var.contractid,
 *     groupId: _var.groupid,
 *     hostnames: [{
 *         cnameTo: "www.example.com.edgekey.net",
 *         cnameFrom: "www.example.com",
 *         certProvisioningType: "DEFAULT",
 *     }],
 *     ruleFormat: ruleFormat,
 *     rules: fs.readFileSync(`${path.module}/main.json`),
 * });
 * const exampleStagingPropertyActivation = new akamai.PropertyActivation("exampleStagingPropertyActivation", {
 *     propertyId: example.id,
 *     contacts: [email],
 *     version: example.latestVersion,
 *     note: "Sample activation",
 * });
 * const exampleStagingActivation = akamai.properties.getActivationOutput({
 *     propertyId: example.id,
 *     version: example.latestVersion,
 * });
 * ```
 */
export function getActivationOutput(args: GetActivationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetActivationResult> {
    return pulumi.output(args).apply((a: any) => getActivation(a, opts))
}

/**
 * A collection of arguments for invoking getActivation.
 */
export interface GetActivationOutputArgs {
    /**
     * Akamai network to check the activation, either `STAGING` or `PRODUCTION`. If not specified, this defaults to `STAGING`.
     */
    network?: pulumi.Input<string>;
    /**
     * The property's unique identifier, including optional `prp_` prefix.
     */
    propertyId: pulumi.Input<string>;
    /**
     * The activated property version. The value depends on the `akamai.Property` resource to identify the latest activated version instead of calculating it locally. To always use the latest version, set the variable to identify the resource you want to use: `akamai_property.{resource identifier}.latest_version`.
     */
    version: pulumi.Input<number>;
}
