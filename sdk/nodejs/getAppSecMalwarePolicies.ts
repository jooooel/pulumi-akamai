// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security configuration; malware protection
 *
 * Returns information about your malware policies. Malware polices help you control what happens when a request is made to upload files of various types. These policies help you control how your website is protected from malicious uploads.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const malwarePolicies = configuration.then(configuration => akamai.getAppSecMalwarePolicies({
 *     configId: configuration.configId,
 * }));
 * export const malwarePoliciesOutput = malwarePolicies.then(malwarePolicies => malwarePolicies.outputText);
 * export const malwarePoliciesJson = malwarePolicies.then(malwarePolicies => malwarePolicies.json);
 * const malwarePolicy = configuration.then(configuration => akamai.getAppSecMalwarePolicies({
 *     configId: configuration.configId,
 *     malwarePolicyId: 122149,
 * }));
 * export const malwarePolicyJson = malwarePolicy.then(malwarePolicy => malwarePolicy.json);
 * export const malwarePolicyOutput = malwarePolicy.then(malwarePolicy => malwarePolicy.outputText);
 * ```
 * ## Output Options
 *
 * The following options can be used to determine the information returned, and how that returned information is formatted:
 *
 * - `outputText`. Tabular report showing the ID and name of the malware policies.
 * - `json`. JSON-formatted list of the malware policy information.
 */
export function getAppSecMalwarePolicies(args: GetAppSecMalwarePoliciesArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSecMalwarePoliciesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getAppSecMalwarePolicies:getAppSecMalwarePolicies", {
        "configId": args.configId,
        "malwarePolicyId": args.malwarePolicyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppSecMalwarePolicies.
 */
export interface GetAppSecMalwarePoliciesArgs {
    /**
     * . Unique identifier of the security configuration associated with the malware policies.
     */
    configId: number;
    /**
     * . Unique identifier of the malware policy you want to return information for. If not included, information is returned for all of your malware policies.
     */
    malwarePolicyId?: number;
}

/**
 * A collection of values returned by getAppSecMalwarePolicies.
 */
export interface GetAppSecMalwarePoliciesResult {
    readonly configId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly json: string;
    readonly malwarePolicyId?: number;
    readonly outputText: string;
}
/**
 * **Scopes**: Security configuration; malware protection
 *
 * Returns information about your malware policies. Malware polices help you control what happens when a request is made to upload files of various types. These policies help you control how your website is protected from malicious uploads.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const malwarePolicies = configuration.then(configuration => akamai.getAppSecMalwarePolicies({
 *     configId: configuration.configId,
 * }));
 * export const malwarePoliciesOutput = malwarePolicies.then(malwarePolicies => malwarePolicies.outputText);
 * export const malwarePoliciesJson = malwarePolicies.then(malwarePolicies => malwarePolicies.json);
 * const malwarePolicy = configuration.then(configuration => akamai.getAppSecMalwarePolicies({
 *     configId: configuration.configId,
 *     malwarePolicyId: 122149,
 * }));
 * export const malwarePolicyJson = malwarePolicy.then(malwarePolicy => malwarePolicy.json);
 * export const malwarePolicyOutput = malwarePolicy.then(malwarePolicy => malwarePolicy.outputText);
 * ```
 * ## Output Options
 *
 * The following options can be used to determine the information returned, and how that returned information is formatted:
 *
 * - `outputText`. Tabular report showing the ID and name of the malware policies.
 * - `json`. JSON-formatted list of the malware policy information.
 */
export function getAppSecMalwarePoliciesOutput(args: GetAppSecMalwarePoliciesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppSecMalwarePoliciesResult> {
    return pulumi.output(args).apply((a: any) => getAppSecMalwarePolicies(a, opts))
}

/**
 * A collection of arguments for invoking getAppSecMalwarePolicies.
 */
export interface GetAppSecMalwarePoliciesOutputArgs {
    /**
     * . Unique identifier of the security configuration associated with the malware policies.
     */
    configId: pulumi.Input<number>;
    /**
     * . Unique identifier of the malware policy you want to return information for. If not included, information is returned for all of your malware policies.
     */
    malwarePolicyId?: pulumi.Input<number>;
}
