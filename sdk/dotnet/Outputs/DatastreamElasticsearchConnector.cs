// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class DatastreamElasticsearchConnector
    {
        /// <summary>
        /// **Secret**. The certification authority (CA) certificate used to verify the origin server's certificate. It's needed if the certificate stored in `client_cert` is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
        /// </summary>
        public readonly string? CaCert;
        /// <summary>
        /// **Secret**. The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// **Secret**. The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// The name of the connector.
        /// </summary>
        public readonly string ConnectorName;
        /// <summary>
        /// Content type to pass in the log file header.
        /// </summary>
        public readonly string? ContentType;
        /// <summary>
        /// A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
        /// </summary>
        public readonly string? CustomHeaderName;
        /// <summary>
        /// The custom header's contents passed with the request that contains information about the client connection.
        /// </summary>
        public readonly string? CustomHeaderValue;
        /// <summary>
        /// The Elasticsearch bulk endpoint URL in the format: `https://&lt;hostname&gt;.elastic-cloud.com:9243/_bulk/`. Set `index_name` in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. 
        /// &lt;br&gt;Learn more about how to [Stream logs to Elasticsearch](https://techdocs.akamai.com/datastream2/docs/stream-elasticsearch).
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// **Secret**. The index name of the Elastic cloud where you want to store log files.
        /// </summary>
        public readonly string IndexName;
        public readonly bool? MTls;
        /// <summary>
        /// **Secret**. The Elasticsearch basic access authentication password.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
        /// </summary>
        public readonly string? TlsHostname;
        /// <summary>
        /// **Secret**. The Elasticsearch basic access authentication username.
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private DatastreamElasticsearchConnector(
            string? caCert,

            string? clientCert,

            string? clientKey,

            string connectorName,

            string? contentType,

            string? customHeaderName,

            string? customHeaderValue,

            string endpoint,

            string indexName,

            bool? mTls,

            string password,

            string? tlsHostname,

            string userName)
        {
            CaCert = caCert;
            ClientCert = clientCert;
            ClientKey = clientKey;
            ConnectorName = connectorName;
            ContentType = contentType;
            CustomHeaderName = customHeaderName;
            CustomHeaderValue = customHeaderValue;
            Endpoint = endpoint;
            IndexName = indexName;
            MTls = mTls;
            Password = password;
            TlsHostname = tlsHostname;
            UserName = userName;
        }
    }
}
