// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// Use the `akamai.CpsUploadCertificate` resource to upload a third-party certificate and any other files that your CA sent you into CPS. The certificate and trust chain that your CA gives you must be in PEM format before you can use it in CPS. A PEM certificate is a base64 encoded ASCII file and contains `----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` statements.
    /// 
    /// If your CA provides you with a certificate that is not in PEM format, you can convert it to PEM format using an SSL converter.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var uploadCert = new Akamai.CpsUploadCertificate("uploadCert", new()
    ///     {
    ///         EnrollmentId = 12345,
    ///         CertificateEcdsaPem = example_cert_ecdsa.Pem,
    ///         TrustChainEcdsaPem = example_trust_chain_ecdsa.Pem,
    ///         AcknowledgePostVerificationWarnings = true,
    ///         AcknowledgeChangeManagement = true,
    ///         WaitForDeployment = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AkamaiResourceType("akamai:index/cpsUploadCertificate:CpsUploadCertificate")]
    public partial class CpsUploadCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        /// </summary>
        [Output("acknowledgeChangeManagement")]
        public Output<bool?> AcknowledgeChangeManagement { get; private set; } = null!;

        /// <summary>
        /// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        /// </summary>
        [Output("acknowledgePostVerificationWarnings")]
        public Output<bool?> AcknowledgePostVerificationWarnings { get; private set; } = null!;

        /// <summary>
        /// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
        /// </summary>
        [Output("autoApproveWarnings")]
        public Output<ImmutableArray<string>> AutoApproveWarnings { get; private set; } = null!;

        /// <summary>
        /// The ECDSA certificate in PEM format you want to upload.
        /// </summary>
        [Output("certificateEcdsaPem")]
        public Output<string?> CertificateEcdsaPem { get; private set; } = null!;

        /// <summary>
        /// The RSA certificate in PEM format you want to upload.
        /// </summary>
        [Output("certificateRsaPem")]
        public Output<string?> CertificateRsaPem { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the certificate enrollment.
        /// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        /// </summary>
        [Output("enrollmentId")]
        public Output<int> EnrollmentId { get; private set; } = null!;

        /// <summary>
        /// The trust chain in PEM format for the ECDSA certificate you want to upload.
        /// </summary>
        [Output("trustChainEcdsaPem")]
        public Output<string?> TrustChainEcdsaPem { get; private set; } = null!;

        /// <summary>
        /// The trust chain in PEM format for the RSA certificate you want to upload.
        /// </summary>
        [Output("trustChainRsaPem")]
        public Output<string?> TrustChainRsaPem { get; private set; } = null!;

        /// <summary>
        /// Used to distinguish whether there are unacknowledged warnings for a certificate
        /// </summary>
        [Output("unacknowledgedWarnings")]
        public Output<bool> UnacknowledgedWarnings { get; private set; } = null!;

        /// <summary>
        /// Boolean. Enter `true` to wait for certificate to be deployed.
        /// </summary>
        [Output("waitForDeployment")]
        public Output<bool?> WaitForDeployment { get; private set; } = null!;


        /// <summary>
        /// Create a CpsUploadCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CpsUploadCertificate(string name, CpsUploadCertificateArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, args ?? new CpsUploadCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CpsUploadCertificate(string name, Input<string> id, CpsUploadCertificateState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CpsUploadCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CpsUploadCertificate Get(string name, Input<string> id, CpsUploadCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new CpsUploadCertificate(name, id, state, options);
        }
    }

    public sealed class CpsUploadCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        /// </summary>
        [Input("acknowledgeChangeManagement")]
        public Input<bool>? AcknowledgeChangeManagement { get; set; }

        /// <summary>
        /// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        /// </summary>
        [Input("acknowledgePostVerificationWarnings")]
        public Input<bool>? AcknowledgePostVerificationWarnings { get; set; }

        [Input("autoApproveWarnings")]
        private InputList<string>? _autoApproveWarnings;

        /// <summary>
        /// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
        /// </summary>
        public InputList<string> AutoApproveWarnings
        {
            get => _autoApproveWarnings ?? (_autoApproveWarnings = new InputList<string>());
            set => _autoApproveWarnings = value;
        }

        /// <summary>
        /// The ECDSA certificate in PEM format you want to upload.
        /// </summary>
        [Input("certificateEcdsaPem")]
        public Input<string>? CertificateEcdsaPem { get; set; }

        /// <summary>
        /// The RSA certificate in PEM format you want to upload.
        /// </summary>
        [Input("certificateRsaPem")]
        public Input<string>? CertificateRsaPem { get; set; }

        /// <summary>
        /// Unique identifier for the certificate enrollment.
        /// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        /// </summary>
        [Input("enrollmentId", required: true)]
        public Input<int> EnrollmentId { get; set; } = null!;

        /// <summary>
        /// The trust chain in PEM format for the ECDSA certificate you want to upload.
        /// </summary>
        [Input("trustChainEcdsaPem")]
        public Input<string>? TrustChainEcdsaPem { get; set; }

        /// <summary>
        /// The trust chain in PEM format for the RSA certificate you want to upload.
        /// </summary>
        [Input("trustChainRsaPem")]
        public Input<string>? TrustChainRsaPem { get; set; }

        /// <summary>
        /// Boolean. Enter `true` to wait for certificate to be deployed.
        /// </summary>
        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        public CpsUploadCertificateArgs()
        {
        }
        public static new CpsUploadCertificateArgs Empty => new CpsUploadCertificateArgs();
    }

    public sealed class CpsUploadCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean. Use only if `change_management` is set to `true` in the `akamai.CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        /// </summary>
        [Input("acknowledgeChangeManagement")]
        public Input<bool>? AcknowledgeChangeManagement { get; set; }

        /// <summary>
        /// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        /// </summary>
        [Input("acknowledgePostVerificationWarnings")]
        public Input<bool>? AcknowledgePostVerificationWarnings { get; set; }

        [Input("autoApproveWarnings")]
        private InputList<string>? _autoApproveWarnings;

        /// <summary>
        /// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
        /// </summary>
        public InputList<string> AutoApproveWarnings
        {
            get => _autoApproveWarnings ?? (_autoApproveWarnings = new InputList<string>());
            set => _autoApproveWarnings = value;
        }

        /// <summary>
        /// The ECDSA certificate in PEM format you want to upload.
        /// </summary>
        [Input("certificateEcdsaPem")]
        public Input<string>? CertificateEcdsaPem { get; set; }

        /// <summary>
        /// The RSA certificate in PEM format you want to upload.
        /// </summary>
        [Input("certificateRsaPem")]
        public Input<string>? CertificateRsaPem { get; set; }

        /// <summary>
        /// Unique identifier for the certificate enrollment.
        /// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        /// </summary>
        [Input("enrollmentId")]
        public Input<int>? EnrollmentId { get; set; }

        /// <summary>
        /// The trust chain in PEM format for the ECDSA certificate you want to upload.
        /// </summary>
        [Input("trustChainEcdsaPem")]
        public Input<string>? TrustChainEcdsaPem { get; set; }

        /// <summary>
        /// The trust chain in PEM format for the RSA certificate you want to upload.
        /// </summary>
        [Input("trustChainRsaPem")]
        public Input<string>? TrustChainRsaPem { get; set; }

        /// <summary>
        /// Used to distinguish whether there are unacknowledged warnings for a certificate
        /// </summary>
        [Input("unacknowledgedWarnings")]
        public Input<bool>? UnacknowledgedWarnings { get; set; }

        /// <summary>
        /// Boolean. Enter `true` to wait for certificate to be deployed.
        /// </summary>
        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        public CpsUploadCertificateState()
        {
        }
        public static new CpsUploadCertificateState Empty => new CpsUploadCertificateState();
    }
}
