// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetAppSecMalwarePolicyActions
    {
        /// <summary>
        /// **Scopes**: Security policy; malware protection
        /// 
        /// Returns information about your malware policy actions. Actions specify what happens any time a malware policy is triggered: the issue could be ignored, the request could be denied, or an alert could be generated.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var configuration = Akamai.GetAppSecConfiguration.Invoke(new()
        ///     {
        ///         Name = "Documentation",
        ///     });
        /// 
        ///     var malwarePolicyActionsAppSecMalwarePolicyActions = Akamai.GetAppSecMalwarePolicyActions.Invoke(new()
        ///     {
        ///         ConfigId = configuration.Apply(getAppSecConfigurationResult =&gt; getAppSecConfigurationResult.ConfigId),
        ///         SecurityPolicyId = "gms1_134637",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["malwarePolicyActions"] = malwarePolicyActionsAppSecMalwarePolicyActions.Apply(getAppSecMalwarePolicyActionsResult =&gt; getAppSecMalwarePolicyActionsResult.OutputText),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Output Options
        /// 
        /// The following options can be used to determine the information returned, and how that returned information is formatted:
        /// 
        /// - `output_text`. Tabular report showing the ID, scanned action, and unscanned action of the malware policy or policies.
        /// </summary>
        public static Task<GetAppSecMalwarePolicyActionsResult> InvokeAsync(GetAppSecMalwarePolicyActionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppSecMalwarePolicyActionsResult>("akamai:index/getAppSecMalwarePolicyActions:getAppSecMalwarePolicyActions", args ?? new GetAppSecMalwarePolicyActionsArgs(), options.WithDefaults());

        /// <summary>
        /// **Scopes**: Security policy; malware protection
        /// 
        /// Returns information about your malware policy actions. Actions specify what happens any time a malware policy is triggered: the issue could be ignored, the request could be denied, or an alert could be generated.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var configuration = Akamai.GetAppSecConfiguration.Invoke(new()
        ///     {
        ///         Name = "Documentation",
        ///     });
        /// 
        ///     var malwarePolicyActionsAppSecMalwarePolicyActions = Akamai.GetAppSecMalwarePolicyActions.Invoke(new()
        ///     {
        ///         ConfigId = configuration.Apply(getAppSecConfigurationResult =&gt; getAppSecConfigurationResult.ConfigId),
        ///         SecurityPolicyId = "gms1_134637",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["malwarePolicyActions"] = malwarePolicyActionsAppSecMalwarePolicyActions.Apply(getAppSecMalwarePolicyActionsResult =&gt; getAppSecMalwarePolicyActionsResult.OutputText),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Output Options
        /// 
        /// The following options can be used to determine the information returned, and how that returned information is formatted:
        /// 
        /// - `output_text`. Tabular report showing the ID, scanned action, and unscanned action of the malware policy or policies.
        /// </summary>
        public static Output<GetAppSecMalwarePolicyActionsResult> Invoke(GetAppSecMalwarePolicyActionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppSecMalwarePolicyActionsResult>("akamai:index/getAppSecMalwarePolicyActions:getAppSecMalwarePolicyActions", args ?? new GetAppSecMalwarePolicyActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppSecMalwarePolicyActionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// . Unique identifier of the security configuration associated with the malware policies and malware policy actions.
        /// </summary>
        [Input("configId", required: true)]
        public int ConfigId { get; set; }

        /// <summary>
        /// . Unique identifier of the malware policy you want to return action information for. If not included, action information is returned for all malware policies associated with the specified security policy.
        /// </summary>
        [Input("malwarePolicyId")]
        public int? MalwarePolicyId { get; set; }

        /// <summary>
        /// . Unique identifier of the security policy associated with the malware policies and malware policy actions.
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public string SecurityPolicyId { get; set; } = null!;

        public GetAppSecMalwarePolicyActionsArgs()
        {
        }
        public static new GetAppSecMalwarePolicyActionsArgs Empty => new GetAppSecMalwarePolicyActionsArgs();
    }

    public sealed class GetAppSecMalwarePolicyActionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// . Unique identifier of the security configuration associated with the malware policies and malware policy actions.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// . Unique identifier of the malware policy you want to return action information for. If not included, action information is returned for all malware policies associated with the specified security policy.
        /// </summary>
        [Input("malwarePolicyId")]
        public Input<int>? MalwarePolicyId { get; set; }

        /// <summary>
        /// . Unique identifier of the security policy associated with the malware policies and malware policy actions.
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public Input<string> SecurityPolicyId { get; set; } = null!;

        public GetAppSecMalwarePolicyActionsInvokeArgs()
        {
        }
        public static new GetAppSecMalwarePolicyActionsInvokeArgs Empty => new GetAppSecMalwarePolicyActionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppSecMalwarePolicyActionsResult
    {
        public readonly int ConfigId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? MalwarePolicyId;
        public readonly string OutputText;
        public readonly string SecurityPolicyId;

        [OutputConstructor]
        private GetAppSecMalwarePolicyActionsResult(
            int configId,

            string id,

            int? malwarePolicyId,

            string outputText,

            string securityPolicyId)
        {
            ConfigId = configId;
            Id = id;
            MalwarePolicyId = malwarePolicyId;
            OutputText = outputText;
            SecurityPolicyId = securityPolicyId;
        }
    }
}
