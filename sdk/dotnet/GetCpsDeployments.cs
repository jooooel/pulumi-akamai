// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetCpsDeployments
    {
        /// <summary>
        /// Use the `akamai.getCpsDeployments` data source to retrieve deployed certificates for a specific enrollment. 
        /// 
        /// You'll see data for ECDSA, RSA, or both depending on the type and number of certificates you uploaded.
        /// 
        /// ## Basic usage
        /// 
        /// This example shows how to return information about deployed certificates for enrollment ID 12345. 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Akamai.GetCpsDeployments.Invoke(new()
        ///     {
        ///         EnrollmentId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Attributes reference
        /// 
        /// This data source returns these attributes:
        /// 
        /// * `production_certificate_rsa` - The RSA certificate deployed on the production network. 
        /// * `production_certificate_ecdsa` - The ECDSA certificate deployed on the production network.
        /// * `staging_certificate_rsa` - The RSA certificate deployed on the staging network.
        /// * `staging_certificate_ecdsa` - The ECDSA certificate deployed on the staging network.
        /// * `expiry_date` - The expiration date for the certificate in ISO-8601 format.
        /// * `auto_renewal_start_time` - The specific date the automatic renewal will start on. The date is in ISO-8601 format. &lt;br&gt; For DV certificates, CPS automatically starts the renewal process 90 days before the current certificate expires. It then automatically deploys the renewed certificate when it receives it from the CA. &lt;br&gt; For third-party certificates, CPS creates a change. This change is needed to get a new CSR and upload the new certificate. Use the `akamai.getCPSEnrollments` data source to view pending changes.
        /// </summary>
        public static Task<GetCpsDeploymentsResult> InvokeAsync(GetCpsDeploymentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCpsDeploymentsResult>("akamai:index/getCpsDeployments:getCpsDeployments", args ?? new GetCpsDeploymentsArgs(), options.WithDefaults());

        /// <summary>
        /// Use the `akamai.getCpsDeployments` data source to retrieve deployed certificates for a specific enrollment. 
        /// 
        /// You'll see data for ECDSA, RSA, or both depending on the type and number of certificates you uploaded.
        /// 
        /// ## Basic usage
        /// 
        /// This example shows how to return information about deployed certificates for enrollment ID 12345. 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Akamai.GetCpsDeployments.Invoke(new()
        ///     {
        ///         EnrollmentId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Attributes reference
        /// 
        /// This data source returns these attributes:
        /// 
        /// * `production_certificate_rsa` - The RSA certificate deployed on the production network. 
        /// * `production_certificate_ecdsa` - The ECDSA certificate deployed on the production network.
        /// * `staging_certificate_rsa` - The RSA certificate deployed on the staging network.
        /// * `staging_certificate_ecdsa` - The ECDSA certificate deployed on the staging network.
        /// * `expiry_date` - The expiration date for the certificate in ISO-8601 format.
        /// * `auto_renewal_start_time` - The specific date the automatic renewal will start on. The date is in ISO-8601 format. &lt;br&gt; For DV certificates, CPS automatically starts the renewal process 90 days before the current certificate expires. It then automatically deploys the renewed certificate when it receives it from the CA. &lt;br&gt; For third-party certificates, CPS creates a change. This change is needed to get a new CSR and upload the new certificate. Use the `akamai.getCPSEnrollments` data source to view pending changes.
        /// </summary>
        public static Output<GetCpsDeploymentsResult> Invoke(GetCpsDeploymentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCpsDeploymentsResult>("akamai:index/getCpsDeployments:getCpsDeployments", args ?? new GetCpsDeploymentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCpsDeploymentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the enrollment.
        /// </summary>
        [Input("enrollmentId", required: true)]
        public int EnrollmentId { get; set; }

        public GetCpsDeploymentsArgs()
        {
        }
        public static new GetCpsDeploymentsArgs Empty => new GetCpsDeploymentsArgs();
    }

    public sealed class GetCpsDeploymentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the enrollment.
        /// </summary>
        [Input("enrollmentId", required: true)]
        public Input<int> EnrollmentId { get; set; } = null!;

        public GetCpsDeploymentsInvokeArgs()
        {
        }
        public static new GetCpsDeploymentsInvokeArgs Empty => new GetCpsDeploymentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCpsDeploymentsResult
    {
        public readonly string AutoRenewalStartTime;
        public readonly int EnrollmentId;
        public readonly string ExpiryDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProductionCertificateEcdsa;
        public readonly string ProductionCertificateRsa;
        public readonly string StagingCertificateEcdsa;
        public readonly string StagingCertificateRsa;

        [OutputConstructor]
        private GetCpsDeploymentsResult(
            string autoRenewalStartTime,

            int enrollmentId,

            string expiryDate,

            string id,

            string productionCertificateEcdsa,

            string productionCertificateRsa,

            string stagingCertificateEcdsa,

            string stagingCertificateRsa)
        {
            AutoRenewalStartTime = autoRenewalStartTime;
            EnrollmentId = enrollmentId;
            ExpiryDate = expiryDate;
            Id = id;
            ProductionCertificateEcdsa = productionCertificateEcdsa;
            ProductionCertificateRsa = productionCertificateRsa;
            StagingCertificateEcdsa = stagingCertificateEcdsa;
            StagingCertificateRsa = stagingCertificateRsa;
        }
    }
}
