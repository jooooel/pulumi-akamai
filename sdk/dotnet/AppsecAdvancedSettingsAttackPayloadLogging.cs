// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// **Scopes**: Security configuration; security policy
    /// 
    /// Enables, disables, or updates Attack Payload Logging settings.
    /// By default, this operation is applied at the configuration level, which means that it is applied to all the security policies within that configuration.
    /// However, by using the `security_policy_id` parameter you can specify custom settings for an individual security policy.
    /// 
    /// **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/advanced-settings/logging/attack-payload]
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var configuration = Akamai.GetAppSecConfiguration.Invoke(new()
    ///     {
    ///         Name = "Documentation",
    ///     });
    /// 
    ///     var attackPayloadLogging = new Akamai.AppsecAdvancedSettingsAttackPayloadLogging("attackPayloadLogging", new()
    ///     {
    ///         ConfigId = configuration.Apply(getAppSecConfigurationResult =&gt; getAppSecConfigurationResult.ConfigId),
    ///         AttackPayloadLogging = File.ReadAllText($"{path.Module}/attack-payload-logging.json"),
    ///     });
    /// 
    ///     // USE CASE: User wants to configure Attack Payload Logging settings for a security policy.
    ///     var policyLogging = new Akamai.AppsecAdvancedSettingsAttackPayloadLogging("policyLogging", new()
    ///     {
    ///         ConfigId = configuration.Apply(getAppSecConfigurationResult =&gt; getAppSecConfigurationResult.ConfigId),
    ///         SecurityPolicyId = "gms1_134637",
    ///         AttackPayloadLogging = File.ReadAllText($"{path.Module}/attack-payload-logging.json"),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AkamaiResourceType("akamai:index/appsecAdvancedSettingsAttackPayloadLogging:AppsecAdvancedSettingsAttackPayloadLogging")]
    public partial class AppsecAdvancedSettingsAttackPayloadLogging : global::Pulumi.CustomResource
    {
        /// <summary>
        /// . JSON representation of the Attack Payload Logging settings to be configured.
        /// </summary>
        [Output("attackPayloadLogging")]
        public Output<string> AttackPayloadLogging { get; private set; } = null!;

        /// <summary>
        /// . Unique identifier of the security configuration containing the Attack Payload Logging settings being modified.
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// . Unique identifier of the security policies whose settings are being modified. If not included, the Attack Payload Logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
        /// </summary>
        [Output("securityPolicyId")]
        public Output<string?> SecurityPolicyId { get; private set; } = null!;


        /// <summary>
        /// Create a AppsecAdvancedSettingsAttackPayloadLogging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppsecAdvancedSettingsAttackPayloadLogging(string name, AppsecAdvancedSettingsAttackPayloadLoggingArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appsecAdvancedSettingsAttackPayloadLogging:AppsecAdvancedSettingsAttackPayloadLogging", name, args ?? new AppsecAdvancedSettingsAttackPayloadLoggingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppsecAdvancedSettingsAttackPayloadLogging(string name, Input<string> id, AppsecAdvancedSettingsAttackPayloadLoggingState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appsecAdvancedSettingsAttackPayloadLogging:AppsecAdvancedSettingsAttackPayloadLogging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppsecAdvancedSettingsAttackPayloadLogging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppsecAdvancedSettingsAttackPayloadLogging Get(string name, Input<string> id, AppsecAdvancedSettingsAttackPayloadLoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new AppsecAdvancedSettingsAttackPayloadLogging(name, id, state, options);
        }
    }

    public sealed class AppsecAdvancedSettingsAttackPayloadLoggingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// . JSON representation of the Attack Payload Logging settings to be configured.
        /// </summary>
        [Input("attackPayloadLogging", required: true)]
        public Input<string> AttackPayloadLogging { get; set; } = null!;

        /// <summary>
        /// . Unique identifier of the security configuration containing the Attack Payload Logging settings being modified.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// . Unique identifier of the security policies whose settings are being modified. If not included, the Attack Payload Logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        public AppsecAdvancedSettingsAttackPayloadLoggingArgs()
        {
        }
        public static new AppsecAdvancedSettingsAttackPayloadLoggingArgs Empty => new AppsecAdvancedSettingsAttackPayloadLoggingArgs();
    }

    public sealed class AppsecAdvancedSettingsAttackPayloadLoggingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// . JSON representation of the Attack Payload Logging settings to be configured.
        /// </summary>
        [Input("attackPayloadLogging")]
        public Input<string>? AttackPayloadLogging { get; set; }

        /// <summary>
        /// . Unique identifier of the security configuration containing the Attack Payload Logging settings being modified.
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        /// <summary>
        /// . Unique identifier of the security policies whose settings are being modified. If not included, the Attack Payload Logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        public AppsecAdvancedSettingsAttackPayloadLoggingState()
        {
        }
        public static new AppsecAdvancedSettingsAttackPayloadLoggingState Empty => new AppsecAdvancedSettingsAttackPayloadLoggingState();
    }
}
