// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `CpsUploadCertificate` resource to upload a third-party certificate and any other files that your CA sent you into CPS. The certificate and trust chain that your CA gives you must be in PEM format before you can use it in CPS. A PEM certificate is a base64 encoded ASCII file and contains `----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` statements.
//
// If your CA provides you with a certificate that is not in PEM format, you can convert it to PEM format using an SSL converter.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := akamai.NewCpsUploadCertificate(ctx, "uploadCert", &akamai.CpsUploadCertificateArgs{
//				EnrollmentId:                        pulumi.Int(12345),
//				CertificateEcdsaPem:                 pulumi.Any(example_cert_ecdsa.Pem),
//				TrustChainEcdsaPem:                  pulumi.Any(example_trust_chain_ecdsa.Pem),
//				AcknowledgePostVerificationWarnings: pulumi.Bool(true),
//				AcknowledgeChangeManagement:         pulumi.Bool(true),
//				WaitForDeployment:                   pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CpsUploadCertificate struct {
	pulumi.CustomResourceState

	// Boolean. Use only if `changeManagement` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
	AcknowledgeChangeManagement pulumi.BoolPtrOutput `pulumi:"acknowledgeChangeManagement"`
	// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
	AcknowledgePostVerificationWarnings pulumi.BoolPtrOutput `pulumi:"acknowledgePostVerificationWarnings"`
	// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `getCpsWarnings` data source.
	AutoApproveWarnings pulumi.StringArrayOutput `pulumi:"autoApproveWarnings"`
	// The ECDSA certificate in PEM format you want to upload.
	CertificateEcdsaPem pulumi.StringPtrOutput `pulumi:"certificateEcdsaPem"`
	// The RSA certificate in PEM format you want to upload.
	CertificateRsaPem pulumi.StringPtrOutput `pulumi:"certificateRsaPem"`
	// Unique identifier for the certificate enrollment.
	// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
	EnrollmentId pulumi.IntOutput `pulumi:"enrollmentId"`
	// The trust chain in PEM format for the ECDSA certificate you want to upload.
	TrustChainEcdsaPem pulumi.StringPtrOutput `pulumi:"trustChainEcdsaPem"`
	// The trust chain in PEM format for the RSA certificate you want to upload.
	TrustChainRsaPem pulumi.StringPtrOutput `pulumi:"trustChainRsaPem"`
	// Used to distinguish whether there are unacknowledged warnings for a certificate
	UnacknowledgedWarnings pulumi.BoolOutput `pulumi:"unacknowledgedWarnings"`
	// Boolean. Enter `true` to wait for certificate to be deployed.
	WaitForDeployment pulumi.BoolPtrOutput `pulumi:"waitForDeployment"`
}

// NewCpsUploadCertificate registers a new resource with the given unique name, arguments, and options.
func NewCpsUploadCertificate(ctx *pulumi.Context,
	name string, args *CpsUploadCertificateArgs, opts ...pulumi.ResourceOption) (*CpsUploadCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnrollmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnrollmentId'")
	}
	var resource CpsUploadCertificate
	err := ctx.RegisterResource("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCpsUploadCertificate gets an existing CpsUploadCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCpsUploadCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CpsUploadCertificateState, opts ...pulumi.ResourceOption) (*CpsUploadCertificate, error) {
	var resource CpsUploadCertificate
	err := ctx.ReadResource("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CpsUploadCertificate resources.
type cpsUploadCertificateState struct {
	// Boolean. Use only if `changeManagement` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
	AcknowledgeChangeManagement *bool `pulumi:"acknowledgeChangeManagement"`
	// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
	AcknowledgePostVerificationWarnings *bool `pulumi:"acknowledgePostVerificationWarnings"`
	// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `getCpsWarnings` data source.
	AutoApproveWarnings []string `pulumi:"autoApproveWarnings"`
	// The ECDSA certificate in PEM format you want to upload.
	CertificateEcdsaPem *string `pulumi:"certificateEcdsaPem"`
	// The RSA certificate in PEM format you want to upload.
	CertificateRsaPem *string `pulumi:"certificateRsaPem"`
	// Unique identifier for the certificate enrollment.
	// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
	EnrollmentId *int `pulumi:"enrollmentId"`
	// The trust chain in PEM format for the ECDSA certificate you want to upload.
	TrustChainEcdsaPem *string `pulumi:"trustChainEcdsaPem"`
	// The trust chain in PEM format for the RSA certificate you want to upload.
	TrustChainRsaPem *string `pulumi:"trustChainRsaPem"`
	// Used to distinguish whether there are unacknowledged warnings for a certificate
	UnacknowledgedWarnings *bool `pulumi:"unacknowledgedWarnings"`
	// Boolean. Enter `true` to wait for certificate to be deployed.
	WaitForDeployment *bool `pulumi:"waitForDeployment"`
}

type CpsUploadCertificateState struct {
	// Boolean. Use only if `changeManagement` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
	AcknowledgeChangeManagement pulumi.BoolPtrInput
	// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
	AcknowledgePostVerificationWarnings pulumi.BoolPtrInput
	// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `getCpsWarnings` data source.
	AutoApproveWarnings pulumi.StringArrayInput
	// The ECDSA certificate in PEM format you want to upload.
	CertificateEcdsaPem pulumi.StringPtrInput
	// The RSA certificate in PEM format you want to upload.
	CertificateRsaPem pulumi.StringPtrInput
	// Unique identifier for the certificate enrollment.
	// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
	EnrollmentId pulumi.IntPtrInput
	// The trust chain in PEM format for the ECDSA certificate you want to upload.
	TrustChainEcdsaPem pulumi.StringPtrInput
	// The trust chain in PEM format for the RSA certificate you want to upload.
	TrustChainRsaPem pulumi.StringPtrInput
	// Used to distinguish whether there are unacknowledged warnings for a certificate
	UnacknowledgedWarnings pulumi.BoolPtrInput
	// Boolean. Enter `true` to wait for certificate to be deployed.
	WaitForDeployment pulumi.BoolPtrInput
}

func (CpsUploadCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsUploadCertificateState)(nil)).Elem()
}

type cpsUploadCertificateArgs struct {
	// Boolean. Use only if `changeManagement` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
	AcknowledgeChangeManagement *bool `pulumi:"acknowledgeChangeManagement"`
	// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
	AcknowledgePostVerificationWarnings *bool `pulumi:"acknowledgePostVerificationWarnings"`
	// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `getCpsWarnings` data source.
	AutoApproveWarnings []string `pulumi:"autoApproveWarnings"`
	// The ECDSA certificate in PEM format you want to upload.
	CertificateEcdsaPem *string `pulumi:"certificateEcdsaPem"`
	// The RSA certificate in PEM format you want to upload.
	CertificateRsaPem *string `pulumi:"certificateRsaPem"`
	// Unique identifier for the certificate enrollment.
	// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
	EnrollmentId int `pulumi:"enrollmentId"`
	// The trust chain in PEM format for the ECDSA certificate you want to upload.
	TrustChainEcdsaPem *string `pulumi:"trustChainEcdsaPem"`
	// The trust chain in PEM format for the RSA certificate you want to upload.
	TrustChainRsaPem *string `pulumi:"trustChainRsaPem"`
	// Boolean. Enter `true` to wait for certificate to be deployed.
	WaitForDeployment *bool `pulumi:"waitForDeployment"`
}

// The set of arguments for constructing a CpsUploadCertificate resource.
type CpsUploadCertificateArgs struct {
	// Boolean. Use only if `changeManagement` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
	AcknowledgeChangeManagement pulumi.BoolPtrInput
	// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
	AcknowledgePostVerificationWarnings pulumi.BoolPtrInput
	// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `getCpsWarnings` data source.
	AutoApproveWarnings pulumi.StringArrayInput
	// The ECDSA certificate in PEM format you want to upload.
	CertificateEcdsaPem pulumi.StringPtrInput
	// The RSA certificate in PEM format you want to upload.
	CertificateRsaPem pulumi.StringPtrInput
	// Unique identifier for the certificate enrollment.
	// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
	EnrollmentId pulumi.IntInput
	// The trust chain in PEM format for the ECDSA certificate you want to upload.
	TrustChainEcdsaPem pulumi.StringPtrInput
	// The trust chain in PEM format for the RSA certificate you want to upload.
	TrustChainRsaPem pulumi.StringPtrInput
	// Boolean. Enter `true` to wait for certificate to be deployed.
	WaitForDeployment pulumi.BoolPtrInput
}

func (CpsUploadCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsUploadCertificateArgs)(nil)).Elem()
}

type CpsUploadCertificateInput interface {
	pulumi.Input

	ToCpsUploadCertificateOutput() CpsUploadCertificateOutput
	ToCpsUploadCertificateOutputWithContext(ctx context.Context) CpsUploadCertificateOutput
}

func (*CpsUploadCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsUploadCertificate)(nil)).Elem()
}

func (i *CpsUploadCertificate) ToCpsUploadCertificateOutput() CpsUploadCertificateOutput {
	return i.ToCpsUploadCertificateOutputWithContext(context.Background())
}

func (i *CpsUploadCertificate) ToCpsUploadCertificateOutputWithContext(ctx context.Context) CpsUploadCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsUploadCertificateOutput)
}

// CpsUploadCertificateArrayInput is an input type that accepts CpsUploadCertificateArray and CpsUploadCertificateArrayOutput values.
// You can construct a concrete instance of `CpsUploadCertificateArrayInput` via:
//
//	CpsUploadCertificateArray{ CpsUploadCertificateArgs{...} }
type CpsUploadCertificateArrayInput interface {
	pulumi.Input

	ToCpsUploadCertificateArrayOutput() CpsUploadCertificateArrayOutput
	ToCpsUploadCertificateArrayOutputWithContext(context.Context) CpsUploadCertificateArrayOutput
}

type CpsUploadCertificateArray []CpsUploadCertificateInput

func (CpsUploadCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsUploadCertificate)(nil)).Elem()
}

func (i CpsUploadCertificateArray) ToCpsUploadCertificateArrayOutput() CpsUploadCertificateArrayOutput {
	return i.ToCpsUploadCertificateArrayOutputWithContext(context.Background())
}

func (i CpsUploadCertificateArray) ToCpsUploadCertificateArrayOutputWithContext(ctx context.Context) CpsUploadCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsUploadCertificateArrayOutput)
}

// CpsUploadCertificateMapInput is an input type that accepts CpsUploadCertificateMap and CpsUploadCertificateMapOutput values.
// You can construct a concrete instance of `CpsUploadCertificateMapInput` via:
//
//	CpsUploadCertificateMap{ "key": CpsUploadCertificateArgs{...} }
type CpsUploadCertificateMapInput interface {
	pulumi.Input

	ToCpsUploadCertificateMapOutput() CpsUploadCertificateMapOutput
	ToCpsUploadCertificateMapOutputWithContext(context.Context) CpsUploadCertificateMapOutput
}

type CpsUploadCertificateMap map[string]CpsUploadCertificateInput

func (CpsUploadCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsUploadCertificate)(nil)).Elem()
}

func (i CpsUploadCertificateMap) ToCpsUploadCertificateMapOutput() CpsUploadCertificateMapOutput {
	return i.ToCpsUploadCertificateMapOutputWithContext(context.Background())
}

func (i CpsUploadCertificateMap) ToCpsUploadCertificateMapOutputWithContext(ctx context.Context) CpsUploadCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsUploadCertificateMapOutput)
}

type CpsUploadCertificateOutput struct{ *pulumi.OutputState }

func (CpsUploadCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsUploadCertificate)(nil)).Elem()
}

func (o CpsUploadCertificateOutput) ToCpsUploadCertificateOutput() CpsUploadCertificateOutput {
	return o
}

func (o CpsUploadCertificateOutput) ToCpsUploadCertificateOutputWithContext(ctx context.Context) CpsUploadCertificateOutput {
	return o
}

// Boolean. Use only if `changeManagement` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
func (o CpsUploadCertificateOutput) AcknowledgeChangeManagement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolPtrOutput { return v.AcknowledgeChangeManagement }).(pulumi.BoolPtrOutput)
}

// Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `autoApproveWarnings`.
func (o CpsUploadCertificateOutput) AcknowledgePostVerificationWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolPtrOutput { return v.AcknowledgePostVerificationWarnings }).(pulumi.BoolPtrOutput)
}

// The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `getCpsWarnings` data source.
func (o CpsUploadCertificateOutput) AutoApproveWarnings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringArrayOutput { return v.AutoApproveWarnings }).(pulumi.StringArrayOutput)
}

// The ECDSA certificate in PEM format you want to upload.
func (o CpsUploadCertificateOutput) CertificateEcdsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.CertificateEcdsaPem }).(pulumi.StringPtrOutput)
}

// The RSA certificate in PEM format you want to upload.
func (o CpsUploadCertificateOutput) CertificateRsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.CertificateRsaPem }).(pulumi.StringPtrOutput)
}

// Unique identifier for the certificate enrollment.
// * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
func (o CpsUploadCertificateOutput) EnrollmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.IntOutput { return v.EnrollmentId }).(pulumi.IntOutput)
}

// The trust chain in PEM format for the ECDSA certificate you want to upload.
func (o CpsUploadCertificateOutput) TrustChainEcdsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.TrustChainEcdsaPem }).(pulumi.StringPtrOutput)
}

// The trust chain in PEM format for the RSA certificate you want to upload.
func (o CpsUploadCertificateOutput) TrustChainRsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.TrustChainRsaPem }).(pulumi.StringPtrOutput)
}

// Used to distinguish whether there are unacknowledged warnings for a certificate
func (o CpsUploadCertificateOutput) UnacknowledgedWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolOutput { return v.UnacknowledgedWarnings }).(pulumi.BoolOutput)
}

// Boolean. Enter `true` to wait for certificate to be deployed.
func (o CpsUploadCertificateOutput) WaitForDeployment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolPtrOutput { return v.WaitForDeployment }).(pulumi.BoolPtrOutput)
}

type CpsUploadCertificateArrayOutput struct{ *pulumi.OutputState }

func (CpsUploadCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsUploadCertificate)(nil)).Elem()
}

func (o CpsUploadCertificateArrayOutput) ToCpsUploadCertificateArrayOutput() CpsUploadCertificateArrayOutput {
	return o
}

func (o CpsUploadCertificateArrayOutput) ToCpsUploadCertificateArrayOutputWithContext(ctx context.Context) CpsUploadCertificateArrayOutput {
	return o
}

func (o CpsUploadCertificateArrayOutput) Index(i pulumi.IntInput) CpsUploadCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CpsUploadCertificate {
		return vs[0].([]*CpsUploadCertificate)[vs[1].(int)]
	}).(CpsUploadCertificateOutput)
}

type CpsUploadCertificateMapOutput struct{ *pulumi.OutputState }

func (CpsUploadCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsUploadCertificate)(nil)).Elem()
}

func (o CpsUploadCertificateMapOutput) ToCpsUploadCertificateMapOutput() CpsUploadCertificateMapOutput {
	return o
}

func (o CpsUploadCertificateMapOutput) ToCpsUploadCertificateMapOutputWithContext(ctx context.Context) CpsUploadCertificateMapOutput {
	return o
}

func (o CpsUploadCertificateMapOutput) MapIndex(k pulumi.StringInput) CpsUploadCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CpsUploadCertificate {
		return vs[0].(map[string]*CpsUploadCertificate)[vs[1].(string)]
	}).(CpsUploadCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CpsUploadCertificateInput)(nil)).Elem(), &CpsUploadCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsUploadCertificateArrayInput)(nil)).Elem(), CpsUploadCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsUploadCertificateMapInput)(nil)).Elem(), CpsUploadCertificateMap{})
	pulumi.RegisterOutputType(CpsUploadCertificateOutput{})
	pulumi.RegisterOutputType(CpsUploadCertificateArrayOutput{})
	pulumi.RegisterOutputType(CpsUploadCertificateMapOutput{})
}
